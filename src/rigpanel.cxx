// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "gettext.h"
#include "rigpanel.h"
#include "images.h"
#include "rig.h"
#include "status.h"
#include "support.h"
#include "K3_ui.h"
static const int freq_sel_widths[]={110, 70, 70, 0}; 

static void cb_mnuExit(Fl_Menu_*, void*) {
  cbExit();
}

static void cb_mnuRestoreData(Fl_Menu_*, void*) {
  progStatus.restore_rig_data = !progStatus.restore_rig_data;
}

static void cb_mnuKeepData(Fl_Menu_*, void*) {
  progStatus.use_rig_data= !progStatus.use_rig_data;
}

static void cb_mnuColorConfig(Fl_Menu_*, void*) {
  setDisplayColors();
}

static void cb_mnuTooltips(Fl_Menu_*, void*) {
  progStatus.tooltips=mnuTooltips->value();
Fl_Tooltip::enable(progStatus.tooltips);
}

static void cb_mnuConfigXcvr(Fl_Menu_*, void*) {
  configXcvr();
}

static void cb_Memory(Fl_Menu_*, void*) {
  openMemoryDialog();
}

static void cb_save_me(Fl_Menu_*, void*) {
  addFreq();
}

static void cb_Events(Fl_Menu_*, void*) {
  cbEventLog();
}

static void cb_Polling(Fl_Menu_*, void*) {
  open_poll_tab();
}

static void cb_Send(Fl_Menu_*, void*) {
  open_send_command_tab();
}

static void cb_mnuOnLineHelp(Fl_Menu_*, void*) {
  visit_URL((void *)("http://www.w1hkj.com/flrig-help/index.html"));
}

static void cb_mnuAbout(Fl_Menu_*, void*) {
  about();
}

Fl_Menu_Item menu_[] = {
 {_("&Files"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("E&xit"), 0,  (Fl_Callback*)cb_mnuExit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Config"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Restore Freq/Mode"), 0,  (Fl_Callback*)cb_mnuRestoreData, 0, 6, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Keep Freq/Mode"), 0,  (Fl_Callback*)cb_mnuKeepData, 0, 134, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Colors"), 0,  (Fl_Callback*)cb_mnuColorConfig, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Tooltips"), 0,  (Fl_Callback*)cb_mnuTooltips, 0, 130, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Xcvr select"), 0,  (Fl_Callback*)cb_mnuConfigXcvr, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Memory"), 0,  (Fl_Callback*)cb_Memory, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("@>>"), 0,  (Fl_Callback*)cb_save_me, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Debug"), 0,  0, 0, 192, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Events"), 0,  (Fl_Callback*)cb_Events, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Polling"), 0,  (Fl_Callback*)cb_Polling, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&Send command"), 0,  (Fl_Callback*)cb_Send, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Help"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("On Line Help"), 0,  (Fl_Callback*)cb_mnuOnLineHelp, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&About"), 0,  (Fl_Callback*)cb_mnuAbout, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Output *txt_encA=(Fl_Output *)0;

cFreqControl *FreqDispA=(cFreqControl *)0;

cFreqControl *FreqDispB=(cFreqControl *)0;

Fl_Light_Button *btnVol=(Fl_Light_Button *)0;

static void cb_btnVol(Fl_Light_Button*, void*) {
  cbMute();
}

Fl_Wheel_Value_Slider *sldrVOLUME=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrVOLUME(Fl_Wheel_Value_Slider*, void*) {
  setVolume();
}

Fl_Wheel_Value_Slider *sldrRFGAIN=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrRFGAIN(Fl_Wheel_Value_Slider*, void*) {
  setRFGAIN();
}

Fl_Wheel_Value_Slider *sldrSQUELCH=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrSQUELCH(Fl_Wheel_Value_Slider*, void*) {
  setSQUELCH();
}

Fl_Light_Button *btnNR=(Fl_Light_Button *)0;

static void cb_btnNR(Fl_Light_Button*, void*) {
  cbNR();
}

Fl_Wheel_Value_Slider *sldrNR=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrNR(Fl_Wheel_Value_Slider*, void*) {
  setNR();
}

Fl_Light_Button *btnIFsh=(Fl_Light_Button *)0;

static void cb_btnIFsh(Fl_Light_Button*, void*) {
  cbIFsh();
}

Fl_Wheel_Value_Slider *sldrIFSHIFT=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrIFSHIFT(Fl_Wheel_Value_Slider*, void*) {
  setIFshift();
}

Fl_Light_Button *btnNotch=(Fl_Light_Button *)0;

static void cb_btnNotch(Fl_Light_Button*, void*) {
  cbbtnNotch();
}

Fl_Wheel_Value_Slider *sldrNOTCH=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrNOTCH(Fl_Wheel_Value_Slider*, void*) {
  setNotch();
}

Fl_Wheel_Value_Slider *sldrMICGAIN=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrMICGAIN(Fl_Wheel_Value_Slider*, void*) {
  setMicGain();
}

Fl_Wheel_Value_Slider *sldrPOWER=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrPOWER(Fl_Wheel_Value_Slider*, void*) {
  setPower();
}

Fl_Box *txtInactive=(Fl_Box *)0;

Fl_Light_Button *btnA=(Fl_Light_Button *)0;

static void cb_btnA(Fl_Light_Button*, void*) {
  if (btnA->value()==1)
	cb_selectA();
btnA->value(1);
btnB->value(0);
}

Fl_Light_Button *btnB=(Fl_Light_Button *)0;

static void cb_btnB(Fl_Light_Button*, void*) {
  if (btnB->value()==1)
	cb_selectB();
btnB->value(1);
btnA->value(0);
}

Fl_Button *btn_K3_swapAB=(Fl_Button *)0;

static void cb_btn_K3_swapAB(Fl_Button*, void*) {
  cb_K3_swapAB();
}

Fl_Button *btnA2B=(Fl_Button *)0;

static void cb_btnA2B(Fl_Button*, void*) {
  cbA2B();
}

Fl_Light_Button *btnSplit=(Fl_Light_Button *)0;

static void cb_btnSplit(Fl_Light_Button* o, void*) {
  cb_set_split(o->value());
}

Fl_ComboBox *opMODE=(Fl_ComboBox *)0;

static void cb_opMODE(Fl_ComboBox*, void*) {
  setMode();
}

Fl_ComboBox *opBW=(Fl_ComboBox *)0;

static void cb_opBW(Fl_ComboBox*, void*) {
  setBW();
}

Fl_Button *btn_show_controls=(Fl_Button *)0;

static void cb_btn_show_controls(Fl_Button*, void*) {
  show_controls();
}

Fl_Light_Button *btnAttenuator=(Fl_Light_Button *)0;

static void cb_btnAttenuator(Fl_Light_Button*, void*) {
  cbAttenuator();
}

Fl_Light_Button *btnPreamp=(Fl_Light_Button *)0;

static void cb_btnPreamp(Fl_Light_Button*, void*) {
  cbPreamp();
}

Fl_Light_Button *btnNOISE=(Fl_Light_Button *)0;

static void cb_btnNOISE(Fl_Light_Button*, void*) {
  cbNoise();
}

Fl_Light_Button *btnAutoNotch=(Fl_Light_Button *)0;

static void cb_btnAutoNotch(Fl_Light_Button*, void*) {
  cbAN();
}

Fl_Button *btnTune=(Fl_Button *)0;

static void cb_btnTune(Fl_Button*, void*) {
  cbTune();
}

Fl_Light_Button *btnPTT=(Fl_Light_Button *)0;

static void cb_btnPTT(Fl_Light_Button*, void*) {
  cbPTT();
}

Fl_Group *grpMeters=(Fl_Group *)0;

Fl_Box *scaleSmeter=(Fl_Box *)0;

#include <FL/Fl_Bitmap.H>
static unsigned char idata_S60[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,28,0,0,14,7,0,
128,195,1,0,224,112,0,0,64,28,0,128,227,0,0,0,0,0,0,68,34,0,0,145,8,0,64,36,2,0,
16,137,0,0,96,34,0,64,20,1,0,0,0,0,0,4,32,0,0,129,0,0,64,32,2,0,0,137,0,0,96,
34,0,64,16,1,0,0,0,0,0,4,32,0,0,129,0,0,64,32,2,0,2,137,0,128,80,34,128,64,16,
1,0,0,0,0,0,56,24,0,0,142,7,0,128,195,3,0,130,136,0,128,80,34,128,192,19,1,0,
0,0,0,0,64,32,0,0,144,8,0,0,4,2,128,79,136,0,224,75,34,224,71,20,1,0,0,0,0,0,
64,32,0,0,144,8,0,0,4,2,0,34,136,0,128,248,34,128,64,20,1,0,0,0,0,0,68,34,0,0,
145,8,0,64,36,2,0,18,136,0,128,64,34,128,64,20,1,0,0,0,0,0,56,28,0,0,14,7,0,128,
195,1,0,240,113,0,0,64,28,0,128,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,4,0,0,0,1,0,0,64,0,0,0,16,0,0,0,4,0,0,0,1,0,0,16,0,0,0,4,0,0,0,
1,0,0,64,0,0,0,16,0,0,0,4,0,0,0,1,0,0,16,0,0,0,4,0,0,0,1,0,0,64,0,0,0,16,0,0,
0,4,0,0,0,1,0,0,16,0,0,0,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,
16,0,0,0,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,16,0,0,0,4,16,64,
0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,16,0,0,0,252,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0};
static Fl_Bitmap image_S60(idata_S60, 205, 18);

Fl_Button *btnALC_SWR=(Fl_Button *)0;

static void cb_btnALC_SWR(Fl_Button*, void*) {
  cbALC_SWR();
}

static unsigned char idata_SWR[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,240,1,0,14,0,0,
0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,192,16,0,0,17,0,0,0,0,0,17,0,0,0,0,0,
0,0,0,0,0,0,0,0,136,0,128,16,0,0,16,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,8,
0,128,240,0,0,16,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,112,162,130,0,1,0,8,0,
0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,128,162,133,0,1,0,4,0,0,0,0,0,16,0,0,0,0,
0,0,0,0,0,0,0,0,0,128,170,128,0,1,0,2,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,
136,170,128,16,1,0,1,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,112,148,128,228,0,0,
31,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,192,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,32,132,0,4,0,0,4,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,32,132,0,
4,0,0,4,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,192,123,0,4,0,0,4,0,0,4,0,0,0,0,
0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,36,73,146,36,73,146,4,65,16,4,65,16,4,0,0,0,0,0,
0,0,0,0,0,0,0,0,36,73,146,36,73,146,4,65,16,4,65,16,68,68,68,68,68,68,68,68,
68,68,68,68,68,4,36,73,146,36,73,146,4,65,16,4,65,16,68,68,68,68,68,68,68,68,
68,68,68,68,68,4,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,7};
static Fl_Bitmap image_SWR(idata_SWR, 205, 18);

Fl_SigBar *sldrRcvSignal=(Fl_SigBar *)0;

Fl_SigBar *sldrALC_SWR=(Fl_SigBar *)0;

Fl_SigBar *sldrFwdPwr=(Fl_SigBar *)0;

Fl_Box *scalePower=(Fl_Box *)0;

static unsigned char idata_P100[] =
{252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,7,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,5,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,5,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,
16,64,0,1,4,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,4,0,
64,0,0,4,0,64,0,0,4,0,64,0,0,4,0,64,0,0,4,0,64,0,0,4,4,0,64,0,0,4,0,64,0,0,4,0,
64,0,0,4,0,64,0,0,4,0,64,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,192,113,0,0,0,0,113,0,0,0,192,113,0,0,0,192,113,0,0,0,0,0,240,0,0,
0,32,138,0,0,0,128,137,0,0,0,32,138,0,0,0,32,138,0,0,0,0,0,16,1,0,0,0,138,0,0,
0,128,137,0,0,0,32,136,0,0,0,32,138,0,0,0,0,0,16,1,0,0,0,138,0,0,0,64,137,0,0,
0,32,136,0,0,0,32,138,0,0,0,0,0,16,1,0,0,0,137,0,0,0,64,137,0,0,0,224,139,0,0,
0,192,137,0,0,0,0,0,240,12,0,0,128,136,0,0,0,32,137,0,0,0,32,138,0,0,0,32,138,
0,0,0,0,0,16,18,0,0,64,136,0,0,0,224,139,0,0,0,32,138,0,0,0,32,138,0,0,0,0,0,
16,18,0,0,32,136,0,0,0,0,137,0,0,0,32,138,0,0,0,32,138,0,0,0,0,0,16,12,0,0,224,
115,0,0,0,0,113,0,0,0,192,113,0,0,0,192,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Bitmap image_P100(idata_P100, 205, 18);

Fl_Box *boxControl=(Fl_Box *)0;

Fl_Light_Button *btnAuxRTS=(Fl_Light_Button *)0;

static void cb_btnAuxRTS(Fl_Light_Button* o, void*) {
  progStatus.aux_rts = o->value();
cbAuxPort();
}

Fl_Light_Button *btnAuxDTR=(Fl_Light_Button *)0;

static void cb_btnAuxDTR(Fl_Light_Button* o, void*) {
  progStatus.aux_dtr = o->value();
cbAuxPort();
}

Fl_Light_Button *btnMicLine=(Fl_Light_Button *)0;

static void cb_btnMicLine(Fl_Light_Button*, void*) {
  cbbtnMicLine();
}

Fl_Counter *cntRIT=(Fl_Counter *)0;

static void cb_cntRIT(Fl_Counter*, void*) {
  cbRIT();
}

Fl_Counter *cntXIT=(Fl_Counter *)0;

static void cb_cntXIT(Fl_Counter*, void*) {
  cbXIT();
}

Fl_Counter *cntBFO=(Fl_Counter *)0;

static void cb_cntBFO(Fl_Counter*, void*) {
  cbBFO();
}

Fl_Button *btnInitializing=(Fl_Button *)0;

Fl_Tabs *tabs550=(Fl_Tabs *)0;

Fl_Group *tt550_CW=(Fl_Group *)0;

Fl_Counter *cnt_tt550_cw_wpm=(Fl_Counter *)0;

static void cb_cnt_tt550_cw_wpm(Fl_Counter* o, void*) {
  progStatus.tt550_cw_wpm = (int)o->value();
cb_tt550_cw_wpm();
}

Fl_Counter *cnt_tt550_cw_weight=(Fl_Counter *)0;

static void cb_cnt_tt550_cw_weight(Fl_Counter* o, void*) {
  progStatus.tt550_cw_weight = o->value();
cb_tt550_cw_weight();
}

Fl_Counter *cnt_tt550_cw_qsk=(Fl_Counter *)0;

static void cb_cnt_tt550_cw_qsk(Fl_Counter* o, void*) {
  progStatus.tt550_cw_qsk = (int)o->value();
cb_tt550_cw_qsk();
}

Fl_Counter *cnt_tt550_cw_vol=(Fl_Counter *)0;

static void cb_cnt_tt550_cw_vol(Fl_Counter* o, void*) {
  progStatus.tt550_cw_vol=(int)o->value();
cb_tt550_cw_vol();
}

Fl_Counter *cnt_tt550_cw_spot=(Fl_Counter *)0;

static void cb_cnt_tt550_cw_spot(Fl_Counter* o, void*) {
  progStatus.tt550_cw_spot=(int)o->value();
cb_tt550_cw_spot();
}

Fl_Check_Button *btn_tt550_enable_keyer=(Fl_Check_Button *)0;

static void cb_btn_tt550_enable_keyer(Fl_Check_Button* o, void*) {
  progStatus.tt550_enable_keyer=o->value();
cb_tt550_enable_keyer();
}

Fl_Group *tt550_VOX=(Fl_Group *)0;

Fl_Counter *cnt_tt550_vox_gain=(Fl_Counter *)0;

static void cb_cnt_tt550_vox_gain(Fl_Counter* o, void*) {
  progStatus.tt550_vox_gain=(int)o->value();
cb_tt550_vox_gain();
}

Fl_Counter *cnt_tt550_anti_vox=(Fl_Counter *)0;

static void cb_cnt_tt550_anti_vox(Fl_Counter* o, void*) {
  progStatus.tt550_vox_anti=(int)o->value();
cb_tt550_vox_anti();
}

Fl_Counter *cnt_tt550_vox_hang=(Fl_Counter *)0;

static void cb_cnt_tt550_vox_hang(Fl_Counter* o, void*) {
  progStatus.tt550_vox_hang = (int)o->value();
cb_tt550_vox_hang();
}

Fl_Light_Button *btn_tt550_vox=(Fl_Light_Button *)0;

static void cb_btn_tt550_vox(Fl_Light_Button* o, void*) {
  progStatus.tt550_vox_onoff=o->value();
cb_tt550_vox_onoff();
}

Fl_Group *tt550_Speech=(Fl_Group *)0;

Fl_Light_Button *btn_tt550_CompON=(Fl_Light_Button *)0;

static void cb_btn_tt550_CompON(Fl_Light_Button* o, void*) {
  progStatus.tt550_compON=o->value();
cb_tt550_compression();
}

Fl_Counter *cnt_tt550_compression=(Fl_Counter *)0;

static void cb_cnt_tt550_compression(Fl_Counter* o, void*) {
  progStatus.tt550_compression=(int)o->value();
cb_tt550_compression();
}

Fl_Counter *cnt_tt550_mon_vol=(Fl_Counter *)0;

static void cb_cnt_tt550_mon_vol(Fl_Counter* o, void*) {
  progStatus.tt550_mon_vol=(int)o->value();
cb_tt550_mon_vol();
}

Fl_Group *tt550_Audio=(Fl_Group *)0;

Fl_Counter *cnt_tt550_line_out=(Fl_Counter *)0;

static void cb_cnt_tt550_line_out(Fl_Counter* o, void*) {
  progStatus.tt550_line_out = (int)o->value();
cb_tt550_line_out();
}

Fl_Check_Button *btnAccInp=(Fl_Check_Button *)0;

static void cb_btnAccInp(Fl_Check_Button* o, void*) {
  progStatus.tt550_use_line_in=o->value();
cb_tt550_use_line_in();
}

Fl_Group *tt550_Rx=(Fl_Group *)0;

Fl_ComboBox *cbo_tt550_nb_level=(Fl_ComboBox *)0;

static void cb_cbo_tt550_nb_level(Fl_ComboBox* o, void*) {
  progStatus.tt550_nb_level = o->index();
cb_tt550_nb_level();
}

Fl_ComboBox *cbo_tt550_agc_level=(Fl_ComboBox *)0;

static void cb_cbo_tt550_agc_level(Fl_ComboBox* o, void*) {
  progStatus.tt550_agc_level = o->index();
cb_tt550_agc_level();
}

Fl_Counter *cnt_tt550_vfo_adj=(Fl_Counter *)0;

static void cb_cnt_tt550_vfo_adj(Fl_Counter* o, void*) {
  progStatus.vfo_adj=o->value();
cb_vfo_adj();
}

Fl_Group *tt550_Tx=(Fl_Group *)0;

Fl_Check_Button *btn_tt550_enable_xmtr=(Fl_Check_Button *)0;

static void cb_btn_tt550_enable_xmtr(Fl_Check_Button* o, void*) {
  progStatus.tt550_enable_xmtr=o->value();
cb_tt550_enable_xmtr();
}

Fl_Check_Button *btn_tt550_enable_tloop=(Fl_Check_Button *)0;

static void cb_btn_tt550_enable_tloop(Fl_Check_Button* o, void*) {
  progStatus.tt550_enable_tloop=o->value();
cb_tt550_enable_tloop();
}

Fl_Check_Button *btn_tt550_tuner_bypass=(Fl_Check_Button *)0;

static void cb_btn_tt550_tuner_bypass(Fl_Check_Button* o, void*) {
  progStatus.tt550_tuner_bypass=o->value();
cb_tt550_tuner_bypass();
}

Fl_ComboBox *op_tt550_XmtBW=(Fl_ComboBox *)0;

static void cb_op_tt550_XmtBW(Fl_ComboBox* o, void*) {
  progStatus.tt550_xmt_bw = o->index();
cb_tt550_setXmtBW();
}

Fl_Check_Button *btn_tt550_use_xmt_bw=(Fl_Check_Button *)0;

static void cb_btn_tt550_use_xmt_bw(Fl_Check_Button* o, void*) {
  progStatus.tt550_use_xmt_bw = o->value();
cb_tt550_setXmtBW();
}

Fl_Group *tt550_302A=(Fl_Group *)0;

Fl_Counter *cnt_tt550_keypad_time_out=(Fl_Counter *)0;

static void cb_cnt_tt550_keypad_time_out(Fl_Counter* o, void*) {
  progStatus.tt550_keypad_timeout=(int)(o->value()*1000.0);
}

Fl_Counter *cnt_tt550_encoder_sensitivity=(Fl_Counter *)0;

static void cb_cnt_tt550_encoder_sensitivity(Fl_Counter* o, void*) {
  progStatus.tt550_encoder_sensitivity = o->value();
}

Fl_Choice *sel_tt550_encoder_step=(Fl_Choice *)0;

static void cb_sel_tt550_encoder_step(Fl_Choice* o, void*) {
  progStatus.tt550_encoder_step = o->value();
}

Fl_Group *tt550_302B=(Fl_Group *)0;

Fl_Choice *sel_tt550_F1_func=(Fl_Choice *)0;

static void cb_sel_tt550_F1_func(Fl_Choice* o, void*) {
  progStatus.tt550_F1_func = o->value();
}

Fl_Choice *sel_tt550_F2_func=(Fl_Choice *)0;

static void cb_sel_tt550_F2_func(Fl_Choice* o, void*) {
  progStatus.tt550_F2_func = o->value();
}

Fl_Choice *sel_tt550_F3_func=(Fl_Choice *)0;

static void cb_sel_tt550_F3_func(Fl_Choice* o, void*) {
  progStatus.tt550_F3_func = o->value();
}

Fl_Tabs *tabsGeneric=(Fl_Tabs *)0;

Fl_Group *genericCW=(Fl_Group *)0;

Fl_Counter *cnt_cw_vol=(Fl_Counter *)0;

static void cb_cnt_cw_vol(Fl_Counter* o, void*) {
  progStatus.cw_vol=o->value();
cb_cw_vol();
}

Fl_Counter *cnt_cw_spot=(Fl_Counter *)0;

static void cb_cnt_cw_spot(Fl_Counter* o, void*) {
  progStatus.cw_spot=(int)o->value();
cb_cw_spot();
}

Fl_Counter *cnt_cw_qsk=(Fl_Counter *)0;

static void cb_cnt_cw_qsk(Fl_Counter* o, void*) {
  progStatus.cw_qsk = (int)o->value();
cb_cw_qsk();
}

Fl_Counter *cnt_cw_weight=(Fl_Counter *)0;

static void cb_cnt_cw_weight(Fl_Counter* o, void*) {
  progStatus.cw_weight = o->value();
cb_cw_weight();
}

Fl_Counter *cnt_cw_wpm=(Fl_Counter *)0;

static void cb_cnt_cw_wpm(Fl_Counter* o, void*) {
  progStatus.cw_wpm = o->value();
cb_cw_wpm();
}

Fl_Check_Button *btn_enable_keyer=(Fl_Check_Button *)0;

static void cb_btn_enable_keyer(Fl_Check_Button* o, void*) {
  progStatus.enable_keyer=o->value();
cb_enable_keyer();
}

Fl_Group *genericVOX=(Fl_Group *)0;

Fl_Counter *cnt_vox_gain=(Fl_Counter *)0;

static void cb_cnt_vox_gain(Fl_Counter* o, void*) {
  progStatus.vox_gain=(int)o->value();
cb_vox_gain();
}

Fl_Counter *cnt_anti_vox=(Fl_Counter *)0;

static void cb_cnt_anti_vox(Fl_Counter* o, void*) {
  progStatus.vox_anti=(int)o->value();
cb_vox_anti();
}

Fl_Counter *cnt_vox_hang=(Fl_Counter *)0;

static void cb_cnt_vox_hang(Fl_Counter* o, void*) {
  progStatus.vox_hang = (int)o->value();
cb_vox_hang();
}

Fl_Light_Button *btn_vox=(Fl_Light_Button *)0;

static void cb_btn_vox(Fl_Light_Button* o, void*) {
  progStatus.vox_onoff=o->value();
cb_vox_onoff();
}

Fl_Group *genericSpeech=(Fl_Group *)0;

Fl_Light_Button *btnCompON=(Fl_Light_Button *)0;

static void cb_btnCompON(Fl_Light_Button* o, void*) {
  progStatus.compON=o->value();
cb_compression();
}

Fl_Counter *cnt_compression=(Fl_Counter *)0;

static void cb_cnt_compression(Fl_Counter* o, void*) {
  progStatus.compression=(int)o->value();
cb_compression();
}

Fl_Group *genericRx=(Fl_Group *)0;

Fl_ComboBox *cbo_nb_level=(Fl_ComboBox *)0;

static void cb_cbo_nb_level(Fl_ComboBox* o, void*) {
  progStatus.nb_level = o->index();
cb_nb_level();
}

Fl_ComboBox *cbo_agc_level=(Fl_ComboBox *)0;

static void cb_cbo_agc_level(Fl_ComboBox* o, void*) {
  progStatus.agc_level = o->index();
cb_agc_level();
}

Fl_Counter *cnt_bpf_center=(Fl_Counter *)0;

static void cb_cnt_bpf_center(Fl_Counter* o, void*) {
  progStatus.bpf_center=o->value();
cb_bpf_center();
}

Fl_Check_Button *btn_use_bpf_center=(Fl_Check_Button *)0;

static void cb_btn_use_bpf_center(Fl_Check_Button* o, void*) {
  progStatus.use_bpf_center = o->value();
cb_bpf_center();
}

Fl_Group *genericMisc=(Fl_Group *)0;

Fl_Counter *cnt_vfo_adj=(Fl_Counter *)0;

static void cb_cnt_vfo_adj(Fl_Counter* o, void*) {
  progStatus.vfo_adj=o->value();
cb_vfo_adj();
}

Fl_Counter *cnt_line_out=(Fl_Counter *)0;

static void cb_cnt_line_out(Fl_Counter* o, void*) {
  progStatus.line_out = o->value();
cb_line_out();
}

Fl_Light_Button *btnSpecial=(Fl_Light_Button *)0;

static void cb_btnSpecial(Fl_Light_Button*, void*) {
  cb_special();
}

Fl_Light_Button *btnSpot=(Fl_Light_Button *)0;

static void cb_btnSpot(Fl_Light_Button*, void*) {
  cb_cw_spot();
}

Fl_Double_Window* Rig_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(424, 401, _("Flrig"));
    w = o;
    o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 424, 22);
      o->textsize(12);
      { Fl_Menu_Item* o = &menu_[7];
        progStatus.tooltips ? o->set() :o->clear();
      }
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { txt_encA = new Fl_Output(333, 1, 90, 20);
      txt_encA->box(FL_THIN_DOWN_BOX);
      txt_encA->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      txt_encA->hide();
    } // Fl_Output* txt_encA
    { cFreqControl* o = FreqDispA = new cFreqControl(1, 24, 210, 35, _("10"));
      FreqDispA->box(FL_DOWN_BOX);
      FreqDispA->color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDispA->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDispA->labeltype(FL_NORMAL_LABEL);
      FreqDispA->labelfont(0);
      FreqDispA->labelsize(14);
      FreqDispA->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      FreqDispA->align(FL_ALIGN_CENTER);
      FreqDispA->when(FL_WHEN_CHANGED);
      FreqDispA->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);
      o->setCallBack(movFreqA);
    } // cFreqControl* FreqDispA
    { cFreqControl* o = FreqDispB = new cFreqControl(213, 24, 210, 35, _("10"));
      FreqDispB->box(FL_DOWN_BOX);
      FreqDispB->color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDispB->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDispB->labeltype(FL_NORMAL_LABEL);
      FreqDispB->labelfont(0);
      FreqDispB->labelsize(14);
      FreqDispB->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      FreqDispB->align(FL_ALIGN_CENTER);
      FreqDispB->when(FL_WHEN_CHANGED);
      FreqDispB->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);
      o->setCallBack(movFreqB);
    } // cFreqControl* FreqDispB
    { btnVol = new Fl_Light_Button(2, 125, 60, 18, _("Vol"));
      btnVol->tooltip(_("Speaker on/off"));
      btnVol->down_box(FL_THIN_DOWN_BOX);
      btnVol->value(1);
      btnVol->labelsize(12);
      btnVol->callback((Fl_Callback*)cb_btnVol);
    } // Fl_Light_Button* btnVol
    { Fl_Wheel_Value_Slider* o = sldrVOLUME = new Fl_Wheel_Value_Slider(66, 125, 355, 18);
      sldrVOLUME->tooltip(_("Adjust Audio Volume"));
      sldrVOLUME->type(5);
      sldrVOLUME->box(FL_THIN_DOWN_BOX);
      sldrVOLUME->color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrVOLUME->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrVOLUME->labeltype(FL_NORMAL_LABEL);
      sldrVOLUME->labelfont(0);
      sldrVOLUME->labelsize(12);
      sldrVOLUME->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrVOLUME->maximum(100);
      sldrVOLUME->step(1);
      sldrVOLUME->textsize(12);
      sldrVOLUME->callback((Fl_Callback*)cb_sldrVOLUME);
      sldrVOLUME->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      sldrVOLUME->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrVOLUME
    { Fl_Wheel_Value_Slider* o = sldrRFGAIN = new Fl_Wheel_Value_Slider(66, 145, 355, 18, _("RF"));
      sldrRFGAIN->tooltip(_("Adjust RF gain"));
      sldrRFGAIN->type(5);
      sldrRFGAIN->box(FL_THIN_DOWN_BOX);
      sldrRFGAIN->color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrRFGAIN->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrRFGAIN->labeltype(FL_NORMAL_LABEL);
      sldrRFGAIN->labelfont(0);
      sldrRFGAIN->labelsize(14);
      sldrRFGAIN->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrRFGAIN->maximum(100);
      sldrRFGAIN->step(1);
      sldrRFGAIN->value(15);
      sldrRFGAIN->textsize(12);
      sldrRFGAIN->callback((Fl_Callback*)cb_sldrRFGAIN);
      sldrRFGAIN->align(FL_ALIGN_LEFT);
      sldrRFGAIN->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrRFGAIN
    { Fl_Wheel_Value_Slider* o = sldrSQUELCH = new Fl_Wheel_Value_Slider(66, 165, 355, 18, _("SQL"));
      sldrSQUELCH->tooltip(_("Adjust Squelch"));
      sldrSQUELCH->type(5);
      sldrSQUELCH->box(FL_THIN_DOWN_BOX);
      sldrSQUELCH->color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrSQUELCH->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrSQUELCH->labeltype(FL_NORMAL_LABEL);
      sldrSQUELCH->labelfont(0);
      sldrSQUELCH->labelsize(14);
      sldrSQUELCH->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrSQUELCH->maximum(100);
      sldrSQUELCH->step(1);
      sldrSQUELCH->value(15);
      sldrSQUELCH->textsize(12);
      sldrSQUELCH->callback((Fl_Callback*)cb_sldrSQUELCH);
      sldrSQUELCH->align(FL_ALIGN_LEFT);
      sldrSQUELCH->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrSQUELCH
    { btnNR = new Fl_Light_Button(2, 185, 60, 18, _("NR"));
      btnNR->tooltip(_("Noise Reduction On/Off"));
      btnNR->down_box(FL_THIN_DOWN_BOX);
      btnNR->labelsize(12);
      btnNR->callback((Fl_Callback*)cb_btnNR);
    } // Fl_Light_Button* btnNR
    { Fl_Wheel_Value_Slider* o = sldrNR = new Fl_Wheel_Value_Slider(66, 185, 355, 18);
      sldrNR->tooltip(_("Adjust noise reduction"));
      sldrNR->type(5);
      sldrNR->box(FL_THIN_DOWN_BOX);
      sldrNR->color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrNR->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrNR->labeltype(FL_NORMAL_LABEL);
      sldrNR->labelfont(0);
      sldrNR->labelsize(12);
      sldrNR->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrNR->maximum(100);
      sldrNR->step(2);
      sldrNR->textsize(12);
      sldrNR->callback((Fl_Callback*)cb_sldrNR);
      sldrNR->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      sldrNR->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrNR
    { btnIFsh = new Fl_Light_Button(2, 206, 60, 18, _("IFsh"));
      btnIFsh->tooltip(_("IF Shift On/Off"));
      btnIFsh->down_box(FL_THIN_DOWN_BOX);
      btnIFsh->labelsize(12);
      btnIFsh->callback((Fl_Callback*)cb_btnIFsh);
    } // Fl_Light_Button* btnIFsh
    { Fl_Wheel_Value_Slider* o = sldrIFSHIFT = new Fl_Wheel_Value_Slider(66, 206, 355, 18);
      sldrIFSHIFT->tooltip(_("Adjust IF Shift"));
      sldrIFSHIFT->type(5);
      sldrIFSHIFT->box(FL_THIN_DOWN_BOX);
      sldrIFSHIFT->color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrIFSHIFT->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrIFSHIFT->labeltype(FL_NORMAL_LABEL);
      sldrIFSHIFT->labelfont(0);
      sldrIFSHIFT->labelsize(12);
      sldrIFSHIFT->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrIFSHIFT->minimum(-1000);
      sldrIFSHIFT->maximum(1000);
      sldrIFSHIFT->step(10);
      sldrIFSHIFT->textsize(12);
      sldrIFSHIFT->callback((Fl_Callback*)cb_sldrIFSHIFT);
      sldrIFSHIFT->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      sldrIFSHIFT->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrIFSHIFT
    { btnNotch = new Fl_Light_Button(2, 226, 60, 18, _("Ntch"));
      btnNotch->tooltip(_("Notch - Manual (off) Auto (on)"));
      btnNotch->down_box(FL_THIN_DOWN_BOX);
      btnNotch->labelsize(12);
      btnNotch->callback((Fl_Callback*)cb_btnNotch);
    } // Fl_Light_Button* btnNotch
    { Fl_Wheel_Value_Slider* o = sldrNOTCH = new Fl_Wheel_Value_Slider(66, 226, 355, 18);
      sldrNOTCH->tooltip(_("Adjust Notch Frequency"));
      sldrNOTCH->type(5);
      sldrNOTCH->box(FL_THIN_DOWN_BOX);
      sldrNOTCH->color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrNOTCH->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrNOTCH->labeltype(FL_NORMAL_LABEL);
      sldrNOTCH->labelfont(0);
      sldrNOTCH->labelsize(14);
      sldrNOTCH->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrNOTCH->minimum(-1000);
      sldrNOTCH->maximum(1000);
      sldrNOTCH->step(10);
      sldrNOTCH->textsize(12);
      sldrNOTCH->callback((Fl_Callback*)cb_sldrNOTCH);
      sldrNOTCH->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      sldrNOTCH->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrNOTCH
    { Fl_Wheel_Value_Slider* o = sldrMICGAIN = new Fl_Wheel_Value_Slider(66, 246, 355, 18, _("MIC"));
      sldrMICGAIN->tooltip(_("Adjust Mic Gain"));
      sldrMICGAIN->type(5);
      sldrMICGAIN->box(FL_THIN_DOWN_BOX);
      sldrMICGAIN->color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrMICGAIN->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrMICGAIN->labeltype(FL_NORMAL_LABEL);
      sldrMICGAIN->labelfont(0);
      sldrMICGAIN->labelsize(14);
      sldrMICGAIN->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrMICGAIN->maximum(100);
      sldrMICGAIN->step(1);
      sldrMICGAIN->textsize(12);
      sldrMICGAIN->callback((Fl_Callback*)cb_sldrMICGAIN);
      sldrMICGAIN->align(FL_ALIGN_LEFT);
      sldrMICGAIN->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrMICGAIN
    { Fl_Wheel_Value_Slider* o = sldrPOWER = new Fl_Wheel_Value_Slider(66, 266, 355, 18, _("PWR"));
      sldrPOWER->tooltip(_("Adjust power level"));
      sldrPOWER->type(5);
      sldrPOWER->box(FL_THIN_DOWN_BOX);
      sldrPOWER->color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrPOWER->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      sldrPOWER->labeltype(FL_NORMAL_LABEL);
      sldrPOWER->labelfont(0);
      sldrPOWER->labelsize(14);
      sldrPOWER->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrPOWER->maximum(100);
      sldrPOWER->step(1);
      sldrPOWER->value(15);
      sldrPOWER->textsize(12);
      sldrPOWER->callback((Fl_Callback*)cb_sldrPOWER);
      sldrPOWER->align(FL_ALIGN_LEFT);
      sldrPOWER->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrPOWER
    { txtInactive = new Fl_Box(211, 76, 128, 19, _("1296000.000"));
      txtInactive->tooltip(_("Vfo #2"));
      txtInactive->box(FL_DOWN_BOX);
      txtInactive->labelfont(4);
      txtInactive->labelsize(16);
      txtInactive->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      txtInactive->hide();
    } // Fl_Box* txtInactive
    { Fl_Light_Button* o = btnA = new Fl_Light_Button(212, 62, 52, 20, _("vfoA"));
      btnA->tooltip(_("Rx-A / Tx-B"));
      btnA->down_box(FL_THIN_DOWN_BOX);
      btnA->labelsize(12);
      btnA->callback((Fl_Callback*)cb_btnA);
      o->value(!useB);
    } // Fl_Light_Button* btnA
    { Fl_Light_Button* o = btnB = new Fl_Light_Button(265, 62, 52, 20, _("vfoB"));
      btnB->tooltip(_("Rx-A / Tx-B"));
      btnB->down_box(FL_THIN_DOWN_BOX);
      btnB->labelsize(12);
      btnB->callback((Fl_Callback*)cb_btnB);
      o->value(useB);
    } // Fl_Light_Button* btnB
    { btn_K3_swapAB = new Fl_Button(265, 62, 52, 20, _("A/B"));
      btn_K3_swapAB->tooltip(_("Swap A/B"));
      btn_K3_swapAB->down_box(FL_DOWN_BOX);
      btn_K3_swapAB->labelsize(12);
      btn_K3_swapAB->callback((Fl_Callback*)cb_btn_K3_swapAB);
      btn_K3_swapAB->hide();
    } // Fl_Button* btn_K3_swapAB
    { btnA2B = new Fl_Button(318, 62, 52, 20, _("A -> B"));
      btnA2B->tooltip(_("Copy A to B"));
      btnA2B->down_box(FL_DOWN_BOX);
      btnA2B->labelsize(12);
      btnA2B->callback((Fl_Callback*)cb_btnA2B);
    } // Fl_Button* btnA2B
    { Fl_Light_Button* o = btnSplit = new Fl_Light_Button(371, 62, 52, 20, _("Split"));
      btnSplit->tooltip(_("Rx-A / Tx-B"));
      btnSplit->down_box(FL_THIN_DOWN_BOX);
      btnSplit->labelsize(12);
      btnSplit->callback((Fl_Callback*)cb_btnSplit);
      o->value(progStatus.split);
    } // Fl_Light_Button* btnSplit
    { opMODE = new Fl_ComboBox(318, 84, 105, 18, _("Mode"));
      opMODE->tooltip(_("Select transceiver operating mode"));
      opMODE->box(FL_FLAT_BOX);
      opMODE->color((Fl_Color)FL_BACKGROUND_COLOR);
      opMODE->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      opMODE->labeltype(FL_NORMAL_LABEL);
      opMODE->labelfont(0);
      opMODE->labelsize(12);
      opMODE->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      opMODE->callback((Fl_Callback*)cb_opMODE);
      opMODE->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      opMODE->when(FL_WHEN_RELEASE);
      opMODE->end();
    } // Fl_ComboBox* opMODE
    { opBW = new Fl_ComboBox(212, 84, 105, 18, _("Bandwidth"));
      opBW->tooltip(_("Select Transceiver Bandwidth"));
      opBW->box(FL_FLAT_BOX);
      opBW->color((Fl_Color)FL_BACKGROUND_COLOR);
      opBW->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      opBW->labeltype(FL_NORMAL_LABEL);
      opBW->labelfont(0);
      opBW->labelsize(12);
      opBW->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      opBW->callback((Fl_Callback*)cb_opBW);
      opBW->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      opBW->when(FL_WHEN_RELEASE);
      opBW->end();
    } // Fl_ComboBox* opBW
    { btn_show_controls = new Fl_Button(1, 286, 18, 18, _("@-22->"));
      btn_show_controls->tooltip(_("Show/Hide controls"));
      btn_show_controls->callback((Fl_Callback*)cb_btn_show_controls);
    } // Fl_Button* btn_show_controls
    { btnAttenuator = new Fl_Light_Button(26, 286, 60, 18, _("Att"));
      btnAttenuator->tooltip(_("Attenuator On/Off"));
      btnAttenuator->down_box(FL_THIN_DOWN_BOX);
      btnAttenuator->labelsize(12);
      btnAttenuator->callback((Fl_Callback*)cb_btnAttenuator);
    } // Fl_Light_Button* btnAttenuator
    { btnPreamp = new Fl_Light_Button(93, 286, 60, 18, _("Pre"));
      btnPreamp->tooltip(_("Preamp On/Off"));
      btnPreamp->down_box(FL_THIN_DOWN_BOX);
      btnPreamp->labelsize(12);
      btnPreamp->callback((Fl_Callback*)cb_btnPreamp);
    } // Fl_Light_Button* btnPreamp
    { btnNOISE = new Fl_Light_Button(160, 286, 60, 18, _("NB"));
      btnNOISE->tooltip(_("Noise Blanker On/Off"));
      btnNOISE->down_box(FL_THIN_DOWN_BOX);
      btnNOISE->labelsize(12);
      btnNOISE->callback((Fl_Callback*)cb_btnNOISE);
    } // Fl_Light_Button* btnNOISE
    { btnAutoNotch = new Fl_Light_Button(227, 286, 60, 18, _("AN"));
      btnAutoNotch->tooltip(_("Auto Notch On/Off"));
      btnAutoNotch->down_box(FL_THIN_DOWN_BOX);
      btnAutoNotch->labelsize(12);
      btnAutoNotch->callback((Fl_Callback*)cb_btnAutoNotch);
    } // Fl_Light_Button* btnAutoNotch
    { btnTune = new Fl_Button(294, 286, 60, 18, _("Tune"));
      btnTune->tooltip(_("Momentary Tune"));
      btnTune->callback((Fl_Callback*)cb_btnTune);
    } // Fl_Button* btnTune
    { btnPTT = new Fl_Light_Button(362, 286, 60, 18, _("PTT"));
      btnPTT->tooltip(_("Xmt On/Off"));
      btnPTT->down_box(FL_THIN_DOWN_BOX);
      btnPTT->labelsize(12);
      btnPTT->callback((Fl_Callback*)cb_btnPTT);
    } // Fl_Light_Button* btnPTT
    { Fl_Group* o = new Fl_Group(1, 62, 210, 60);
      o->box(FL_DOWN_BOX);
      { grpMeters = new Fl_Group(3, 63, 206, 57);
        grpMeters->box(FL_FLAT_BOX);
        { scaleSmeter = new Fl_Box(3, 63, 206, 20);
          scaleSmeter->box(FL_FLAT_BOX);
          scaleSmeter->image(image_S60);
        } // Fl_Box* scaleSmeter
        { btnALC_SWR = new Fl_Button(3, 63, 206, 20);
          btnALC_SWR->tooltip(_("Press SWR / ALC"));
          btnALC_SWR->box(FL_FLAT_BOX);
          btnALC_SWR->down_box(FL_FLAT_BOX);
          btnALC_SWR->image(image_SWR);
          btnALC_SWR->callback((Fl_Callback*)cb_btnALC_SWR);
          btnALC_SWR->hide();
        } // Fl_Button* btnALC_SWR
        { Fl_SigBar* o = sldrRcvSignal = new Fl_SigBar(5, 85, 181, 6);
          sldrRcvSignal->box(FL_FLAT_BOX);
          sldrRcvSignal->color((Fl_Color)FL_BACKGROUND_COLOR);
          sldrRcvSignal->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          sldrRcvSignal->labeltype(FL_NORMAL_LABEL);
          sldrRcvSignal->labelfont(0);
          sldrRcvSignal->labelsize(14);
          sldrRcvSignal->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          sldrRcvSignal->align(FL_ALIGN_CENTER);
          sldrRcvSignal->when(FL_WHEN_RELEASE);
          sldrRcvSignal->hide();
          o->minimum(0);
          o->maximum(100);
        } // Fl_SigBar* sldrRcvSignal
        { Fl_SigBar* o = sldrALC_SWR = new Fl_SigBar(5, 85, 201, 6);
          sldrALC_SWR->box(FL_FLAT_BOX);
          sldrALC_SWR->color((Fl_Color)FL_BACKGROUND_COLOR);
          sldrALC_SWR->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          sldrALC_SWR->labeltype(FL_NORMAL_LABEL);
          sldrALC_SWR->labelfont(0);
          sldrALC_SWR->labelsize(14);
          sldrALC_SWR->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          sldrALC_SWR->align(FL_ALIGN_CENTER);
          sldrALC_SWR->when(FL_WHEN_RELEASE);
          sldrALC_SWR->hide();
          o->minimum(0);
          o->maximum(100);
        } // Fl_SigBar* sldrALC_SWR
        { Fl_SigBar* o = sldrFwdPwr = new Fl_SigBar(5, 92, 201, 6);
          sldrFwdPwr->box(FL_FLAT_BOX);
          sldrFwdPwr->color((Fl_Color)FL_BACKGROUND_COLOR);
          sldrFwdPwr->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          sldrFwdPwr->labeltype(FL_NORMAL_LABEL);
          sldrFwdPwr->labelfont(0);
          sldrFwdPwr->labelsize(14);
          sldrFwdPwr->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          sldrFwdPwr->align(FL_ALIGN_CENTER);
          sldrFwdPwr->when(FL_WHEN_RELEASE);
          sldrFwdPwr->hide();
          o->minimum(0);
          o->maximum(100);
        } // Fl_SigBar* sldrFwdPwr
        { scalePower = new Fl_Box(3, 99, 206, 20);
          scalePower->box(FL_FLAT_BOX);
          scalePower->image(image_P100);
        } // Fl_Box* scalePower
        grpMeters->end();
      } // Fl_Group* grpMeters
      o->end();
    } // Fl_Group* o
    { boxControl = new Fl_Box(3, 311, 130, 17, _("Auxilliary Controls:"));
      boxControl->box(FL_FLAT_BOX);
      boxControl->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    } // Fl_Box* boxControl
    { Fl_Light_Button* o = btnAuxRTS = new Fl_Light_Button(218, 310, 60, 18, _("RTS"));
      btnAuxRTS->tooltip(_("RTS control pin"));
      btnAuxRTS->down_box(FL_THIN_DOWN_BOX);
      btnAuxRTS->labelsize(12);
      btnAuxRTS->callback((Fl_Callback*)cb_btnAuxRTS);
      o->value(progStatus.aux_rts);
    } // Fl_Light_Button* btnAuxRTS
    { Fl_Light_Button* o = btnAuxDTR = new Fl_Light_Button(146, 310, 60, 18, _("DTR"));
      btnAuxDTR->tooltip(_("DTR control pin"));
      btnAuxDTR->down_box(FL_THIN_DOWN_BOX);
      btnAuxDTR->labelsize(12);
      btnAuxDTR->callback((Fl_Callback*)cb_btnAuxDTR);
      o->value(progStatus.aux_dtr);
    } // Fl_Light_Button* btnAuxDTR
    { btnMicLine = new Fl_Light_Button(3, 283, 55, 18, _("Mic"));
      btnMicLine->tooltip(_("Select Mic / Line audio inp."));
      btnMicLine->down_box(FL_THIN_DOWN_BOX);
      btnMicLine->labelsize(12);
      btnMicLine->callback((Fl_Callback*)cb_btnMicLine);
      btnMicLine->hide();
    } // Fl_Light_Button* btnMicLine
    { cntRIT = new Fl_Counter(213, 104, 54, 18, _("R"));
      cntRIT->tooltip(_("RIT"));
      cntRIT->type(1);
      cntRIT->labelsize(12);
      cntRIT->minimum(-1000);
      cntRIT->maximum(1000);
      cntRIT->step(10);
      cntRIT->callback((Fl_Callback*)cb_cntRIT);
      cntRIT->align(FL_ALIGN_RIGHT);
    } // Fl_Counter* cntRIT
    { cntXIT = new Fl_Counter(283, 104, 54, 18, _("X"));
      cntXIT->tooltip(_("XIT"));
      cntXIT->type(1);
      cntXIT->labelsize(12);
      cntXIT->minimum(-1000);
      cntXIT->maximum(1000);
      cntXIT->step(10);
      cntXIT->callback((Fl_Callback*)cb_cntXIT);
      cntXIT->align(FL_ALIGN_RIGHT);
    } // Fl_Counter* cntXIT
    { cntBFO = new Fl_Counter(355, 104, 54, 18, _("B"));
      cntBFO->tooltip(_("BFO"));
      cntBFO->type(1);
      cntBFO->labelsize(12);
      cntBFO->minimum(0);
      cntBFO->maximum(1000);
      cntBFO->step(10);
      cntBFO->value(600);
      cntBFO->callback((Fl_Callback*)cb_cntBFO);
      cntBFO->align(FL_ALIGN_RIGHT);
    } // Fl_Counter* cntBFO
    { btnInitializing = new Fl_Button(0, 23, 424, 100, _("Initializing\n\nPlease wait"));
      btnInitializing->color((Fl_Color)206);
      btnInitializing->labelfont(1);
      btnInitializing->labelsize(24);
      btnInitializing->hide();
    } // Fl_Button* btnInitializing
    { tabs550 = new Fl_Tabs(1, 330, 422, 70);
      tabs550->selection_color((Fl_Color)FL_LIGHT1);
      tabs550->hide();
      { tt550_CW = new Fl_Group(2, 350, 420, 50, _("CW"));
        tt550_CW->color((Fl_Color)FL_LIGHT1);
        tt550_CW->selection_color((Fl_Color)FL_LIGHT1);
        { Fl_Counter* o = cnt_tt550_cw_wpm = new Fl_Counter(7, 355, 60, 22, _("wpm"));
          cnt_tt550_cw_wpm->type(1);
          cnt_tt550_cw_wpm->minimum(5);
          cnt_tt550_cw_wpm->maximum(80);
          cnt_tt550_cw_wpm->step(1);
          cnt_tt550_cw_wpm->value(24);
          cnt_tt550_cw_wpm->callback((Fl_Callback*)cb_cnt_tt550_cw_wpm);
          o->value(progStatus.tt550_cw_wpm);
        } // Fl_Counter* cnt_tt550_cw_wpm
        { Fl_Counter* o = cnt_tt550_cw_weight = new Fl_Counter(74, 355, 60, 22, _("Weight"));
          cnt_tt550_cw_weight->type(1);
          cnt_tt550_cw_weight->minimum(0.75);
          cnt_tt550_cw_weight->maximum(1.5);
          cnt_tt550_cw_weight->step(0.05);
          cnt_tt550_cw_weight->value(1);
          cnt_tt550_cw_weight->callback((Fl_Callback*)cb_cnt_tt550_cw_weight);
          o->value(progStatus.tt550_cw_weight);
        } // Fl_Counter* cnt_tt550_cw_weight
        { Fl_Counter* o = cnt_tt550_cw_qsk = new Fl_Counter(142, 355, 60, 22, _("Delay"));
          cnt_tt550_cw_qsk->tooltip(_("QSK delay (msec)"));
          cnt_tt550_cw_qsk->type(1);
          cnt_tt550_cw_qsk->minimum(0);
          cnt_tt550_cw_qsk->maximum(100);
          cnt_tt550_cw_qsk->step(1);
          cnt_tt550_cw_qsk->value(20);
          cnt_tt550_cw_qsk->callback((Fl_Callback*)cb_cnt_tt550_cw_qsk);
          o->value(progStatus.tt550_cw_qsk);
        } // Fl_Counter* cnt_tt550_cw_qsk
        { Fl_Counter* o = cnt_tt550_cw_vol = new Fl_Counter(209, 355, 60, 22, _("S-T vol"));
          cnt_tt550_cw_vol->tooltip(_("Side tone volume"));
          cnt_tt550_cw_vol->type(1);
          cnt_tt550_cw_vol->minimum(5);
          cnt_tt550_cw_vol->maximum(80);
          cnt_tt550_cw_vol->step(1);
          cnt_tt550_cw_vol->value(24);
          cnt_tt550_cw_vol->callback((Fl_Callback*)cb_cnt_tt550_cw_vol);
          o->value(progStatus.tt550_cw_vol);
        } // Fl_Counter* cnt_tt550_cw_vol
        { Fl_Counter* o = cnt_tt550_cw_spot = new Fl_Counter(277, 355, 60, 22, _("Spot Vol"));
          cnt_tt550_cw_spot->tooltip(_("Spot volume"));
          cnt_tt550_cw_spot->type(1);
          cnt_tt550_cw_spot->minimum(0);
          cnt_tt550_cw_spot->maximum(100);
          cnt_tt550_cw_spot->step(1);
          cnt_tt550_cw_spot->value(20);
          cnt_tt550_cw_spot->callback((Fl_Callback*)cb_cnt_tt550_cw_spot);
          o->value(progStatus.tt550_cw_spot);
        } // Fl_Counter* cnt_tt550_cw_spot
        { Fl_Check_Button* o = btn_tt550_enable_keyer = new Fl_Check_Button(346, 358, 70, 15, _("Keyer"));
          btn_tt550_enable_keyer->tooltip(_("Enable keyer"));
          btn_tt550_enable_keyer->down_box(FL_DOWN_BOX);
          btn_tt550_enable_keyer->callback((Fl_Callback*)cb_btn_tt550_enable_keyer);
          o->value(progStatus.tt550_enable_keyer);
        } // Fl_Check_Button* btn_tt550_enable_keyer
        tt550_CW->end();
      } // Fl_Group* tt550_CW
      { tt550_VOX = new Fl_Group(2, 350, 420, 50, _("Vox"));
        tt550_VOX->hide();
        { Fl_Counter* o = cnt_tt550_vox_gain = new Fl_Counter(60, 355, 70, 22, _("gain"));
          cnt_tt550_vox_gain->type(1);
          cnt_tt550_vox_gain->minimum(0);
          cnt_tt550_vox_gain->maximum(100);
          cnt_tt550_vox_gain->step(1);
          cnt_tt550_vox_gain->callback((Fl_Callback*)cb_cnt_tt550_vox_gain);
          o->value(progStatus.tt550_vox_gain);
        } // Fl_Counter* cnt_tt550_vox_gain
        { Fl_Counter* o = cnt_tt550_anti_vox = new Fl_Counter(136, 355, 70, 22, _("anti"));
          cnt_tt550_anti_vox->type(1);
          cnt_tt550_anti_vox->minimum(0);
          cnt_tt550_anti_vox->maximum(100);
          cnt_tt550_anti_vox->step(1);
          cnt_tt550_anti_vox->callback((Fl_Callback*)cb_cnt_tt550_anti_vox);
          o->value(progStatus.tt550_vox_anti);
        } // Fl_Counter* cnt_tt550_anti_vox
        { Fl_Counter* o = cnt_tt550_vox_hang = new Fl_Counter(212, 355, 70, 22, _("hang"));
          cnt_tt550_vox_hang->type(1);
          cnt_tt550_vox_hang->minimum(0);
          cnt_tt550_vox_hang->maximum(100);
          cnt_tt550_vox_hang->step(1);
          cnt_tt550_vox_hang->callback((Fl_Callback*)cb_cnt_tt550_vox_hang);
          o->value(progStatus.tt550_vox_hang);
        } // Fl_Counter* cnt_tt550_vox_hang
        { Fl_Light_Button* o = btn_tt550_vox = new Fl_Light_Button(289, 355, 70, 22, _("VOX"));
          btn_tt550_vox->callback((Fl_Callback*)cb_btn_tt550_vox);
          o->value(progStatus.tt550_vox_onoff);
        } // Fl_Light_Button* btn_tt550_vox
        tt550_VOX->end();
      } // Fl_Group* tt550_VOX
      { tt550_Speech = new Fl_Group(2, 350, 420, 50, _("Spch"));
        tt550_Speech->hide();
        { Fl_Light_Button* o = btn_tt550_CompON = new Fl_Light_Button(244, 355, 70, 22, _("On"));
          btn_tt550_CompON->callback((Fl_Callback*)cb_btn_tt550_CompON);
          o->value(progStatus.tt550_compON);
        } // Fl_Light_Button* btn_tt550_CompON
        { Fl_Counter* o = cnt_tt550_compression = new Fl_Counter(167, 355, 70, 22, _("Comp"));
          cnt_tt550_compression->type(1);
          cnt_tt550_compression->minimum(0);
          cnt_tt550_compression->maximum(100);
          cnt_tt550_compression->step(1);
          cnt_tt550_compression->callback((Fl_Callback*)cb_cnt_tt550_compression);
          o->value(progStatus.tt550_compression);
        } // Fl_Counter* cnt_tt550_compression
        { Fl_Counter* o = cnt_tt550_mon_vol = new Fl_Counter(91, 355, 70, 22, _("Mon vol"));
          cnt_tt550_mon_vol->tooltip(_("Side tone volume"));
          cnt_tt550_mon_vol->type(1);
          cnt_tt550_mon_vol->minimum(0);
          cnt_tt550_mon_vol->maximum(100);
          cnt_tt550_mon_vol->step(1);
          cnt_tt550_mon_vol->value(25);
          cnt_tt550_mon_vol->callback((Fl_Callback*)cb_cnt_tt550_mon_vol);
          o->value(progStatus.tt550_mon_vol);
        } // Fl_Counter* cnt_tt550_mon_vol
        tt550_Speech->end();
      } // Fl_Group* tt550_Speech
      { tt550_Audio = new Fl_Group(2, 350, 420, 50, _("Audio"));
        tt550_Audio->hide();
        { Fl_Counter* o = cnt_tt550_line_out = new Fl_Counter(114, 360, 69, 22, _("line out"));
          cnt_tt550_line_out->type(1);
          cnt_tt550_line_out->minimum(0);
          cnt_tt550_line_out->maximum(100);
          cnt_tt550_line_out->step(1);
          cnt_tt550_line_out->value(20);
          cnt_tt550_line_out->callback((Fl_Callback*)cb_cnt_tt550_line_out);
          cnt_tt550_line_out->align(FL_ALIGN_LEFT);
          o->value(progStatus.tt550_line_out);
        } // Fl_Counter* cnt_tt550_line_out
        { Fl_Check_Button* o = btnAccInp = new Fl_Check_Button(197, 363, 82, 15, _("Acc Inp."));
          btnAccInp->tooltip(_("Enable to use accessory audio input"));
          btnAccInp->down_box(FL_DOWN_BOX);
          btnAccInp->callback((Fl_Callback*)cb_btnAccInp);
          o->value(progStatus.tt550_use_line_in);
        } // Fl_Check_Button* btnAccInp
        tt550_Audio->end();
      } // Fl_Group* tt550_Audio
      { tt550_Rx = new Fl_Group(2, 350, 420, 50, _("RX"));
        tt550_Rx->hide();
        { Fl_ComboBox* o = cbo_tt550_nb_level = new Fl_ComboBox(50, 355, 80, 22, _("NB level"));
          cbo_tt550_nb_level->tooltip(_("Select Transceiver"));
          cbo_tt550_nb_level->box(FL_DOWN_BOX);
          cbo_tt550_nb_level->color((Fl_Color)FL_BACKGROUND_COLOR);
          cbo_tt550_nb_level->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          cbo_tt550_nb_level->labeltype(FL_NORMAL_LABEL);
          cbo_tt550_nb_level->labelfont(0);
          cbo_tt550_nb_level->labelsize(14);
          cbo_tt550_nb_level->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          cbo_tt550_nb_level->callback((Fl_Callback*)cb_cbo_tt550_nb_level);
          cbo_tt550_nb_level->align(FL_ALIGN_BOTTOM);
          cbo_tt550_nb_level->when(FL_WHEN_RELEASE);
          o->index(progStatus.tt550_nb_level);
          cbo_tt550_nb_level->end();
        } // Fl_ComboBox* cbo_tt550_nb_level
        { Fl_ComboBox* o = cbo_tt550_agc_level = new Fl_ComboBox(150, 355, 80, 22, _("AGC"));
          cbo_tt550_agc_level->tooltip(_("Select Transceiver"));
          cbo_tt550_agc_level->box(FL_DOWN_BOX);
          cbo_tt550_agc_level->color((Fl_Color)FL_BACKGROUND_COLOR);
          cbo_tt550_agc_level->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          cbo_tt550_agc_level->labeltype(FL_NORMAL_LABEL);
          cbo_tt550_agc_level->labelfont(0);
          cbo_tt550_agc_level->labelsize(14);
          cbo_tt550_agc_level->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          cbo_tt550_agc_level->callback((Fl_Callback*)cb_cbo_tt550_agc_level);
          cbo_tt550_agc_level->align(FL_ALIGN_BOTTOM);
          cbo_tt550_agc_level->when(FL_WHEN_RELEASE);
          o->index(progStatus.tt550_agc_level);
          cbo_tt550_agc_level->end();
        } // Fl_ComboBox* cbo_tt550_agc_level
        { Fl_Counter* o = cnt_tt550_vfo_adj = new Fl_Counter(245, 355, 120, 22, _("Vfo Adj(ppm)"));
          cnt_tt550_vfo_adj->callback((Fl_Callback*)cb_cnt_tt550_vfo_adj);
          cnt_tt550_vfo_adj->align(34);
          o->value(progStatus.vfo_adj);
          o->lstep(1.0);
        } // Fl_Counter* cnt_tt550_vfo_adj
        tt550_Rx->end();
      } // Fl_Group* tt550_Rx
      { tt550_Tx = new Fl_Group(2, 350, 420, 50, _("TX"));
        tt550_Tx->hide();
        { Fl_Check_Button* o = btn_tt550_enable_xmtr = new Fl_Check_Button(10, 359, 70, 15, _("Tx ON"));
          btn_tt550_enable_xmtr->down_box(FL_DOWN_BOX);
          btn_tt550_enable_xmtr->value(1);
          btn_tt550_enable_xmtr->callback((Fl_Callback*)cb_btn_tt550_enable_xmtr);
          o->value(progStatus.tt550_enable_xmtr);
        } // Fl_Check_Button* btn_tt550_enable_xmtr
        { Fl_Check_Button* o = btn_tt550_enable_tloop = new Fl_Check_Button(87, 359, 70, 15, _("Tloop"));
          btn_tt550_enable_tloop->down_box(FL_DOWN_BOX);
          btn_tt550_enable_tloop->callback((Fl_Callback*)cb_btn_tt550_enable_tloop);
          o->value(progStatus.tt550_enable_tloop);
        } // Fl_Check_Button* btn_tt550_enable_tloop
        { btn_tt550_tuner_bypass = new Fl_Check_Button(164, 359, 70, 15, _("Tuner"));
          btn_tt550_tuner_bypass->tooltip(_("Check to bypass tuner"));
          btn_tt550_tuner_bypass->down_box(FL_DOWN_BOX);
          btn_tt550_tuner_bypass->callback((Fl_Callback*)cb_btn_tt550_tuner_bypass);
        } // Fl_Check_Button* btn_tt550_tuner_bypass
        { Fl_ComboBox* o = op_tt550_XmtBW = new Fl_ComboBox(241, 355, 100, 22, _("Xmt BW"));
          op_tt550_XmtBW->tooltip(_("Select Transceiver Bandwidth"));
          op_tt550_XmtBW->box(FL_DOWN_BOX);
          op_tt550_XmtBW->color((Fl_Color)FL_BACKGROUND_COLOR);
          op_tt550_XmtBW->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          op_tt550_XmtBW->labeltype(FL_NORMAL_LABEL);
          op_tt550_XmtBW->labelfont(0);
          op_tt550_XmtBW->labelsize(12);
          op_tt550_XmtBW->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          op_tt550_XmtBW->callback((Fl_Callback*)cb_op_tt550_XmtBW);
          op_tt550_XmtBW->align(FL_ALIGN_BOTTOM);
          op_tt550_XmtBW->when(FL_WHEN_RELEASE);
          o->index(progStatus.tt550_xmt_bw);
          op_tt550_XmtBW->end();
        } // Fl_ComboBox* op_tt550_XmtBW
        { Fl_Check_Button* o = btn_tt550_use_xmt_bw = new Fl_Check_Button(345, 359, 21, 15, _("Enable"));
          btn_tt550_use_xmt_bw->tooltip(_("Use Xmt BW setting"));
          btn_tt550_use_xmt_bw->down_box(FL_DOWN_BOX);
          btn_tt550_use_xmt_bw->callback((Fl_Callback*)cb_btn_tt550_use_xmt_bw);
          btn_tt550_use_xmt_bw->align(FL_ALIGN_RIGHT);
          o->value(progStatus.tt550_use_xmt_bw);
        } // Fl_Check_Button* btn_tt550_use_xmt_bw
        tt550_Tx->end();
      } // Fl_Group* tt550_Tx
      { tt550_302A = new Fl_Group(2, 350, 420, 50, _("302-A"));
        tt550_302A->hide();
        { Fl_Counter* o = cnt_tt550_keypad_time_out = new Fl_Counter(31, 355, 120, 21, _("Time out"));
          cnt_tt550_keypad_time_out->tooltip(_("Clear M302 keypad after ## secs"));
          cnt_tt550_keypad_time_out->minimum(0.5);
          cnt_tt550_keypad_time_out->maximum(10);
          cnt_tt550_keypad_time_out->value(2);
          cnt_tt550_keypad_time_out->callback((Fl_Callback*)cb_cnt_tt550_keypad_time_out);
          cnt_tt550_keypad_time_out->align(34);
          o->value(progStatus.tt550_keypad_timeout/1000.0);
          o->step(0.1); o->lstep(1.0);
        } // Fl_Counter* cnt_tt550_keypad_time_out
        { Fl_Counter* o = cnt_tt550_encoder_sensitivity = new Fl_Counter(191, 355, 80, 21, _("Sensitivity"));
          cnt_tt550_encoder_sensitivity->tooltip(_("1 - most sensitive"));
          cnt_tt550_encoder_sensitivity->type(1);
          cnt_tt550_encoder_sensitivity->minimum(1);
          cnt_tt550_encoder_sensitivity->maximum(25);
          cnt_tt550_encoder_sensitivity->step(1);
          cnt_tt550_encoder_sensitivity->value(10);
          cnt_tt550_encoder_sensitivity->callback((Fl_Callback*)cb_cnt_tt550_encoder_sensitivity);
          o->value(progStatus.tt550_encoder_sensitivity);
        } // Fl_Counter* cnt_tt550_encoder_sensitivity
        { Fl_Choice* o = sel_tt550_encoder_step = new Fl_Choice(312, 355, 72, 21, _("Step size"));
          sel_tt550_encoder_step->down_box(FL_BORDER_BOX);
          sel_tt550_encoder_step->callback((Fl_Callback*)cb_sel_tt550_encoder_step);
          sel_tt550_encoder_step->align(FL_ALIGN_BOTTOM);
          o->add("1|10|100|1 K|10 K");
          o->value(progStatus.tt550_encoder_step);
        } // Fl_Choice* sel_tt550_encoder_step
        tt550_302A->end();
      } // Fl_Group* tt550_302A
      { tt550_302B = new Fl_Group(2, 350, 420, 50, _("302-B"));
        tt550_302B->hide();
        { Fl_Choice* o = sel_tt550_F1_func = new Fl_Choice(34, 355, 99, 22, _("F1"));
          sel_tt550_F1_func->tooltip(_("Assign Func Key"));
          sel_tt550_F1_func->down_box(FL_BORDER_BOX);
          sel_tt550_F1_func->callback((Fl_Callback*)cb_sel_tt550_F1_func);
          o->add("None|Clear|CW++|CW--|Band++|Band--|Step++|Step--");
          o->value(progStatus.tt550_F1_func);
        } // Fl_Choice* sel_tt550_F1_func
        { Fl_Choice* o = sel_tt550_F2_func = new Fl_Choice(169, 355, 99, 22, _("F2"));
          sel_tt550_F2_func->tooltip(_("Assign Func Key"));
          sel_tt550_F2_func->down_box(FL_BORDER_BOX);
          sel_tt550_F2_func->callback((Fl_Callback*)cb_sel_tt550_F2_func);
          o->add("None|Clear|CW++|CW--|Band++|Band--|Step++|Step--");
          o->value(progStatus.tt550_F2_func);
        } // Fl_Choice* sel_tt550_F2_func
        { Fl_Choice* o = sel_tt550_F3_func = new Fl_Choice(300, 355, 99, 22, _("F3"));
          sel_tt550_F3_func->tooltip(_("Assign Func Key"));
          sel_tt550_F3_func->down_box(FL_BORDER_BOX);
          sel_tt550_F3_func->callback((Fl_Callback*)cb_sel_tt550_F3_func);
          o->add("None|Clear|CW++|CW--|Band++|Band--|Step++|Step--");
          o->value(progStatus.tt550_F3_func);
        } // Fl_Choice* sel_tt550_F3_func
        tt550_302B->end();
      } // Fl_Group* tt550_302B
      tabs550->end();
    } // Fl_Tabs* tabs550
    { tabsGeneric = new Fl_Tabs(1, 330, 422, 70);
      tabsGeneric->selection_color((Fl_Color)FL_LIGHT1);
      { genericCW = new Fl_Group(2, 349, 420, 49, _("CW"));
        genericCW->color((Fl_Color)FL_LIGHT1);
        genericCW->selection_color((Fl_Color)FL_LIGHT1);
        { Fl_Counter* o = cnt_cw_vol = new Fl_Counter(7, 358, 60, 22, _("S-T vol"));
          cnt_cw_vol->tooltip(_("Side tone volume"));
          cnt_cw_vol->type(1);
          cnt_cw_vol->minimum(5);
          cnt_cw_vol->maximum(80);
          cnt_cw_vol->step(1);
          cnt_cw_vol->value(24);
          cnt_cw_vol->callback((Fl_Callback*)cb_cnt_cw_vol);
          o->value(progStatus.cw_vol);
        } // Fl_Counter* cnt_cw_vol
        { Fl_Counter* o = cnt_cw_spot = new Fl_Counter(74, 358, 60, 22, _("Spot Vol"));
          cnt_cw_spot->tooltip(_("Spot volume"));
          cnt_cw_spot->type(1);
          cnt_cw_spot->minimum(0);
          cnt_cw_spot->maximum(100);
          cnt_cw_spot->step(1);
          cnt_cw_spot->value(20);
          cnt_cw_spot->callback((Fl_Callback*)cb_cnt_cw_spot);
          o->value(progStatus.cw_spot);
        } // Fl_Counter* cnt_cw_spot
        { Fl_Counter* o = cnt_cw_qsk = new Fl_Counter(142, 358, 60, 22, _("QSK dly"));
          cnt_cw_qsk->tooltip(_("QSK delay (msec)"));
          cnt_cw_qsk->type(1);
          cnt_cw_qsk->minimum(0);
          cnt_cw_qsk->maximum(100);
          cnt_cw_qsk->step(1);
          cnt_cw_qsk->value(20);
          cnt_cw_qsk->callback((Fl_Callback*)cb_cnt_cw_qsk);
          o->value(progStatus.tt550_cw_qsk);
        } // Fl_Counter* cnt_cw_qsk
        { Fl_Counter* o = cnt_cw_weight = new Fl_Counter(210, 358, 60, 22, _("Weight"));
          cnt_cw_weight->type(1);
          cnt_cw_weight->minimum(0.75);
          cnt_cw_weight->maximum(1.5);
          cnt_cw_weight->step(0.05);
          cnt_cw_weight->value(1);
          cnt_cw_weight->callback((Fl_Callback*)cb_cnt_cw_weight);
          o->value(progStatus.cw_weight);
        } // Fl_Counter* cnt_cw_weight
        { Fl_Counter* o = cnt_cw_wpm = new Fl_Counter(278, 358, 60, 22, _("wpm"));
          cnt_cw_wpm->type(1);
          cnt_cw_wpm->minimum(5);
          cnt_cw_wpm->maximum(80);
          cnt_cw_wpm->step(1);
          cnt_cw_wpm->value(24);
          cnt_cw_wpm->callback((Fl_Callback*)cb_cnt_cw_wpm);
          o->value(progStatus.cw_wpm);
        } // Fl_Counter* cnt_cw_wpm
        { Fl_Check_Button* o = btn_enable_keyer = new Fl_Check_Button(346, 361, 70, 15, _("Keyer"));
          btn_enable_keyer->tooltip(_("Enable keyer"));
          btn_enable_keyer->down_box(FL_DOWN_BOX);
          btn_enable_keyer->callback((Fl_Callback*)cb_btn_enable_keyer);
          o->value(progStatus.enable_keyer);
        } // Fl_Check_Button* btn_enable_keyer
        genericCW->end();
      } // Fl_Group* genericCW
      { genericVOX = new Fl_Group(2, 349, 420, 49, _("Vox"));
        genericVOX->hide();
        { Fl_Counter* o = cnt_vox_gain = new Fl_Counter(73, 357, 70, 22, _("gain"));
          cnt_vox_gain->type(1);
          cnt_vox_gain->minimum(0);
          cnt_vox_gain->maximum(100);
          cnt_vox_gain->step(1);
          cnt_vox_gain->callback((Fl_Callback*)cb_cnt_vox_gain);
          o->value(progStatus.vox_gain);
        } // Fl_Counter* cnt_vox_gain
        { Fl_Counter* o = cnt_anti_vox = new Fl_Counter(149, 357, 70, 22, _("anti"));
          cnt_anti_vox->type(1);
          cnt_anti_vox->minimum(0);
          cnt_anti_vox->maximum(100);
          cnt_anti_vox->step(1);
          cnt_anti_vox->callback((Fl_Callback*)cb_cnt_anti_vox);
          o->value(progStatus.vox_anti);
        } // Fl_Counter* cnt_anti_vox
        { Fl_Counter* o = cnt_vox_hang = new Fl_Counter(225, 357, 70, 22, _("hang"));
          cnt_vox_hang->type(1);
          cnt_vox_hang->minimum(0);
          cnt_vox_hang->maximum(100);
          cnt_vox_hang->step(1);
          cnt_vox_hang->callback((Fl_Callback*)cb_cnt_vox_hang);
          o->value(progStatus.vox_hang);
        } // Fl_Counter* cnt_vox_hang
        { Fl_Light_Button* o = btn_vox = new Fl_Light_Button(302, 357, 70, 22, _("VOX"));
          btn_vox->callback((Fl_Callback*)cb_btn_vox);
          o->value(progStatus.vox_onoff);
        } // Fl_Light_Button* btn_vox
        genericVOX->end();
      } // Fl_Group* genericVOX
      { genericSpeech = new Fl_Group(2, 349, 420, 49, _("Spch"));
        genericSpeech->hide();
        { Fl_Light_Button* o = btnCompON = new Fl_Light_Button(215, 359, 70, 22, _("On"));
          btnCompON->callback((Fl_Callback*)cb_btnCompON);
          o->value(progStatus.compON);
        } // Fl_Light_Button* btnCompON
        { Fl_Counter* o = cnt_compression = new Fl_Counter(138, 359, 70, 22, _("Comp"));
          cnt_compression->type(1);
          cnt_compression->minimum(0);
          cnt_compression->maximum(100);
          cnt_compression->step(1);
          cnt_compression->callback((Fl_Callback*)cb_cnt_compression);
          o->value(progStatus.compression);
        } // Fl_Counter* cnt_compression
        genericSpeech->end();
      } // Fl_Group* genericSpeech
      { genericRx = new Fl_Group(2, 349, 420, 49, _("RX"));
        genericRx->hide();
        { Fl_ComboBox* o = cbo_nb_level = new Fl_ComboBox(12, 359, 80, 22, _("NB level"));
          cbo_nb_level->tooltip(_("Select Transceiver"));
          cbo_nb_level->box(FL_DOWN_BOX);
          cbo_nb_level->color((Fl_Color)FL_BACKGROUND_COLOR);
          cbo_nb_level->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          cbo_nb_level->labeltype(FL_NORMAL_LABEL);
          cbo_nb_level->labelfont(0);
          cbo_nb_level->labelsize(14);
          cbo_nb_level->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          cbo_nb_level->callback((Fl_Callback*)cb_cbo_nb_level);
          cbo_nb_level->align(FL_ALIGN_BOTTOM);
          cbo_nb_level->when(FL_WHEN_RELEASE);
          o->index(progStatus.nb_level);
          cbo_nb_level->end();
        } // Fl_ComboBox* cbo_nb_level
        { cbo_agc_level = new Fl_ComboBox(123, 359, 80, 22, _("AGC"));
          cbo_agc_level->tooltip(_("Select Transceiver"));
          cbo_agc_level->box(FL_DOWN_BOX);
          cbo_agc_level->color((Fl_Color)FL_BACKGROUND_COLOR);
          cbo_agc_level->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          cbo_agc_level->labeltype(FL_NORMAL_LABEL);
          cbo_agc_level->labelfont(0);
          cbo_agc_level->labelsize(14);
          cbo_agc_level->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          cbo_agc_level->callback((Fl_Callback*)cb_cbo_agc_level);
          cbo_agc_level->align(FL_ALIGN_BOTTOM);
          cbo_agc_level->when(FL_WHEN_RELEASE);
          cbo_agc_level->end();
        } // Fl_ComboBox* cbo_agc_level
        { Fl_Counter* o = cnt_bpf_center = new Fl_Counter(234, 359, 96, 22, _("BPF Center Freq"));
          cnt_bpf_center->tooltip(_("Bandpass Filter Center Freq"));
          cnt_bpf_center->type(1);
          cnt_bpf_center->minimum(600);
          cnt_bpf_center->maximum(2500);
          cnt_bpf_center->step(10);
          cnt_bpf_center->value(1500);
          cnt_bpf_center->callback((Fl_Callback*)cb_cnt_bpf_center);
          cnt_bpf_center->align(34);
          o->value(progStatus.bpf_center);
        } // Fl_Counter* cnt_bpf_center
        { Fl_Check_Button* o = btn_use_bpf_center = new Fl_Check_Button(361, 362, 50, 15, _("On"));
          btn_use_bpf_center->tooltip(_("Use Filter Center Freq Adj"));
          btn_use_bpf_center->down_box(FL_DOWN_BOX);
          btn_use_bpf_center->value(1);
          btn_use_bpf_center->callback((Fl_Callback*)cb_btn_use_bpf_center);
          o->value(progStatus.use_bpf_center);
        } // Fl_Check_Button* btn_use_bpf_center
        genericRx->end();
      } // Fl_Group* genericRx
      { genericMisc = new Fl_Group(2, 349, 420, 49, _("Misc"));
        genericMisc->hide();
        { Fl_Counter* o = cnt_vfo_adj = new Fl_Counter(24, 357, 96, 22, _("Vfo Adj(ppm)"));
          cnt_vfo_adj->type(1);
          cnt_vfo_adj->callback((Fl_Callback*)cb_cnt_vfo_adj);
          cnt_vfo_adj->align(34);
          o->value(progStatus.vfo_adj);
        } // Fl_Counter* cnt_vfo_adj
        { Fl_Counter* o = cnt_line_out = new Fl_Counter(146, 357, 70, 22, _("line out"));
          cnt_line_out->type(1);
          cnt_line_out->minimum(0);
          cnt_line_out->maximum(100);
          cnt_line_out->step(1);
          cnt_line_out->value(20);
          cnt_line_out->callback((Fl_Callback*)cb_cnt_line_out);
          o->value(progStatus.line_out);
        } // Fl_Counter* cnt_line_out
        { btnSpecial = new Fl_Light_Button(242, 357, 74, 20, _("Special"));
          btnSpecial->callback((Fl_Callback*)cb_btnSpecial);
        } // Fl_Light_Button* btnSpecial
        { btnSpot = new Fl_Light_Button(342, 357, 74, 20, _("Spot"));
          btnSpot->callback((Fl_Callback*)cb_btnSpot);
        } // Fl_Light_Button* btnSpot
        genericMisc->end();
      } // Fl_Group* genericMisc
      tabsGeneric->end();
    } // Fl_Tabs* tabsGeneric
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Box *lblTest=(Fl_Box *)0;

Fl_Button *prefFont=(Fl_Button *)0;

static void cb_prefFont(Fl_Button*, void*) {
  cbPrefFont();
}

Fl_Button *prefForeground=(Fl_Button *)0;

static void cb_prefForeground(Fl_Button*, void*) {
  cbPrefForeground();
}

Fl_Button *btnBacklight=(Fl_Button *)0;

static void cb_btnBacklight(Fl_Button*, void*) {
  cbBacklightColor();
}

Fl_Group *grpMeterColor=(Fl_Group *)0;

Fl_Box *scaleSmeterColor=(Fl_Box *)0;

Fl_SigBar *sldrRcvSignalColor=(Fl_SigBar *)0;

Fl_SigBar *sldrSWRcolor=(Fl_SigBar *)0;

Fl_Box *scaleSWRcolor=(Fl_Box *)0;

Fl_SigBar *sldrPWRcolor=(Fl_SigBar *)0;

Fl_Box *scalePWRcolor=(Fl_Box *)0;

Fl_Button *btMeterColor=(Fl_Button *)0;

static void cb_btMeterColor(Fl_Button*, void*) {
  cbSMeterColor();
}

Fl_Button *btnSWRColor=(Fl_Button *)0;

static void cb_btnSWRColor(Fl_Button*, void*) {
  cbSWRMeterColor();
}

Fl_Button *btnPwrColor=(Fl_Button *)0;

static void cb_btnPwrColor(Fl_Button*, void*) {
  cbPwrMeterColor();
}

Fl_Button *btnPeakColor=(Fl_Button *)0;

static void cb_btnPeakColor(Fl_Button*, void*) {
  cbPeakMeterColor();
}

Fl_Choice *mnuScheme=(Fl_Choice *)0;

static void cb_mnuScheme(Fl_Choice* o, void*) {
  progStatus.ui_scheme = o->text();
Fl::scheme(progStatus.ui_scheme.c_str());
}

Fl_Button *pref_sys_foreground=(Fl_Button *)0;

static void cb_pref_sys_foreground(Fl_Button*, void*) {
  cb_sys_foreground();
}

Fl_Button *pref_sys_background=(Fl_Button *)0;

static void cb_pref_sys_background(Fl_Button*, void*) {
  cb_sys_background();
}

Fl_Button *prefsys_background2=(Fl_Button *)0;

static void cb_prefsys_background2(Fl_Button*, void*) {
  cb_sys_background2();
}

Fl_Button *prefsys_defaults=(Fl_Button *)0;

static void cb_prefsys_defaults(Fl_Button*, void*) {
  cb_sys_defaults();
}

Fl_Wheel_Value_Slider *sldrColors=(Fl_Wheel_Value_Slider *)0;

Fl_Button *pref_slider_background=(Fl_Button *)0;

static void cb_pref_slider_background(Fl_Button*, void*) {
  cb_slider_background();
}

Fl_Button *pref_slider_select=(Fl_Button *)0;

static void cb_pref_slider_select(Fl_Button*, void*) {
  cb_slider_select();
}

Fl_Button *prefslider_defaults=(Fl_Button *)0;

static void cb_prefslider_defaults(Fl_Button*, void*) {
  cb_slider_defaults();
}

Fl_Button *btnReset=(Fl_Button *)0;

static void cb_btnReset(Fl_Button*, void*) {
  cb_reset_display_dialog();
}

Fl_Button *btnCancel=(Fl_Button *)0;

static void cb_btnCancel(Fl_Button*, void*) {
  cbCancelDisplayDialog();
}

Fl_Return_Button *btnOkDisplayDialog=(Fl_Return_Button *)0;

static void cb_btnOkDisplayDialog(Fl_Return_Button*, void*) {
  cbOkDisplayDialog();
}

Fl_Light_Button *btn_lighted=(Fl_Light_Button *)0;

static void cb_btn_lighted(Fl_Light_Button*, void*) {
  cb_lighted_button();
}

Fl_Button *btn_lighted_default=(Fl_Button *)0;

static void cb_btn_lighted_default(Fl_Button*, void*) {
  cb_lighted_default();
}

Fl_Double_Window* DisplayDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(424, 213, _("Flrig Colors"));
    w = o;
    { Fl_Group* o = new Fl_Group(2, 2, 218, 70);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Group* o = new Fl_Group(5, 6, 210, 35);
        o->box(FL_DOWN_BOX);
        { lblTest = new Fl_Box(7, 8, 206, 31, _("14070.000"));
          lblTest->box(FL_FLAT_BOX);
          lblTest->labelfont(4);
          lblTest->labelsize(32);
        } // Fl_Box* lblTest
        o->end();
      } // Fl_Group* o
      { prefFont = new Fl_Button(10, 46, 60, 22, _("Font"));
        prefFont->callback((Fl_Callback*)cb_prefFont);
      } // Fl_Button* prefFont
      { prefForeground = new Fl_Button(78, 46, 60, 22, _("Color"));
        prefForeground->callback((Fl_Callback*)cb_prefForeground);
      } // Fl_Button* prefForeground
      { btnBacklight = new Fl_Button(146, 46, 60, 22, _("Back"));
        btnBacklight->callback((Fl_Callback*)cb_btnBacklight);
      } // Fl_Button* btnBacklight
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(2, 74, 284, 107);
      { Fl_Group* o = new Fl_Group(5, 77, 210, 100);
        o->box(FL_DOWN_BOX);
        { grpMeterColor = new Fl_Group(7, 79, 206, 96);
          grpMeterColor->box(FL_FLAT_BOX);
          { Fl_Box* o = scaleSmeterColor = new Fl_Box(8, 79, 205, 20);
            scaleSmeterColor->box(FL_FLAT_BOX);
            scaleSmeterColor->image(image_S60);
            o->color(scaleSmeter->color());
          } // Fl_Box* scaleSmeterColor
          { sldrRcvSignalColor = new Fl_SigBar(10, 99, 200, 6);
            sldrRcvSignalColor->box(FL_FLAT_BOX);
            sldrRcvSignalColor->color((Fl_Color)FL_BACKGROUND_COLOR);
            sldrRcvSignalColor->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
            sldrRcvSignalColor->labeltype(FL_NORMAL_LABEL);
            sldrRcvSignalColor->labelfont(0);
            sldrRcvSignalColor->labelsize(14);
            sldrRcvSignalColor->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            sldrRcvSignalColor->align(FL_ALIGN_CENTER);
            sldrRcvSignalColor->when(FL_WHEN_RELEASE);
          } // Fl_SigBar* sldrRcvSignalColor
          { Fl_SigBar* o = sldrSWRcolor = new Fl_SigBar(10, 130, 200, 6);
            sldrSWRcolor->box(FL_FLAT_BOX);
            sldrSWRcolor->color((Fl_Color)FL_BACKGROUND_COLOR);
            sldrSWRcolor->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
            sldrSWRcolor->labeltype(FL_NORMAL_LABEL);
            sldrSWRcolor->labelfont(0);
            sldrSWRcolor->labelsize(14);
            sldrSWRcolor->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            sldrSWRcolor->align(FL_ALIGN_CENTER);
            sldrSWRcolor->when(FL_WHEN_RELEASE);
            o->minimum(0);
            o->maximum(100);
          } // Fl_SigBar* sldrSWRcolor
          { scaleSWRcolor = new Fl_Box(8, 110, 205, 20);
            scaleSWRcolor->box(FL_FLAT_BOX);
            scaleSWRcolor->image(image_SWR);
          } // Fl_Box* scaleSWRcolor
          { Fl_SigBar* o = sldrPWRcolor = new Fl_SigBar(8, 147, 200, 6);
            sldrPWRcolor->box(FL_FLAT_BOX);
            sldrPWRcolor->color((Fl_Color)FL_BACKGROUND_COLOR);
            sldrPWRcolor->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
            sldrPWRcolor->labeltype(FL_NORMAL_LABEL);
            sldrPWRcolor->labelfont(0);
            sldrPWRcolor->labelsize(14);
            sldrPWRcolor->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            sldrPWRcolor->align(FL_ALIGN_CENTER);
            sldrPWRcolor->when(FL_WHEN_RELEASE);
            o->minimum(0);
            o->maximum(100);
          } // Fl_SigBar* sldrPWRcolor
          { scalePWRcolor = new Fl_Box(8, 153, 205, 20);
            scalePWRcolor->box(FL_FLAT_BOX);
            scalePWRcolor->image(image_P100);
          } // Fl_Box* scalePWRcolor
          grpMeterColor->end();
        } // Fl_Group* grpMeterColor
        o->end();
      } // Fl_Group* o
      { btMeterColor = new Fl_Button(221, 78, 60, 22, _("Smeter"));
        btMeterColor->callback((Fl_Callback*)cb_btMeterColor);
      } // Fl_Button* btMeterColor
      { btnSWRColor = new Fl_Button(221, 103, 60, 22, _("SWR"));
        btnSWRColor->callback((Fl_Callback*)cb_btnSWRColor);
      } // Fl_Button* btnSWRColor
      { btnPwrColor = new Fl_Button(221, 128, 60, 22, _("Pwr"));
        btnPwrColor->callback((Fl_Callback*)cb_btnPwrColor);
      } // Fl_Button* btnPwrColor
      { btnPeakColor = new Fl_Button(221, 154, 60, 22, _("Peak"));
        btnPeakColor->callback((Fl_Callback*)cb_btnPeakColor);
      } // Fl_Button* btnPeakColor
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(220, 2, 202, 70, _("System"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { mnuScheme = new Fl_Choice(227, 22, 80, 22, _("UI"));
        mnuScheme->tooltip(_("Change application look and feel"));
        mnuScheme->down_box(FL_BORDER_BOX);
        mnuScheme->callback((Fl_Callback*)cb_mnuScheme);
        mnuScheme->align(FL_ALIGN_RIGHT);
        mnuScheme->add("base");
        mnuScheme->add("gtk+");
        mnuScheme->add("plastic");
        mnuScheme->value(mnuScheme->find_item(progStatus.ui_scheme.c_str()));
      } // Fl_Choice* mnuScheme
      { pref_sys_foreground = new Fl_Button(227, 46, 60, 22, _("Fgnd"));
        pref_sys_foreground->tooltip(_("Label color"));
        pref_sys_foreground->callback((Fl_Callback*)cb_pref_sys_foreground);
      } // Fl_Button* pref_sys_foreground
      { pref_sys_background = new Fl_Button(291, 46, 60, 22, _("Bngd"));
        pref_sys_background->tooltip(_("Background - normal"));
        pref_sys_background->callback((Fl_Callback*)cb_pref_sys_background);
      } // Fl_Button* pref_sys_background
      { prefsys_background2 = new Fl_Button(356, 46, 60, 22, _("Bgnd2"));
        prefsys_background2->tooltip(_("Background - selected"));
        prefsys_background2->callback((Fl_Callback*)cb_prefsys_background2);
      } // Fl_Button* prefsys_background2
      { prefsys_defaults = new Fl_Button(356, 21, 60, 22, _("Default"));
        prefsys_defaults->tooltip(_("Background - selected"));
        prefsys_defaults->callback((Fl_Callback*)cb_prefsys_defaults);
      } // Fl_Button* prefsys_defaults
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(287, 122, 134, 88);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Wheel_Value_Slider* o = sldrColors = new Fl_Wheel_Value_Slider(291, 128, 125, 20);
        sldrColors->tooltip(_("Adjust power level"));
        sldrColors->type(5);
        sldrColors->box(FL_THIN_DOWN_BOX);
        sldrColors->color((Fl_Color)FL_BACKGROUND_COLOR);
        sldrColors->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        sldrColors->labeltype(FL_NORMAL_LABEL);
        sldrColors->labelfont(0);
        sldrColors->labelsize(14);
        sldrColors->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrColors->maximum(100);
        sldrColors->step(1);
        sldrColors->value(15);
        sldrColors->textsize(12);
        sldrColors->align(FL_ALIGN_CENTER);
        sldrColors->when(FL_WHEN_CHANGED);
        o->reverse(true);
      } // Fl_Wheel_Value_Slider* sldrColors
      { pref_slider_background = new Fl_Button(291, 154, 60, 22, _("Bngd"));
        pref_slider_background->tooltip(_("Background - normal"));
        pref_slider_background->callback((Fl_Callback*)cb_pref_slider_background);
      } // Fl_Button* pref_slider_background
      { pref_slider_select = new Fl_Button(356, 154, 60, 22, _("Button"));
        pref_slider_select->tooltip(_("Background - normal"));
        pref_slider_select->callback((Fl_Callback*)cb_pref_slider_select);
      } // Fl_Button* pref_slider_select
      { prefslider_defaults = new Fl_Button(324, 183, 60, 22, _("Default"));
        prefslider_defaults->tooltip(_("Background - selected"));
        prefslider_defaults->callback((Fl_Callback*)cb_prefslider_defaults);
      } // Fl_Button* prefslider_defaults
      o->end();
    } // Fl_Group* o
    { btnReset = new Fl_Button(25, 184, 60, 22, _("Reset"));
      btnReset->tooltip(_("Restore all flrig defaults"));
      btnReset->callback((Fl_Callback*)cb_btnReset);
    } // Fl_Button* btnReset
    { btnCancel = new Fl_Button(113, 184, 60, 22, _("Cancel"));
      btnCancel->tooltip(_("Discard current changes"));
      btnCancel->callback((Fl_Callback*)cb_btnCancel);
    } // Fl_Button* btnCancel
    { btnOkDisplayDialog = new Fl_Return_Button(201, 184, 60, 22, _("OK"));
      btnOkDisplayDialog->tooltip(_("Save Current Changes"));
      btnOkDisplayDialog->callback((Fl_Callback*)cb_btnOkDisplayDialog);
    } // Fl_Return_Button* btnOkDisplayDialog
    { Fl_Group* o = new Fl_Group(287, 74, 134, 45);
      o->box(FL_ENGRAVED_FRAME);
      { btn_lighted = new Fl_Light_Button(291, 85, 60, 22, _("Lt Btn"));
        btn_lighted->callback((Fl_Callback*)cb_btn_lighted);
      } // Fl_Light_Button* btn_lighted
      { btn_lighted_default = new Fl_Button(356, 85, 60, 22, _("Default"));
        btn_lighted_default->tooltip(_("Background - selected"));
        btn_lighted_default->callback((Fl_Callback*)cb_btn_lighted_default);
      } // Fl_Button* btn_lighted_default
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Button *btnAddFreq=(Fl_Button *)0;

static void cb_btnAddFreq(Fl_Button*, void*) {
  addFreq();
}

Fl_Button *btnPickFreq=(Fl_Button *)0;

static void cb_btnPickFreq(Fl_Button*, void*) {
  if (FreqSelect->value())
selectFreq();
}

Fl_Button *btnDelFreq=(Fl_Button *)0;

static void cb_btnDelFreq(Fl_Button*, void*) {
  delFreq();
}

Fl_Button *btnClearList=(Fl_Button *)0;

static void cb_btnClearList(Fl_Button*, void*) {
  clearList();
}

static void cb_Close(Fl_Button*, void*) {
  cbCloseMemory();
}

Fl_Browser *FreqSelect=(Fl_Browser *)0;

static void cb_FreqSelect(Fl_Browser* o, void*) {
  select_and_close();
switch (Fl::event_button()) {
case FL_LEFT_MOUSE:
if (Fl::event_clicks()) { // double click
	if (o->value())
		selectFreq();		
	o->parent()->hide();
}
break;
case FL_RIGHT_MOUSE:
	if (o->value()) selectFreq();
	break;
default:
	break;
};
}

Fl_Double_Window* Memory_Dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(320, 138, _("Flrig Memory"));
    w = o;
    { Fl_Group* o = new Fl_Group(2, 2, 60, 133);
      o->box(FL_ENGRAVED_FRAME);
      { btnAddFreq = new Fl_Button(6, 6, 51, 22, _("Add @-1>"));
        btnAddFreq->tooltip(_("Add to list"));
        btnAddFreq->down_box(FL_DOWN_BOX);
        btnAddFreq->labelsize(12);
        btnAddFreq->callback((Fl_Callback*)cb_btnAddFreq);
        btnAddFreq->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Button* btnAddFreq
      { btnPickFreq = new Fl_Button(6, 31, 51, 22, _("Pick @-1<"));
        btnPickFreq->tooltip(_("Use selected data"));
        btnPickFreq->down_box(FL_DOWN_BOX);
        btnPickFreq->labelsize(12);
        btnPickFreq->callback((Fl_Callback*)cb_btnPickFreq);
        btnPickFreq->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Button* btnPickFreq
      { btnDelFreq = new Fl_Button(6, 57, 51, 22, _("Del @-11+"));
        btnDelFreq->tooltip(_("Delete from list"));
        btnDelFreq->down_box(FL_DOWN_BOX);
        btnDelFreq->labelsize(12);
        btnDelFreq->callback((Fl_Callback*)cb_btnDelFreq);
        btnDelFreq->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Button* btnDelFreq
      { btnClearList = new Fl_Button(6, 83, 51, 22, _("Clr @-2square"));
        btnClearList->tooltip(_("Clear list"));
        btnClearList->down_box(FL_DOWN_BOX);
        btnClearList->labelsize(12);
        btnClearList->callback((Fl_Callback*)cb_btnClearList);
        btnClearList->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Button* btnClearList
      { Fl_Button* o = new Fl_Button(6, 109, 51, 22, _("Close"));
        o->tooltip(_("Close Memory dialog"));
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Close);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Browser* o = FreqSelect = new Fl_Browser(66, 2, 250, 133);
      FreqSelect->tooltip(_("Right click => pick freq\nDouble-click ==> pick and close"));
      FreqSelect->type(2);
      FreqSelect->labelfont(4);
      FreqSelect->labelsize(12);
      FreqSelect->textfont(4);
      FreqSelect->textsize(12);
      FreqSelect->callback((Fl_Callback*)cb_FreqSelect);
      o->has_scrollbar(Fl_Browser_::VERTICAL_ALWAYS);
      o->column_widths(freq_sel_widths);
    } // Fl_Browser* FreqSelect
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Tabs *tabsConfig=(Fl_Tabs *)0;

Fl_Group *tabPrimary=(Fl_Group *)0;

Fl_ComboBox *selectRig=(Fl_ComboBox *)0;

static void cb_selectRig(Fl_ComboBox*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
initConfigDialog();
}

Fl_Counter *cntRigCatRetries=(Fl_Counter *)0;

static void cb_cntRigCatRetries(Fl_Counter* o, void*) {
  progStatus.comm_retries = (int)o->value();
}

Fl_Counter *cntRigCatTimeout=(Fl_Counter *)0;

static void cb_cntRigCatTimeout(Fl_Counter* o, void*) {
  progStatus.comm_timeout = (int)o->value();
}

Fl_Counter *cntRigCatWait=(Fl_Counter *)0;

static void cb_cntRigCatWait(Fl_Counter* o, void*) {
  progStatus.comm_wait = (int)o->value();
}

Fl_Counter *query_interval=(Fl_Counter *)0;

static void cb_query_interval(Fl_Counter* o, void*) {
  progStatus.serloop_timing = (int)o->value();
}

Fl_ComboBox *selectCommPort=(Fl_ComboBox *)0;

static void cb_selectCommPort(Fl_ComboBox*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_ComboBox *mnuBaudrate=(Fl_ComboBox *)0;

static void cb_mnuBaudrate(Fl_ComboBox*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnTwoStopBit=(Fl_Check_Button *)0;

static void cb_btnTwoStopBit(Fl_Check_Button* o, void*) {
  if (o->value() == true) {
btnOneStopBit->value(false);
progStatus.stopbits = 2;
} else
o->value(true);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnOneStopBit=(Fl_Check_Button *)0;

static void cb_btnOneStopBit(Fl_Check_Button* o, void*) {
  if (o->value() == true) {
btnTwoStopBit->value(false);
progStatus.stopbits = 1;
} else
o->value(true);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnRigCatEcho=(Fl_Check_Button *)0;

static void cb_btnRigCatEcho(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Input *server_addr=(Fl_Input *)0;

static void cb_server_addr(Fl_Input* o, void*) {
  progStatus.server_addr = o->value();
}

Fl_Input *server_port=(Fl_Input *)0;

static void cb_server_port(Fl_Input* o, void*) {
  progStatus.server_port = o->value();
}

Fl_Round_Button *btncatptt=(Fl_Round_Button *)0;

static void cb_btncatptt(Fl_Round_Button* o, void*) {
  if (o->value()== 1) {
  btnrtsptt->value(0);
  btndtrptt->value(0);
  }
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Round_Button *btnrtsptt=(Fl_Round_Button *)0;

static void cb_btnrtsptt(Fl_Round_Button* o, void*) {
  if (o->value() == 1) {
//  btndtrptt->value(0);
  btncatptt->value(0);
}
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Round_Button *btndtrptt=(Fl_Round_Button *)0;

static void cb_btndtrptt(Fl_Round_Button* o, void*) {
  if (o->value() == 1) {
//  btnrtsptt->value(0);
  btncatptt->value(0);
}
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *chkrtscts=(Fl_Check_Button *)0;

static void cb_chkrtscts(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnrtsplus=(Fl_Check_Button *)0;

static void cb_btnrtsplus(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btndtrplus=(Fl_Check_Button *)0;

static void cb_btndtrplus(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Input *txtCIV=(Fl_Input *)0;

static void cb_txtCIV(Fl_Input* o, void*) {
  progStatus.CIV = atol(o->value());
cbCIV();
}

Fl_Button *btnCIVdefault=(Fl_Button *)0;

static void cb_btnCIVdefault(Fl_Button*, void*) {
  cbCIVdefault();
}

Fl_Check_Button *btnUSBaudio=(Fl_Check_Button *)0;

static void cb_btnUSBaudio(Fl_Check_Button*, void*) {
  cbUSBaudio();
}

Fl_Check_Button *btn_key_fldigi=(Fl_Check_Button *)0;

static void cb_btn_key_fldigi(Fl_Check_Button* o, void*) {
  progStatus.key_fldigi = o->value();
}

Fl_Group *tabPTT=(Fl_Group *)0;

Fl_ComboBox *selectSepPTTPort=(Fl_ComboBox *)0;

static void cb_selectSepPTTPort(Fl_ComboBox*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Round_Button *btnSepRTSptt=(Fl_Round_Button *)0;

static void cb_btnSepRTSptt(Fl_Round_Button* o, void*) {
  if (o->value() == 1)
  btnSepDTRptt->value(0);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnSepRTSplus=(Fl_Check_Button *)0;

static void cb_btnSepRTSplus(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Round_Button *btnSepDTRptt=(Fl_Round_Button *)0;

static void cb_btnSepDTRptt(Fl_Round_Button* o, void*) {
  if (o->value() == 1)
  btnSepRTSptt->value(0);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnSepDTRplus=(Fl_Check_Button *)0;

static void cb_btnSepDTRplus(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Group *tabAux=(Fl_Group *)0;

Fl_ComboBox *selectAuxPort=(Fl_ComboBox *)0;

static void cb_selectAuxPort(Fl_ComboBox*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Group *tabPolling=(Fl_Group *)0;

Fl_Check_Button *btn_poll_smeter=(Fl_Check_Button *)0;

static void cb_btn_poll_smeter(Fl_Check_Button* o, void*) {
  progStatus.poll_smeter = o->value();
}

Fl_Check_Button *btn_poll_pout=(Fl_Check_Button *)0;

static void cb_btn_poll_pout(Fl_Check_Button* o, void*) {
  progStatus.poll_pout = o->value();
}

Fl_Check_Button *btn_poll_swr=(Fl_Check_Button *)0;

static void cb_btn_poll_swr(Fl_Check_Button* o, void*) {
  progStatus.poll_swr = o->value();
}

Fl_Check_Button *btn_poll_alc=(Fl_Check_Button *)0;

static void cb_btn_poll_alc(Fl_Check_Button* o, void*) {
  progStatus.poll_alc = o->value();
}

Fl_Check_Button *btn_poll_frequency=(Fl_Check_Button *)0;

static void cb_btn_poll_frequency(Fl_Check_Button* o, void*) {
  progStatus.poll_frequency = o->value();
}

Fl_Check_Button *btn_poll_mode=(Fl_Check_Button *)0;

static void cb_btn_poll_mode(Fl_Check_Button* o, void*) {
  progStatus.poll_mode = o->value();
}

Fl_Check_Button *btn_poll_bandwidth=(Fl_Check_Button *)0;

static void cb_btn_poll_bandwidth(Fl_Check_Button* o, void*) {
  progStatus.poll_bandwidth = o->value();
}

Fl_Check_Button *btn_poll_volume=(Fl_Check_Button *)0;

static void cb_btn_poll_volume(Fl_Check_Button* o, void*) {
  progStatus.poll_volume = o->value();
}

Fl_Check_Button *btn_poll_micgain=(Fl_Check_Button *)0;

static void cb_btn_poll_micgain(Fl_Check_Button* o, void*) {
  progStatus.poll_micgain = o->value();
}

Fl_Check_Button *btn_poll_rfgain=(Fl_Check_Button *)0;

static void cb_btn_poll_rfgain(Fl_Check_Button* o, void*) {
  progStatus.poll_rfgain = o->value();
}

Fl_Check_Button *btn_poll_power_control=(Fl_Check_Button *)0;

static void cb_btn_poll_power_control(Fl_Check_Button* o, void*) {
  progStatus.poll_power_control = o->value();
}

Fl_Check_Button *btn_poll_ifshift=(Fl_Check_Button *)0;

static void cb_btn_poll_ifshift(Fl_Check_Button* o, void*) {
  progStatus.poll_ifshift = o->value();
}

Fl_Check_Button *btn_poll_notch=(Fl_Check_Button *)0;

static void cb_btn_poll_notch(Fl_Check_Button* o, void*) {
  progStatus.poll_notch = o->value();
}

Fl_Check_Button *btn_poll_auto_notch=(Fl_Check_Button *)0;

static void cb_btn_poll_auto_notch(Fl_Check_Button* o, void*) {
  progStatus.poll_auto_notch = o->value();
}

Fl_Check_Button *btn_poll_pre_att=(Fl_Check_Button *)0;

static void cb_btn_poll_pre_att(Fl_Check_Button* o, void*) {
  progStatus.poll_pre_att = o->value();
}

Fl_Check_Button *btn_poll_squelch=(Fl_Check_Button *)0;

static void cb_btn_poll_squelch(Fl_Check_Button* o, void*) {
  progStatus.poll_squelch = o->value();
}

Fl_Check_Button *btn_poll_split=(Fl_Check_Button *)0;

static void cb_btn_poll_split(Fl_Check_Button* o, void*) {
  progStatus.poll_split = o->value();
}

Fl_Check_Button *btn_poll_noise=(Fl_Check_Button *)0;

static void cb_btn_poll_noise(Fl_Check_Button* o, void*) {
  progStatus.poll_noise = o->value();
}

Fl_Check_Button *btn_poll_nr=(Fl_Check_Button *)0;

static void cb_btn_poll_nr(Fl_Check_Button* o, void*) {
  progStatus.poll_nr = o->value();
}

Fl_Value_Slider *poll_extras_interval=(Fl_Value_Slider *)0;

static void cb_poll_extras_interval(Fl_Value_Slider* o, void*) {
  progStatus.poll_extras_interval = o->value();
}

Fl_Group *tabSndCmd=(Fl_Group *)0;

Fl_Input2 *txt_command=(Fl_Input2 *)0;

Fl_Button *btn_send_command=(Fl_Button *)0;

static void cb_btn_send_command(Fl_Button*, void*) {
  cb_send_command();
}

Fl_Output *txt_response=(Fl_Output *)0;

Fl_Box *box_xcvr_connect=(Fl_Box *)0;

Fl_Box *box_fldigi_connect=(Fl_Box *)0;

Fl_Button *btnCancelCommConfig=(Fl_Button *)0;

static void cb_btnCancelCommConfig(Fl_Button*, void*) {
  cbCancelXcvrDialog();
}

Fl_Return_Button *btnOkXcvrDialog=(Fl_Return_Button *)0;

static void cb_btnOkXcvrDialog(Fl_Return_Button*, void*) {
  cbOkXcvrDialog();
}

Fl_Double_Window* XcvrDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(482, 257, _("I/O Ports"));
    w = o;
    { tabsConfig = new Fl_Tabs(0, 8, 482, 246);
      { tabPrimary = new Fl_Group(2, 30, 475, 222, _("Primary"));
        { Fl_Group* o = new Fl_Group(5, 34, 195, 140);
          o->box(FL_ENGRAVED_FRAME);
          { selectRig = new Fl_ComboBox(41, 38, 155, 22, _("Rig:"));
            selectRig->tooltip(_("Select Transceiver"));
            selectRig->box(FL_DOWN_BOX);
            selectRig->color((Fl_Color)FL_BACKGROUND_COLOR);
            selectRig->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
            selectRig->labeltype(FL_NORMAL_LABEL);
            selectRig->labelfont(0);
            selectRig->labelsize(14);
            selectRig->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            selectRig->callback((Fl_Callback*)cb_selectRig);
            selectRig->align(FL_ALIGN_LEFT);
            selectRig->when(FL_WHEN_RELEASE);
            selectRig->end();
          } // Fl_ComboBox* selectRig
          { Fl_Counter* o = cntRigCatRetries = new Fl_Counter(123, 63, 75, 22, _("Retries"));
            cntRigCatRetries->tooltip(_("Number of  times to resend\ncommand before giving up"));
            cntRigCatRetries->type(1);
            cntRigCatRetries->minimum(1);
            cntRigCatRetries->maximum(10);
            cntRigCatRetries->step(1);
            cntRigCatRetries->value(5);
            cntRigCatRetries->callback((Fl_Callback*)cb_cntRigCatRetries);
            cntRigCatRetries->align(FL_ALIGN_LEFT);
            o->value(progStatus.comm_retries);
          } // Fl_Counter* cntRigCatRetries
          { Fl_Counter* o = cntRigCatTimeout = new Fl_Counter(123, 89, 75, 22, _("Retry intvl (ms)"));
            cntRigCatTimeout->tooltip(_("Time between retries is msec"));
            cntRigCatTimeout->type(1);
            cntRigCatTimeout->minimum(2);
            cntRigCatTimeout->maximum(200);
            cntRigCatTimeout->step(1);
            cntRigCatTimeout->value(10);
            cntRigCatTimeout->callback((Fl_Callback*)cb_cntRigCatTimeout);
            cntRigCatTimeout->align(FL_ALIGN_LEFT);
            o->value(progStatus.comm_timeout);
          } // Fl_Counter* cntRigCatTimeout
          { Fl_Counter* o = cntRigCatWait = new Fl_Counter(123, 115, 75, 22, _("Cmd Intvl (ms)"));
            cntRigCatWait->tooltip(_("Millseconds between sequential commands"));
            cntRigCatWait->type(1);
            cntRigCatWait->minimum(0);
            cntRigCatWait->maximum(100);
            cntRigCatWait->step(1);
            cntRigCatWait->value(5);
            cntRigCatWait->callback((Fl_Callback*)cb_cntRigCatWait);
            cntRigCatWait->align(FL_ALIGN_LEFT);
            o->value(progStatus.comm_wait);
          } // Fl_Counter* cntRigCatWait
          { Fl_Counter* o = query_interval = new Fl_Counter(123, 141, 75, 22, _("qry intvl (ms):"));
            query_interval->tooltip(_("Interval between Xvr queries"));
            query_interval->type(1);
            query_interval->minimum(10);
            query_interval->maximum(5000);
            query_interval->step(10);
            query_interval->value(50);
            query_interval->callback((Fl_Callback*)cb_query_interval);
            query_interval->align(FL_ALIGN_LEFT);
            o->value(progStatus.serloop_timing);
          } // Fl_Counter* query_interval
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(202, 94, 270, 80);
          o->tooltip(_("Two stop bits"));
          o->box(FL_ENGRAVED_FRAME);
          { selectCommPort = new Fl_ComboBox(278, 99, 190, 22, _("Ser. Port"));
            selectCommPort->tooltip(_("Xcvr serial port"));
            selectCommPort->box(FL_DOWN_BOX);
            selectCommPort->color((Fl_Color)FL_BACKGROUND_COLOR);
            selectCommPort->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
            selectCommPort->labeltype(FL_NORMAL_LABEL);
            selectCommPort->labelfont(0);
            selectCommPort->labelsize(14);
            selectCommPort->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            selectCommPort->callback((Fl_Callback*)cb_selectCommPort);
            selectCommPort->align(FL_ALIGN_LEFT);
            selectCommPort->when(FL_WHEN_RELEASE);
            selectCommPort->end();
          } // Fl_ComboBox* selectCommPort
          { mnuBaudrate = new Fl_ComboBox(278, 125, 190, 22, _("Baud:"));
            mnuBaudrate->tooltip(_("Xcvr baudrate"));
            mnuBaudrate->box(FL_DOWN_BOX);
            mnuBaudrate->color((Fl_Color)FL_BACKGROUND_COLOR);
            mnuBaudrate->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
            mnuBaudrate->labeltype(FL_NORMAL_LABEL);
            mnuBaudrate->labelfont(0);
            mnuBaudrate->labelsize(14);
            mnuBaudrate->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            mnuBaudrate->callback((Fl_Callback*)cb_mnuBaudrate);
            mnuBaudrate->align(FL_ALIGN_LEFT);
            mnuBaudrate->when(FL_WHEN_RELEASE);
            mnuBaudrate->end();
          } // Fl_ComboBox* mnuBaudrate
          { Fl_Check_Button* o = btnTwoStopBit = new Fl_Check_Button(250, 152, 22, 15, _("2 -StopBits"));
            btnTwoStopBit->down_box(FL_DOWN_BOX);
            btnTwoStopBit->callback((Fl_Callback*)cb_btnTwoStopBit);
            btnTwoStopBit->align(FL_ALIGN_RIGHT);
            o->value(progStatus.stopbits == 2);
          } // Fl_Check_Button* btnTwoStopBit
          { Fl_Check_Button* o = btnOneStopBit = new Fl_Check_Button(210, 152, 22, 15, _("1"));
            btnOneStopBit->tooltip(_("One Stop Bit"));
            btnOneStopBit->down_box(FL_DOWN_BOX);
            btnOneStopBit->callback((Fl_Callback*)cb_btnOneStopBit);
            btnOneStopBit->align(FL_ALIGN_RIGHT);
            o->value(progStatus.stopbits == 1);
          } // Fl_Check_Button* btnOneStopBit
          { Fl_Check_Button* o = btnRigCatEcho = new Fl_Check_Button(397, 152, 22, 15, _("Echo "));
            btnRigCatEcho->down_box(FL_DOWN_BOX);
            btnRigCatEcho->callback((Fl_Callback*)cb_btnRigCatEcho);
            btnRigCatEcho->align(FL_ALIGN_RIGHT);
            o->value(progStatus.comm_echo);
          } // Fl_Check_Button* btnRigCatEcho
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(202, 34, 270, 64);
          o->box(FL_ENGRAVED_FRAME);
          { Fl_Input* o = server_addr = new Fl_Input(317, 41, 140, 22, _("Fldigi address:"));
            server_addr->tooltip(_("xmlrpc server address (7362)\nchange requires restart\nAre you sure?"));
            server_addr->callback((Fl_Callback*)cb_server_addr);
            o->value(progStatus.server_addr.c_str());
          } // Fl_Input* server_addr
          { Fl_Input* o = server_port = new Fl_Input(317, 67, 100, 22, _("Fldigi port:"));
            server_port->tooltip(_("xmlrpc server address (7362)\nchange requires restart\nAre you sure?"));
            server_port->type(2);
            server_port->callback((Fl_Callback*)cb_server_port);
            o->value(progStatus.server_port.c_str());
          } // Fl_Input* server_port
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(4, 175, 243, 73);
          o->box(FL_ENGRAVED_FRAME);
          { Fl_Round_Button* o = btncatptt = new Fl_Round_Button(15, 180, 149, 22, _("PTT via CAT"));
            btncatptt->tooltip(_("PTT is a CAT command (not hardware)"));
            btncatptt->down_box(FL_ROUND_DOWN_BOX);
            btncatptt->callback((Fl_Callback*)cb_btncatptt);
            o->value(progStatus.comm_catptt);
          } // Fl_Round_Button* btncatptt
          { Fl_Round_Button* o = btnrtsptt = new Fl_Round_Button(15, 203, 149, 22, _("PTT via RTS"));
            btnrtsptt->tooltip(_("RTS is ptt line"));
            btnrtsptt->down_box(FL_ROUND_DOWN_BOX);
            btnrtsptt->callback((Fl_Callback*)cb_btnrtsptt);
            o->value(progStatus.comm_rtsptt);
          } // Fl_Round_Button* btnrtsptt
          { Fl_Round_Button* o = btndtrptt = new Fl_Round_Button(15, 226, 149, 22, _("PTT via DTR"));
            btndtrptt->tooltip(_("DTR is ptt line"));
            btndtrptt->down_box(FL_ROUND_DOWN_BOX);
            btndtrptt->callback((Fl_Callback*)cb_btndtrptt);
            o->value(progStatus.comm_dtrptt);
          } // Fl_Round_Button* btndtrptt
          { Fl_Check_Button* o = chkrtscts = new Fl_Check_Button(129, 178, 98, 21, _("RTS/CTS"));
            chkrtscts->tooltip(_("Xcvr uses RTS/CTS handshake"));
            chkrtscts->down_box(FL_DOWN_BOX);
            chkrtscts->callback((Fl_Callback*)cb_chkrtscts);
            o->value(progStatus.comm_rtscts);
          } // Fl_Check_Button* chkrtscts
          { Fl_Check_Button* o = btnrtsplus = new Fl_Check_Button(129, 201, 102, 21, _("RTS +12 v"));
            btnrtsplus->tooltip(_("Initial state of RTS"));
            btnrtsplus->down_box(FL_DOWN_BOX);
            btnrtsplus->callback((Fl_Callback*)cb_btnrtsplus);
            o->value(progStatus.comm_rtsplus);
          } // Fl_Check_Button* btnrtsplus
          { Fl_Check_Button* o = btndtrplus = new Fl_Check_Button(129, 224, 100, 21, _("DTR +12 v"));
            btndtrplus->tooltip(_("Initial state of DTR"));
            btndtrplus->down_box(FL_DOWN_BOX);
            btndtrplus->callback((Fl_Callback*)cb_btndtrplus);
            o->value(progStatus.comm_dtrplus);
          } // Fl_Check_Button* btndtrplus
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(247, 175, 225, 36);
          o->box(FL_ENGRAVED_FRAME);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          { txtCIV = new Fl_Input(261, 183, 58, 22, _("CI-V adr"));
            txtCIV->tooltip(_("Enter hex value, ie: 0x5F"));
            txtCIV->type(2);
            txtCIV->callback((Fl_Callback*)cb_txtCIV);
            txtCIV->align(FL_ALIGN_RIGHT);
          } // Fl_Input* txtCIV
          { btnCIVdefault = new Fl_Button(387, 183, 69, 22, _("Default"));
            btnCIVdefault->callback((Fl_Callback*)cb_btnCIVdefault);
          } // Fl_Button* btnCIVdefault
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(247, 212, 225, 36);
          o->box(FL_ENGRAVED_FRAME);
          { btnUSBaudio = new Fl_Check_Button(261, 222, 104, 15, _("USB audio"));
            btnUSBaudio->down_box(FL_DOWN_BOX);
            btnUSBaudio->callback((Fl_Callback*)cb_btnUSBaudio);
          } // Fl_Check_Button* btnUSBaudio
          { Fl_Check_Button* o = btn_key_fldigi = new Fl_Check_Button(375, 222, 85, 15, _("key fldigi"));
            btn_key_fldigi->tooltip(_("PTT keys fldigi modem"));
            btn_key_fldigi->down_box(FL_DOWN_BOX);
            btn_key_fldigi->callback((Fl_Callback*)cb_btn_key_fldigi);
            o->value(progStatus.key_fldigi);
          } // Fl_Check_Button* btn_key_fldigi
          o->end();
        } // Fl_Group* o
        tabPrimary->end();
      } // Fl_Group* tabPrimary
      { tabPTT = new Fl_Group(2, 30, 475, 222, _("Sep\' PTT"));
        tabPTT->hide();
        { new Fl_Box(53, 73, 399, 37, _("Use only if your setup requires a separate\nSerial Port for a PTT control lin\
e"));
        } // Fl_Box* o
        { selectSepPTTPort = new Fl_ComboBox(128, 121, 192, 22, _("PTT Port"));
          selectSepPTTPort->tooltip(_("Aux control port"));
          selectSepPTTPort->box(FL_DOWN_BOX);
          selectSepPTTPort->color((Fl_Color)FL_BACKGROUND_COLOR);
          selectSepPTTPort->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          selectSepPTTPort->labeltype(FL_NORMAL_LABEL);
          selectSepPTTPort->labelfont(0);
          selectSepPTTPort->labelsize(14);
          selectSepPTTPort->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          selectSepPTTPort->callback((Fl_Callback*)cb_selectSepPTTPort);
          selectSepPTTPort->align(FL_ALIGN_LEFT);
          selectSepPTTPort->when(FL_WHEN_RELEASE);
          selectSepPTTPort->end();
        } // Fl_ComboBox* selectSepPTTPort
        { Fl_Round_Button* o = btnSepRTSptt = new Fl_Round_Button(111, 159, 129, 23, _("PTT via RTS"));
          btnSepRTSptt->tooltip(_("RTS is ptt line"));
          btnSepRTSptt->down_box(FL_ROUND_DOWN_BOX);
          btnSepRTSptt->callback((Fl_Callback*)cb_btnSepRTSptt);
          o->value(progStatus.sep_rtsptt);
        } // Fl_Round_Button* btnSepRTSptt
        { Fl_Check_Button* o = btnSepRTSplus = new Fl_Check_Button(274, 159, 128, 23, _("RTS +12 v"));
          btnSepRTSplus->tooltip(_("Initial state of RTS"));
          btnSepRTSplus->down_box(FL_DOWN_BOX);
          btnSepRTSplus->callback((Fl_Callback*)cb_btnSepRTSplus);
          o->value(progStatus.sep_rtsplus);
        } // Fl_Check_Button* btnSepRTSplus
        { Fl_Round_Button* o = btnSepDTRptt = new Fl_Round_Button(111, 186, 129, 22, _("PTT via DTR"));
          btnSepDTRptt->tooltip(_("DTR is ptt line"));
          btnSepDTRptt->down_box(FL_ROUND_DOWN_BOX);
          btnSepDTRptt->callback((Fl_Callback*)cb_btnSepDTRptt);
          o->value(progStatus.sep_dtrptt);
        } // Fl_Round_Button* btnSepDTRptt
        { Fl_Check_Button* o = btnSepDTRplus = new Fl_Check_Button(274, 186, 128, 22, _("DTR +12 v"));
          btnSepDTRplus->tooltip(_("Initial state of DTR"));
          btnSepDTRplus->down_box(FL_DOWN_BOX);
          btnSepDTRplus->callback((Fl_Callback*)cb_btnSepDTRplus);
          o->value(progStatus.sep_dtrplus);
        } // Fl_Check_Button* btnSepDTRplus
        tabPTT->end();
      } // Fl_Group* tabPTT
      { tabAux = new Fl_Group(2, 30, 475, 222, _("Aux"));
        tabAux->hide();
        { selectAuxPort = new Fl_ComboBox(131, 132, 192, 22, _("Aux Port"));
          selectAuxPort->tooltip(_("Aux control port"));
          selectAuxPort->box(FL_DOWN_BOX);
          selectAuxPort->color((Fl_Color)FL_BACKGROUND_COLOR);
          selectAuxPort->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          selectAuxPort->labeltype(FL_NORMAL_LABEL);
          selectAuxPort->labelfont(0);
          selectAuxPort->labelsize(14);
          selectAuxPort->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          selectAuxPort->callback((Fl_Callback*)cb_selectAuxPort);
          selectAuxPort->align(FL_ALIGN_LEFT);
          selectAuxPort->when(FL_WHEN_RELEASE);
          selectAuxPort->end();
        } // Fl_ComboBox* selectAuxPort
        { new Fl_Box(56, 84, 399, 38, _("Use only if your setup requires a separate\nSerial Port for a special Control\
 Signals"));
        } // Fl_Box* o
        tabAux->end();
      } // Fl_Group* tabAux
      { tabPolling = new Fl_Group(2, 30, 476, 222, _("Polling"));
        tabPolling->hide();
        { Fl_Group* o = new Fl_Group(4, 34, 474, 54, _("Meters - polled every time"));
          o->box(FL_ENGRAVED_BOX);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          { Fl_Check_Button* o = btn_poll_smeter = new Fl_Check_Button(13, 58, 104, 15, _("S meter"));
            btn_poll_smeter->down_box(FL_DOWN_BOX);
            btn_poll_smeter->value(1);
            btn_poll_smeter->callback((Fl_Callback*)cb_btn_poll_smeter);
            o->value(progStatus.poll_smeter);
          } // Fl_Check_Button* btn_poll_smeter
          { Fl_Check_Button* o = btn_poll_pout = new Fl_Check_Button(132, 58, 104, 15, _("Power out"));
            btn_poll_pout->down_box(FL_DOWN_BOX);
            btn_poll_pout->value(1);
            btn_poll_pout->callback((Fl_Callback*)cb_btn_poll_pout);
            o->value(progStatus.poll_pout);
          } // Fl_Check_Button* btn_poll_pout
          { Fl_Check_Button* o = btn_poll_swr = new Fl_Check_Button(252, 58, 104, 15, _("SWR"));
            btn_poll_swr->down_box(FL_DOWN_BOX);
            btn_poll_swr->value(1);
            btn_poll_swr->callback((Fl_Callback*)cb_btn_poll_swr);
            o->value(progStatus.poll_swr);
          } // Fl_Check_Button* btn_poll_swr
          { Fl_Check_Button* o = btn_poll_alc = new Fl_Check_Button(372, 58, 104, 15, _("ALC"));
            btn_poll_alc->down_box(FL_DOWN_BOX);
            btn_poll_alc->value(1);
            btn_poll_alc->callback((Fl_Callback*)cb_btn_poll_alc);
            o->value(progStatus.poll_alc);
          } // Fl_Check_Button* btn_poll_alc
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(4, 88, 474, 44, _("Op\' Controls - polled every time"));
          o->box(FL_ENGRAVED_BOX);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          { Fl_Check_Button* o = btn_poll_frequency = new Fl_Check_Button(13, 111, 101, 15, _("Frequency"));
            btn_poll_frequency->tooltip(_("Frequency control"));
            btn_poll_frequency->down_box(FL_DOWN_BOX);
            btn_poll_frequency->value(1);
            btn_poll_frequency->callback((Fl_Callback*)cb_btn_poll_frequency);
            o->value(progStatus.poll_frequency);
          } // Fl_Check_Button* btn_poll_frequency
          { Fl_Check_Button* o = btn_poll_mode = new Fl_Check_Button(132, 111, 101, 15, _("Mode"));
            btn_poll_mode->tooltip(_("Mode selector"));
            btn_poll_mode->down_box(FL_DOWN_BOX);
            btn_poll_mode->value(1);
            btn_poll_mode->callback((Fl_Callback*)cb_btn_poll_mode);
            o->value(progStatus.poll_mode);
          } // Fl_Check_Button* btn_poll_mode
          { Fl_Check_Button* o = btn_poll_bandwidth = new Fl_Check_Button(252, 111, 101, 15, _("Bandwidth"));
            btn_poll_bandwidth->tooltip(_("Bandwidth selector"));
            btn_poll_bandwidth->down_box(FL_DOWN_BOX);
            btn_poll_bandwidth->value(1);
            btn_poll_bandwidth->callback((Fl_Callback*)cb_btn_poll_bandwidth);
            o->value(progStatus.poll_bandwidth);
          } // Fl_Check_Button* btn_poll_bandwidth
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(4, 132, 474, 119, _("Additional Controls"));
          o->box(FL_ENGRAVED_FRAME);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          { Fl_Check_Button* o = btn_poll_volume = new Fl_Check_Button(13, 153, 101, 15, _("Volume"));
            btn_poll_volume->tooltip(_("Audio volume control"));
            btn_poll_volume->down_box(FL_DOWN_BOX);
            btn_poll_volume->callback((Fl_Callback*)cb_btn_poll_volume);
            o->value(progStatus.poll_volume);
          } // Fl_Check_Button* btn_poll_volume
          { Fl_Check_Button* o = btn_poll_micgain = new Fl_Check_Button(132, 153, 101, 15, _("Mic gain"));
            btn_poll_micgain->tooltip(_("Mic gain control"));
            btn_poll_micgain->down_box(FL_DOWN_BOX);
            btn_poll_micgain->callback((Fl_Callback*)cb_btn_poll_micgain);
            o->value(progStatus.poll_micgain);
          } // Fl_Check_Button* btn_poll_micgain
          { Fl_Check_Button* o = btn_poll_rfgain = new Fl_Check_Button(252, 153, 101, 15, _("RF gain"));
            btn_poll_rfgain->tooltip(_("RF gain control"));
            btn_poll_rfgain->down_box(FL_DOWN_BOX);
            btn_poll_rfgain->callback((Fl_Callback*)cb_btn_poll_rfgain);
            o->value(progStatus.poll_rfgain);
          } // Fl_Check_Button* btn_poll_rfgain
          { Fl_Check_Button* o = btn_poll_power_control = new Fl_Check_Button(372, 153, 101, 15, _("Pwr control"));
            btn_poll_power_control->tooltip(_("Power level control"));
            btn_poll_power_control->down_box(FL_DOWN_BOX);
            btn_poll_power_control->callback((Fl_Callback*)cb_btn_poll_power_control);
            o->value(progStatus.poll_power_control);
          } // Fl_Check_Button* btn_poll_power_control
          { Fl_Check_Button* o = btn_poll_ifshift = new Fl_Check_Button(13, 177, 101, 15, _("IF shift"));
            btn_poll_ifshift->tooltip(_("IF shift control"));
            btn_poll_ifshift->down_box(FL_DOWN_BOX);
            btn_poll_ifshift->callback((Fl_Callback*)cb_btn_poll_ifshift);
            o->value(progStatus.poll_ifshift);
          } // Fl_Check_Button* btn_poll_ifshift
          { Fl_Check_Button* o = btn_poll_notch = new Fl_Check_Button(132, 177, 101, 15, _("Man\' Notch"));
            btn_poll_notch->tooltip(_("Manual notch control"));
            btn_poll_notch->down_box(FL_DOWN_BOX);
            btn_poll_notch->callback((Fl_Callback*)cb_btn_poll_notch);
            o->value(progStatus.poll_notch);
          } // Fl_Check_Button* btn_poll_notch
          { Fl_Check_Button* o = btn_poll_auto_notch = new Fl_Check_Button(252, 177, 101, 15, _("Auto Notch"));
            btn_poll_auto_notch->tooltip(_("Auto notch ON/OFF"));
            btn_poll_auto_notch->down_box(FL_DOWN_BOX);
            btn_poll_auto_notch->callback((Fl_Callback*)cb_btn_poll_auto_notch);
            o->value(progStatus.poll_auto_notch);
          } // Fl_Check_Button* btn_poll_auto_notch
          { Fl_Check_Button* o = btn_poll_pre_att = new Fl_Check_Button(13, 201, 101, 15, _("Pre/Att"));
            btn_poll_pre_att->tooltip(_("Preamp / Attenuator"));
            btn_poll_pre_att->down_box(FL_DOWN_BOX);
            btn_poll_pre_att->callback((Fl_Callback*)cb_btn_poll_pre_att);
            o->value(progStatus.poll_pre_att);
          } // Fl_Check_Button* btn_poll_pre_att
          { Fl_Check_Button* o = btn_poll_squelch = new Fl_Check_Button(132, 201, 101, 15, _("Squelch"));
            btn_poll_squelch->tooltip(_("Squelch level control"));
            btn_poll_squelch->down_box(FL_DOWN_BOX);
            btn_poll_squelch->callback((Fl_Callback*)cb_btn_poll_squelch);
            o->value(progStatus.poll_squelch);
          } // Fl_Check_Button* btn_poll_squelch
          { Fl_Check_Button* o = btn_poll_split = new Fl_Check_Button(252, 201, 101, 15, _("Split VFO"));
            btn_poll_split->tooltip(_("Vfo A/B split ops"));
            btn_poll_split->down_box(FL_DOWN_BOX);
            btn_poll_split->callback((Fl_Callback*)cb_btn_poll_split);
            o->value(progStatus.poll_split);
          } // Fl_Check_Button* btn_poll_split
          { Fl_Check_Button* o = btn_poll_noise = new Fl_Check_Button(13, 226, 101, 15, _("Noise Blnk\'"));
            btn_poll_noise->tooltip(_("Noise blanker"));
            btn_poll_noise->down_box(FL_DOWN_BOX);
            btn_poll_noise->callback((Fl_Callback*)cb_btn_poll_noise);
            o->value(progStatus.poll_noise);
          } // Fl_Check_Button* btn_poll_noise
          { Fl_Check_Button* o = btn_poll_nr = new Fl_Check_Button(132, 226, 101, 15, _("Noise Red\'"));
            btn_poll_nr->tooltip(_("Noise reduction"));
            btn_poll_nr->down_box(FL_DOWN_BOX);
            btn_poll_nr->callback((Fl_Callback*)cb_btn_poll_nr);
            o->value(progStatus.poll_nr);
          } // Fl_Check_Button* btn_poll_nr
          { Fl_Value_Slider* o = poll_extras_interval = new Fl_Value_Slider(332, 223, 140, 21, _("poll every:"));
            poll_extras_interval->tooltip(_("Poll these controls once every N meter polls"));
            poll_extras_interval->type(1);
            poll_extras_interval->color((Fl_Color)20);
            poll_extras_interval->minimum(1);
            poll_extras_interval->maximum(10);
            poll_extras_interval->step(1);
            poll_extras_interval->value(4);
            poll_extras_interval->textsize(14);
            poll_extras_interval->callback((Fl_Callback*)cb_poll_extras_interval);
            poll_extras_interval->align(FL_ALIGN_LEFT);
            o->value(progStatus.poll_extras_interval);
          } // Fl_Value_Slider* poll_extras_interval
          o->end();
        } // Fl_Group* o
        tabPolling->end();
      } // Fl_Group* tabPolling
      { tabSndCmd = new Fl_Group(2, 30, 475, 222, _("Send Cmd"));
        tabSndCmd->hide();
        { txt_command = new Fl_Input2(29, 53, 434, 23, _("Enter text as ASCII string\nOr sequence of hex values, x80 etc separated by s\
paces"));
          txt_command->box(FL_DOWN_BOX);
          txt_command->color((Fl_Color)FL_BACKGROUND2_COLOR);
          txt_command->selection_color((Fl_Color)FL_SELECTION_COLOR);
          txt_command->labeltype(FL_NORMAL_LABEL);
          txt_command->labelfont(0);
          txt_command->labelsize(14);
          txt_command->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          txt_command->align(FL_ALIGN_BOTTOM_LEFT);
          txt_command->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txt_command
        { btn_send_command = new Fl_Button(392, 156, 71, 19, _("SEND"));
          btn_send_command->callback((Fl_Callback*)cb_btn_send_command);
        } // Fl_Button* btn_send_command
        { txt_response = new Fl_Output(29, 115, 434, 23, _("Response to the SEND button"));
          txt_response->align(FL_ALIGN_BOTTOM_LEFT);
        } // Fl_Output* txt_response
        { box_xcvr_connect = new Fl_Box(29, 180, 18, 18, _("Connected to transceiver"));
          box_xcvr_connect->tooltip(_("Lit when connected"));
          box_xcvr_connect->box(FL_DIAMOND_DOWN_BOX);
          box_xcvr_connect->color((Fl_Color)FL_LIGHT1);
          box_xcvr_connect->align(FL_ALIGN_RIGHT);
        } // Fl_Box* box_xcvr_connect
        { box_fldigi_connect = new Fl_Box(29, 204, 18, 18, _("Connected to fldigi"));
          box_fldigi_connect->tooltip(_("Lit when connected"));
          box_fldigi_connect->box(FL_DIAMOND_DOWN_BOX);
          box_fldigi_connect->color((Fl_Color)FL_LIGHT1);
          box_fldigi_connect->align(FL_ALIGN_RIGHT);
        } // Fl_Box* box_fldigi_connect
        tabSndCmd->end();
      } // Fl_Group* tabSndCmd
      tabsConfig->end();
    } // Fl_Tabs* tabsConfig
    { btnCancelCommConfig = new Fl_Button(346, 2, 60, 25, _("Close"));
      btnCancelCommConfig->callback((Fl_Callback*)cb_btnCancelCommConfig);
    } // Fl_Button* btnCancelCommConfig
    { btnOkXcvrDialog = new Fl_Return_Button(416, 2, 60, 25, _("Init"));
      btnOkXcvrDialog->callback((Fl_Callback*)cb_btnOkXcvrDialog);
    } // Fl_Return_Button* btnOkXcvrDialog
    o->end();
  } // Fl_Double_Window* o
  return w;
}
