// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "gettext.h"
#include "rigpanel.h"
#include "images.h"
#include "rig.h"
#include "status.h"
#include "support.h"

static void cb_mnuExit(Fl_Menu_*, void*) {
  cbExit();
}

static void cb_mnuControls(Fl_Menu_*, void*) {
  show_controls();
}

static void cb_mnuRestoreData(Fl_Menu_*, void*) {
  progStatus.restore_rig_data = !progStatus.restore_rig_data;
}

static void cb_mnuKeepData(Fl_Menu_*, void*) {
  progStatus.use_rig_data= !progStatus.use_rig_data;
}

static void cb_mnuColorConfig(Fl_Menu_*, void*) {
  setDisplayColors();
}

static void cb_mnuTooltips(Fl_Menu_*, void*) {
  progStatus.tooltips=mnuTooltips->value();
Fl_Tooltip::enable(progStatus.tooltips);
}

static void cb_mnuConfigXcvr(Fl_Menu_*, void*) {
  configXcvr();
}

static void cb_mnuStore(Fl_Menu_*, void*) {
  addFreq();
}

static void cb_mnuStored(Fl_Menu_*, void*) {
  openMemoryDialog();
}

static void cb_mnuAbout(Fl_Menu_*, void*) {
  about();
}

static void cb_mnuEventLog(Fl_Menu_*, void*) {
  cbEventLog();
}

static void cb_mnuOnLineHelp(Fl_Menu_*, void*) {
  visit_URL((void *)("http://www.w1hkj.com/flrig-help/index.html"));
}

Fl_Menu_Item menu_[] = {
 {_("&Files"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("E&xit"), 0,  (Fl_Callback*)cb_mnuExit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Config"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Xcvr setup"), 0,  (Fl_Callback*)cb_mnuControls, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Restore Freq/Mode"), 0,  (Fl_Callback*)cb_mnuRestoreData, 0, 6, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Keep Freq/Mode"), 0,  (Fl_Callback*)cb_mnuKeepData, 0, 134, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Colors"), 0,  (Fl_Callback*)cb_mnuColorConfig, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Tooltips"), 0,  (Fl_Callback*)cb_mnuTooltips, 0, 130, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Xcvr select"), 0,  (Fl_Callback*)cb_mnuConfigXcvr, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Save@-2>"), 0,  (Fl_Callback*)cb_mnuStore, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("S&aved"), 0,  (Fl_Callback*)cb_mnuStored, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_(" "), 0,  0, 0, 193, FL_NO_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Help"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {_("&About"), 0,  (Fl_Callback*)cb_mnuAbout, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {_("Event log"), 0,  (Fl_Callback*)cb_mnuEventLog, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {_("On Line Help"), 0,  (Fl_Callback*)cb_mnuOnLineHelp, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Output *txt_encA=(Fl_Output *)0;

cFreqControl *FreqDispA=(cFreqControl *)0;

cFreqControl *FreqDispB=(cFreqControl *)0;

Fl_Light_Button *btnVol=(Fl_Light_Button *)0;

static void cb_btnVol(Fl_Light_Button*, void*) {
  cbMute();
}

Fl_Wheel_Value_Slider *sldrVOLUME=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrVOLUME(Fl_Wheel_Value_Slider*, void*) {
  setVolume();
}

Fl_Wheel_Value_Slider *sldrRFGAIN=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrRFGAIN(Fl_Wheel_Value_Slider*, void*) {
  setRFGAIN();
}

Fl_Wheel_Value_Slider *sldrSQUELCH=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrSQUELCH(Fl_Wheel_Value_Slider*, void*) {
  setSQUELCH();
}

Fl_Light_Button *btnNR=(Fl_Light_Button *)0;

static void cb_btnNR(Fl_Light_Button*, void*) {
  cbNR();
}

Fl_Wheel_Value_Slider *sldrNR=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrNR(Fl_Wheel_Value_Slider*, void*) {
  setNR();
}

Fl_Light_Button *btnIFsh=(Fl_Light_Button *)0;

static void cb_btnIFsh(Fl_Light_Button*, void*) {
  cbIFsh();
}

Fl_Wheel_Value_Slider *sldrIFSHIFT=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrIFSHIFT(Fl_Wheel_Value_Slider*, void*) {
  setIFshift();
}

Fl_Light_Button *btnNotch=(Fl_Light_Button *)0;

static void cb_btnNotch(Fl_Light_Button*, void*) {
  cbbtnNotch();
}

Fl_Wheel_Value_Slider *sldrNOTCH=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrNOTCH(Fl_Wheel_Value_Slider*, void*) {
  setNotch();
}

Fl_Wheel_Value_Slider *sldrMICGAIN=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrMICGAIN(Fl_Wheel_Value_Slider*, void*) {
  setMicGain();
}

Fl_Wheel_Value_Slider *sldrPOWER=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrPOWER(Fl_Wheel_Value_Slider*, void*) {
  setPower();
}

Fl_Box *txtInactive=(Fl_Box *)0;

Fl_Light_Button *btnA=(Fl_Light_Button *)0;

static void cb_btnA(Fl_Light_Button*, void*) {
  if (btnA->value()==1)
	cb_selectA();
btnA->value(1);
btnB->value(0);
}

Fl_Light_Button *btnB=(Fl_Light_Button *)0;

static void cb_btnB(Fl_Light_Button*, void*) {
  if (btnB->value()==1)
	cb_selectB();
btnB->value(1);
btnA->value(0);
}

Fl_Button *btnA2B=(Fl_Button *)0;

static void cb_btnA2B(Fl_Button*, void*) {
  cbA2B();
}

Fl_Light_Button *btnSplit=(Fl_Light_Button *)0;

static void cb_btnSplit(Fl_Light_Button* o, void*) {
  cb_set_split(o->value());
}

Fl_ComboBox *opMODE=(Fl_ComboBox *)0;

static void cb_opMODE(Fl_ComboBox*, void*) {
  setMode();
}

Fl_ComboBox *opBW=(Fl_ComboBox *)0;

static void cb_opBW(Fl_ComboBox*, void*) {
  setBW();
}

Fl_Light_Button *btnAttenuator=(Fl_Light_Button *)0;

static void cb_btnAttenuator(Fl_Light_Button*, void*) {
  cbAttenuator();
}

Fl_Light_Button *btnPreamp=(Fl_Light_Button *)0;

static void cb_btnPreamp(Fl_Light_Button*, void*) {
  cbPreamp();
}

Fl_Light_Button *btnNOISE=(Fl_Light_Button *)0;

static void cb_btnNOISE(Fl_Light_Button*, void*) {
  cbNoise();
}

Fl_Light_Button *btnAutoNotch=(Fl_Light_Button *)0;

static void cb_btnAutoNotch(Fl_Light_Button*, void*) {
  cbAN();
}

Fl_Button *btnTune=(Fl_Button *)0;

static void cb_btnTune(Fl_Button*, void*) {
  cbTune();
}

Fl_Light_Button *btnPTT=(Fl_Light_Button *)0;

static void cb_btnPTT(Fl_Light_Button*, void*) {
  cbPTT();
}

Fl_Group *grpMeters=(Fl_Group *)0;

Fl_Box *scaleSmeter=(Fl_Box *)0;

#include <FL/Fl_Bitmap.H>
static unsigned char idata_S60[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,28,0,0,14,7,0,
128,195,1,0,224,112,0,0,64,28,0,128,227,0,0,0,0,0,0,68,34,0,0,145,8,0,64,36,2,0,
16,137,0,0,96,34,0,64,20,1,0,0,0,0,0,4,32,0,0,129,0,0,64,32,2,0,0,137,0,0,96,
34,0,64,16,1,0,0,0,0,0,4,32,0,0,129,0,0,64,32,2,0,2,137,0,128,80,34,128,64,16,
1,0,0,0,0,0,56,24,0,0,142,7,0,128,195,3,0,130,136,0,128,80,34,128,192,19,1,0,
0,0,0,0,64,32,0,0,144,8,0,0,4,2,128,79,136,0,224,75,34,224,71,20,1,0,0,0,0,0,
64,32,0,0,144,8,0,0,4,2,0,34,136,0,128,248,34,128,64,20,1,0,0,0,0,0,68,34,0,0,
145,8,0,64,36,2,0,18,136,0,128,64,34,128,64,20,1,0,0,0,0,0,56,28,0,0,14,7,0,128,
195,1,0,240,113,0,0,64,28,0,128,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,4,0,0,0,1,0,0,64,0,0,0,16,0,0,0,4,0,0,0,1,0,0,16,0,0,0,4,0,0,0,
1,0,0,64,0,0,0,16,0,0,0,4,0,0,0,1,0,0,16,0,0,0,4,0,0,0,1,0,0,64,0,0,0,16,0,0,
0,4,0,0,0,1,0,0,16,0,0,0,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,
16,0,0,0,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,16,0,0,0,4,16,64,
0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,16,0,0,0,252,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0};
static Fl_Bitmap image_S60(idata_S60, 205, 18);

Fl_Button *btnALC_SWR=(Fl_Button *)0;

static void cb_btnALC_SWR(Fl_Button*, void*) {
  cbALC_SWR();
}

static unsigned char idata_SWR[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,240,1,0,14,0,0,
0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,192,16,0,0,17,0,0,0,0,0,17,0,0,0,0,0,
0,0,0,0,0,0,0,0,136,0,128,16,0,0,16,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,8,
0,128,240,0,0,16,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,112,162,130,0,1,0,8,0,
0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,128,162,133,0,1,0,4,0,0,0,0,0,16,0,0,0,0,
0,0,0,0,0,0,0,0,0,128,170,128,0,1,0,2,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,
136,170,128,16,1,0,1,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,112,148,128,228,0,0,
31,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,192,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,32,132,0,4,0,0,4,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,32,132,0,
4,0,0,4,0,0,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,192,123,0,4,0,0,4,0,0,4,0,0,0,0,
0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,36,73,146,36,73,146,4,65,16,4,65,16,4,0,0,0,0,0,
0,0,0,0,0,0,0,0,36,73,146,36,73,146,4,65,16,4,65,16,68,68,68,68,68,68,68,68,
68,68,68,68,68,4,36,73,146,36,73,146,4,65,16,4,65,16,68,68,68,68,68,68,68,68,
68,68,68,68,68,4,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,7};
static Fl_Bitmap image_SWR(idata_SWR, 205, 18);

Fl_SigBar *sldrRcvSignal=(Fl_SigBar *)0;

Fl_SigBar *sldrALC_SWR=(Fl_SigBar *)0;

Fl_SigBar *sldrFwdPwr=(Fl_SigBar *)0;

Fl_Box *scalePower=(Fl_Box *)0;

static unsigned char idata_P100[] =
{252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,7,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,5,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,85,5,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,
16,64,0,1,4,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,16,64,0,1,4,4,0,
64,0,0,4,0,64,0,0,4,0,64,0,0,4,0,64,0,0,4,0,64,0,0,4,4,0,64,0,0,4,0,64,0,0,4,0,
64,0,0,4,0,64,0,0,4,0,64,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,192,113,0,0,0,0,113,0,0,0,192,113,0,0,0,192,113,0,0,0,0,0,240,0,0,
0,32,138,0,0,0,128,137,0,0,0,32,138,0,0,0,32,138,0,0,0,0,0,16,1,0,0,0,138,0,0,
0,128,137,0,0,0,32,136,0,0,0,32,138,0,0,0,0,0,16,1,0,0,0,138,0,0,0,64,137,0,0,
0,32,136,0,0,0,32,138,0,0,0,0,0,16,1,0,0,0,137,0,0,0,64,137,0,0,0,224,139,0,0,
0,192,137,0,0,0,0,0,240,12,0,0,128,136,0,0,0,32,137,0,0,0,32,138,0,0,0,32,138,
0,0,0,0,0,16,18,0,0,64,136,0,0,0,224,139,0,0,0,32,138,0,0,0,32,138,0,0,0,0,0,
16,18,0,0,32,136,0,0,0,0,137,0,0,0,32,138,0,0,0,32,138,0,0,0,0,0,16,12,0,0,224,
115,0,0,0,0,113,0,0,0,192,113,0,0,0,192,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Bitmap image_P100(idata_P100, 205, 18);

Fl_Box *boxControl=(Fl_Box *)0;

Fl_Light_Button *btnAuxRTS=(Fl_Light_Button *)0;

static void cb_btnAuxRTS(Fl_Light_Button* o, void*) {
  progStatus.aux_rts = o->value();
cbAuxPort();
}

Fl_Light_Button *btnAuxDTR=(Fl_Light_Button *)0;

static void cb_btnAuxDTR(Fl_Light_Button* o, void*) {
  progStatus.aux_dtr = o->value();
cbAuxPort();
}

Fl_Light_Button *btnMicLine=(Fl_Light_Button *)0;

static void cb_btnMicLine(Fl_Light_Button*, void*) {
  cbbtnMicLine();
}

Fl_Counter *cntRIT=(Fl_Counter *)0;

static void cb_cntRIT(Fl_Counter*, void*) {
  cbRIT();
}

Fl_Counter *cntXIT=(Fl_Counter *)0;

static void cb_cntXIT(Fl_Counter*, void*) {
  cbXIT();
}

Fl_Counter *cntBFO=(Fl_Counter *)0;

static void cb_cntBFO(Fl_Counter*, void*) {
  cbBFO();
}

Fl_Button *btnInitializing=(Fl_Button *)0;

Fl_Double_Window* Rig_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(424, 330, _("Flrig"));
    w = o;
    o->color((Fl_Color)FL_LIGHT2);
    o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 424, 22);
      o->textsize(12);
      { Fl_Menu_Item* o = &menu_[8];
        progStatus.tooltips ? o->set() :o->clear();
      }
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { txt_encA = new Fl_Output(334, 0, 90, 22);
      txt_encA->box(FL_THIN_DOWN_BOX);
      txt_encA->color((Fl_Color)215);
      txt_encA->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      txt_encA->hide();
    } // Fl_Output* txt_encA
    { cFreqControl* o = FreqDispA = new cFreqControl(1, 24, 210, 35, _("10"));
      FreqDispA->box(FL_DOWN_BOX);
      FreqDispA->color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDispA->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDispA->labeltype(FL_NORMAL_LABEL);
      FreqDispA->labelfont(0);
      FreqDispA->labelsize(14);
      FreqDispA->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      FreqDispA->align(FL_ALIGN_CENTER);
      FreqDispA->when(FL_WHEN_CHANGED);
      FreqDispA->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);
      o->setCallBack(movFreqA);
    } // cFreqControl* FreqDispA
    { cFreqControl* o = FreqDispB = new cFreqControl(213, 24, 210, 35, _("10"));
      FreqDispB->box(FL_DOWN_BOX);
      FreqDispB->color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDispB->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDispB->labeltype(FL_NORMAL_LABEL);
      FreqDispB->labelfont(0);
      FreqDispB->labelsize(14);
      FreqDispB->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      FreqDispB->align(FL_ALIGN_CENTER);
      FreqDispB->when(FL_WHEN_CHANGED);
      FreqDispB->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);
      o->setCallBack(movFreqB);
    } // cFreqControl* FreqDispB
    { btnVol = new Fl_Light_Button(2, 125, 60, 18, _("Vol"));
      btnVol->tooltip(_("Speaker on/off"));
      btnVol->down_box(FL_THIN_DOWN_BOX);
      btnVol->value(1);
      btnVol->color((Fl_Color)FL_LIGHT1);
      btnVol->selection_color((Fl_Color)113);
      btnVol->labelsize(12);
      btnVol->callback((Fl_Callback*)cb_btnVol);
    } // Fl_Light_Button* btnVol
    { Fl_Wheel_Value_Slider* o = sldrVOLUME = new Fl_Wheel_Value_Slider(68, 125, 355, 18);
      sldrVOLUME->tooltip(_("Adjust Audio Volume"));
      sldrVOLUME->type(5);
      sldrVOLUME->box(FL_THIN_DOWN_BOX);
      sldrVOLUME->color((Fl_Color)206);
      sldrVOLUME->selection_color((Fl_Color)221);
      sldrVOLUME->labeltype(FL_NORMAL_LABEL);
      sldrVOLUME->labelfont(0);
      sldrVOLUME->labelsize(12);
      sldrVOLUME->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrVOLUME->maximum(100);
      sldrVOLUME->step(1);
      sldrVOLUME->textsize(12);
      sldrVOLUME->callback((Fl_Callback*)cb_sldrVOLUME);
      sldrVOLUME->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      sldrVOLUME->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrVOLUME
    { Fl_Wheel_Value_Slider* o = sldrRFGAIN = new Fl_Wheel_Value_Slider(68, 145, 355, 18, _("RF"));
      sldrRFGAIN->tooltip(_("Adjust RF gain"));
      sldrRFGAIN->type(5);
      sldrRFGAIN->box(FL_THIN_DOWN_BOX);
      sldrRFGAIN->color((Fl_Color)206);
      sldrRFGAIN->selection_color((Fl_Color)221);
      sldrRFGAIN->labeltype(FL_NORMAL_LABEL);
      sldrRFGAIN->labelfont(0);
      sldrRFGAIN->labelsize(14);
      sldrRFGAIN->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrRFGAIN->maximum(100);
      sldrRFGAIN->step(1);
      sldrRFGAIN->value(15);
      sldrRFGAIN->textsize(12);
      sldrRFGAIN->callback((Fl_Callback*)cb_sldrRFGAIN);
      sldrRFGAIN->align(FL_ALIGN_LEFT);
      sldrRFGAIN->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrRFGAIN
    { Fl_Wheel_Value_Slider* o = sldrSQUELCH = new Fl_Wheel_Value_Slider(68, 165, 355, 18, _("SQL"));
      sldrSQUELCH->tooltip(_("Adjust Squelch"));
      sldrSQUELCH->type(5);
      sldrSQUELCH->box(FL_THIN_DOWN_BOX);
      sldrSQUELCH->color((Fl_Color)206);
      sldrSQUELCH->selection_color((Fl_Color)221);
      sldrSQUELCH->labeltype(FL_NORMAL_LABEL);
      sldrSQUELCH->labelfont(0);
      sldrSQUELCH->labelsize(14);
      sldrSQUELCH->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrSQUELCH->maximum(100);
      sldrSQUELCH->step(1);
      sldrSQUELCH->value(15);
      sldrSQUELCH->textsize(12);
      sldrSQUELCH->callback((Fl_Callback*)cb_sldrSQUELCH);
      sldrSQUELCH->align(FL_ALIGN_LEFT);
      sldrSQUELCH->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrSQUELCH
    { btnNR = new Fl_Light_Button(2, 185, 60, 18, _("NR"));
      btnNR->tooltip(_("Noise Reduction On/Off"));
      btnNR->down_box(FL_THIN_DOWN_BOX);
      btnNR->color((Fl_Color)FL_LIGHT1);
      btnNR->selection_color((Fl_Color)113);
      btnNR->labelsize(12);
      btnNR->callback((Fl_Callback*)cb_btnNR);
    } // Fl_Light_Button* btnNR
    { Fl_Wheel_Value_Slider* o = sldrNR = new Fl_Wheel_Value_Slider(68, 185, 355, 18);
      sldrNR->tooltip(_("Adjust noise reduction"));
      sldrNR->type(5);
      sldrNR->box(FL_THIN_DOWN_BOX);
      sldrNR->color((Fl_Color)206);
      sldrNR->selection_color((Fl_Color)221);
      sldrNR->labeltype(FL_NORMAL_LABEL);
      sldrNR->labelfont(0);
      sldrNR->labelsize(12);
      sldrNR->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrNR->maximum(100);
      sldrNR->step(2);
      sldrNR->textsize(12);
      sldrNR->callback((Fl_Callback*)cb_sldrNR);
      sldrNR->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      sldrNR->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrNR
    { btnIFsh = new Fl_Light_Button(2, 206, 60, 18, _("IFsh"));
      btnIFsh->tooltip(_("IF Shift On/Off"));
      btnIFsh->down_box(FL_THIN_DOWN_BOX);
      btnIFsh->color((Fl_Color)FL_LIGHT1);
      btnIFsh->selection_color((Fl_Color)113);
      btnIFsh->labelsize(12);
      btnIFsh->callback((Fl_Callback*)cb_btnIFsh);
    } // Fl_Light_Button* btnIFsh
    { Fl_Wheel_Value_Slider* o = sldrIFSHIFT = new Fl_Wheel_Value_Slider(68, 206, 355, 18);
      sldrIFSHIFT->tooltip(_("Adjust IF Shift"));
      sldrIFSHIFT->type(5);
      sldrIFSHIFT->box(FL_THIN_DOWN_BOX);
      sldrIFSHIFT->color((Fl_Color)206);
      sldrIFSHIFT->selection_color((Fl_Color)221);
      sldrIFSHIFT->labeltype(FL_NORMAL_LABEL);
      sldrIFSHIFT->labelfont(0);
      sldrIFSHIFT->labelsize(12);
      sldrIFSHIFT->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrIFSHIFT->minimum(-1000);
      sldrIFSHIFT->maximum(1000);
      sldrIFSHIFT->step(10);
      sldrIFSHIFT->textsize(12);
      sldrIFSHIFT->callback((Fl_Callback*)cb_sldrIFSHIFT);
      sldrIFSHIFT->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      sldrIFSHIFT->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrIFSHIFT
    { btnNotch = new Fl_Light_Button(2, 226, 60, 18, _("Ntch"));
      btnNotch->tooltip(_("Notch - Manual (off) Auto (on)"));
      btnNotch->down_box(FL_THIN_DOWN_BOX);
      btnNotch->color((Fl_Color)FL_LIGHT1);
      btnNotch->selection_color((Fl_Color)113);
      btnNotch->labelsize(12);
      btnNotch->callback((Fl_Callback*)cb_btnNotch);
    } // Fl_Light_Button* btnNotch
    { Fl_Wheel_Value_Slider* o = sldrNOTCH = new Fl_Wheel_Value_Slider(68, 226, 355, 18);
      sldrNOTCH->tooltip(_("Adjust Notch Frequency"));
      sldrNOTCH->type(5);
      sldrNOTCH->box(FL_THIN_DOWN_BOX);
      sldrNOTCH->color((Fl_Color)206);
      sldrNOTCH->selection_color((Fl_Color)221);
      sldrNOTCH->labeltype(FL_NORMAL_LABEL);
      sldrNOTCH->labelfont(0);
      sldrNOTCH->labelsize(14);
      sldrNOTCH->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrNOTCH->minimum(-1000);
      sldrNOTCH->maximum(1000);
      sldrNOTCH->step(10);
      sldrNOTCH->textsize(12);
      sldrNOTCH->callback((Fl_Callback*)cb_sldrNOTCH);
      sldrNOTCH->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      sldrNOTCH->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrNOTCH
    { Fl_Wheel_Value_Slider* o = sldrMICGAIN = new Fl_Wheel_Value_Slider(68, 246, 355, 18, _("MIC"));
      sldrMICGAIN->tooltip(_("Adjuts Mic Gain"));
      sldrMICGAIN->type(5);
      sldrMICGAIN->box(FL_THIN_DOWN_BOX);
      sldrMICGAIN->color((Fl_Color)246);
      sldrMICGAIN->selection_color((Fl_Color)221);
      sldrMICGAIN->labeltype(FL_NORMAL_LABEL);
      sldrMICGAIN->labelfont(0);
      sldrMICGAIN->labelsize(14);
      sldrMICGAIN->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrMICGAIN->maximum(100);
      sldrMICGAIN->step(1);
      sldrMICGAIN->textsize(12);
      sldrMICGAIN->callback((Fl_Callback*)cb_sldrMICGAIN);
      sldrMICGAIN->align(FL_ALIGN_LEFT);
      sldrMICGAIN->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrMICGAIN
    { Fl_Wheel_Value_Slider* o = sldrPOWER = new Fl_Wheel_Value_Slider(68, 266, 355, 18, _("PWR"));
      sldrPOWER->tooltip(_("Adjust power level"));
      sldrPOWER->type(5);
      sldrPOWER->box(FL_THIN_DOWN_BOX);
      sldrPOWER->color((Fl_Color)246);
      sldrPOWER->selection_color((Fl_Color)221);
      sldrPOWER->labeltype(FL_NORMAL_LABEL);
      sldrPOWER->labelfont(0);
      sldrPOWER->labelsize(14);
      sldrPOWER->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      sldrPOWER->maximum(100);
      sldrPOWER->step(1);
      sldrPOWER->value(15);
      sldrPOWER->textsize(12);
      sldrPOWER->callback((Fl_Callback*)cb_sldrPOWER);
      sldrPOWER->align(FL_ALIGN_LEFT);
      sldrPOWER->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrPOWER
    { txtInactive = new Fl_Box(211, 76, 128, 19, _("1296000.000"));
      txtInactive->tooltip(_("Vfo #2"));
      txtInactive->box(FL_DOWN_BOX);
      txtInactive->color((Fl_Color)FL_DARK_RED);
      txtInactive->labelfont(4);
      txtInactive->labelsize(16);
      txtInactive->labelcolor((Fl_Color)FL_LIGHT2);
      txtInactive->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      txtInactive->hide();
    } // Fl_Box* txtInactive
    { Fl_Light_Button* o = btnA = new Fl_Light_Button(213, 62, 50, 20, _("vfoA"));
      btnA->tooltip(_("Rx-A / Tx-B"));
      btnA->down_box(FL_THIN_DOWN_BOX);
      btnA->color((Fl_Color)FL_LIGHT1);
      btnA->selection_color((Fl_Color)113);
      btnA->labelsize(12);
      btnA->callback((Fl_Callback*)cb_btnA);
      o->value(!useB);
    } // Fl_Light_Button* btnA
    { Fl_Light_Button* o = btnB = new Fl_Light_Button(266, 62, 50, 20, _("vfoB"));
      btnB->tooltip(_("Rx-A / Tx-B"));
      btnB->down_box(FL_THIN_DOWN_BOX);
      btnB->color((Fl_Color)FL_LIGHT1);
      btnB->selection_color((Fl_Color)113);
      btnB->labelsize(12);
      btnB->callback((Fl_Callback*)cb_btnB);
      o->value(useB);
    } // Fl_Light_Button* btnB
    { btnA2B = new Fl_Button(319, 62, 50, 20, _("A -> B"));
      btnA2B->tooltip(_("Copy A to B"));
      btnA2B->down_box(FL_DOWN_BOX);
      btnA2B->color((Fl_Color)FL_LIGHT1);
      btnA2B->selection_color((Fl_Color)134);
      btnA2B->labelsize(12);
      btnA2B->callback((Fl_Callback*)cb_btnA2B);
    } // Fl_Button* btnA2B
    { Fl_Light_Button* o = btnSplit = new Fl_Light_Button(372, 62, 50, 20, _("Split"));
      btnSplit->tooltip(_("Rx-A / Tx-B"));
      btnSplit->down_box(FL_THIN_DOWN_BOX);
      btnSplit->color((Fl_Color)FL_LIGHT1);
      btnSplit->selection_color((Fl_Color)113);
      btnSplit->labelsize(12);
      btnSplit->callback((Fl_Callback*)cb_btnSplit);
      o->value(progStatus.split);
    } // Fl_Light_Button* btnSplit
    { opMODE = new Fl_ComboBox(322, 84, 100, 18, _("Mode"));
      opMODE->tooltip(_("Select transceiver operating mode"));
      opMODE->box(FL_FLAT_BOX);
      opMODE->color((Fl_Color)FL_BACKGROUND_COLOR);
      opMODE->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      opMODE->labeltype(FL_NORMAL_LABEL);
      opMODE->labelfont(0);
      opMODE->labelsize(12);
      opMODE->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      opMODE->callback((Fl_Callback*)cb_opMODE);
      opMODE->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      opMODE->when(FL_WHEN_RELEASE);
      opMODE->end();
    } // Fl_ComboBox* opMODE
    { opBW = new Fl_ComboBox(215, 84, 100, 18, _("BW"));
      opBW->tooltip(_("Select Transceiver Bandwidth"));
      opBW->box(FL_FLAT_BOX);
      opBW->color((Fl_Color)FL_BACKGROUND_COLOR);
      opBW->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      opBW->labeltype(FL_NORMAL_LABEL);
      opBW->labelfont(0);
      opBW->labelsize(12);
      opBW->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      opBW->callback((Fl_Callback*)cb_opBW);
      opBW->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      opBW->when(FL_WHEN_RELEASE);
      opBW->end();
    } // Fl_ComboBox* opBW
    { btnAttenuator = new Fl_Light_Button(2, 286, 60, 18, _("Att"));
      btnAttenuator->tooltip(_("Attenuator On/Off"));
      btnAttenuator->down_box(FL_THIN_DOWN_BOX);
      btnAttenuator->color((Fl_Color)FL_LIGHT1);
      btnAttenuator->selection_color((Fl_Color)113);
      btnAttenuator->labelsize(12);
      btnAttenuator->callback((Fl_Callback*)cb_btnAttenuator);
    } // Fl_Light_Button* btnAttenuator
    { btnPreamp = new Fl_Light_Button(74, 286, 60, 18, _("Pre"));
      btnPreamp->tooltip(_("Preamp On/Off"));
      btnPreamp->down_box(FL_THIN_DOWN_BOX);
      btnPreamp->color((Fl_Color)FL_LIGHT1);
      btnPreamp->selection_color((Fl_Color)113);
      btnPreamp->labelsize(12);
      btnPreamp->callback((Fl_Callback*)cb_btnPreamp);
    } // Fl_Light_Button* btnPreamp
    { btnNOISE = new Fl_Light_Button(146, 286, 60, 18, _("NB"));
      btnNOISE->tooltip(_("Noise Blanker On/Off"));
      btnNOISE->down_box(FL_THIN_DOWN_BOX);
      btnNOISE->color((Fl_Color)FL_LIGHT1);
      btnNOISE->selection_color((Fl_Color)113);
      btnNOISE->labelsize(12);
      btnNOISE->callback((Fl_Callback*)cb_btnNOISE);
    } // Fl_Light_Button* btnNOISE
    { btnAutoNotch = new Fl_Light_Button(218, 286, 60, 18, _("AN"));
      btnAutoNotch->tooltip(_("Auto Notch On/Off"));
      btnAutoNotch->down_box(FL_THIN_DOWN_BOX);
      btnAutoNotch->color((Fl_Color)FL_LIGHT1);
      btnAutoNotch->selection_color((Fl_Color)113);
      btnAutoNotch->labelsize(12);
      btnAutoNotch->callback((Fl_Callback*)cb_btnAutoNotch);
    } // Fl_Light_Button* btnAutoNotch
    { btnTune = new Fl_Button(290, 286, 60, 18, _("Tune"));
      btnTune->tooltip(_("Momentary Tune"));
      btnTune->color((Fl_Color)FL_LIGHT1);
      btnTune->callback((Fl_Callback*)cb_btnTune);
    } // Fl_Button* btnTune
    { btnPTT = new Fl_Light_Button(362, 286, 60, 18, _("PTT"));
      btnPTT->tooltip(_("Xmt On/Off"));
      btnPTT->down_box(FL_THIN_DOWN_BOX);
      btnPTT->color((Fl_Color)FL_LIGHT1);
      btnPTT->selection_color((Fl_Color)113);
      btnPTT->labelsize(12);
      btnPTT->callback((Fl_Callback*)cb_btnPTT);
    } // Fl_Light_Button* btnPTT
    { grpMeters = new Fl_Group(1, 62, 210, 60);
      grpMeters->box(FL_THIN_DOWN_BOX);
      grpMeters->color((Fl_Color)215);
      grpMeters->selection_color((Fl_Color)215);
      { scaleSmeter = new Fl_Box(3, 64, 205, 20);
        scaleSmeter->box(FL_FLAT_BOX);
        scaleSmeter->color((Fl_Color)55);
        scaleSmeter->selection_color((Fl_Color)55);
        scaleSmeter->image(image_S60);
      } // Fl_Box* scaleSmeter
      { btnALC_SWR = new Fl_Button(2, 64, 205, 20);
        btnALC_SWR->tooltip(_("Press SWR / ALC"));
        btnALC_SWR->box(FL_FLAT_BOX);
        btnALC_SWR->down_box(FL_FLAT_BOX);
        btnALC_SWR->color((Fl_Color)FL_WHITE);
        btnALC_SWR->image(image_SWR);
        btnALC_SWR->callback((Fl_Callback*)cb_btnALC_SWR);
        btnALC_SWR->hide();
      } // Fl_Button* btnALC_SWR
      { Fl_SigBar* o = sldrRcvSignal = new Fl_SigBar(5, 86, 181, 6);
        sldrRcvSignal->box(FL_FLAT_BOX);
        sldrRcvSignal->color((Fl_Color)198);
        sldrRcvSignal->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        sldrRcvSignal->labeltype(FL_NORMAL_LABEL);
        sldrRcvSignal->labelfont(0);
        sldrRcvSignal->labelsize(14);
        sldrRcvSignal->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrRcvSignal->align(FL_ALIGN_CENTER);
        sldrRcvSignal->when(FL_WHEN_RELEASE);
        sldrRcvSignal->hide();
        o->minimum(0);
        o->maximum(100);
      } // Fl_SigBar* sldrRcvSignal
      { Fl_SigBar* o = sldrALC_SWR = new Fl_SigBar(5, 86, 201, 6);
        sldrALC_SWR->box(FL_FLAT_BOX);
        sldrALC_SWR->color((Fl_Color)198);
        sldrALC_SWR->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        sldrALC_SWR->labeltype(FL_NORMAL_LABEL);
        sldrALC_SWR->labelfont(0);
        sldrALC_SWR->labelsize(14);
        sldrALC_SWR->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrALC_SWR->align(FL_ALIGN_CENTER);
        sldrALC_SWR->when(FL_WHEN_RELEASE);
        sldrALC_SWR->hide();
        o->minimum(0);
        o->maximum(100);
      } // Fl_SigBar* sldrALC_SWR
      { Fl_SigBar* o = sldrFwdPwr = new Fl_SigBar(5, 93, 201, 6);
        sldrFwdPwr->box(FL_FLAT_BOX);
        sldrFwdPwr->color((Fl_Color)FL_DARK_RED);
        sldrFwdPwr->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        sldrFwdPwr->labeltype(FL_NORMAL_LABEL);
        sldrFwdPwr->labelfont(0);
        sldrFwdPwr->labelsize(14);
        sldrFwdPwr->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrFwdPwr->align(FL_ALIGN_CENTER);
        sldrFwdPwr->when(FL_WHEN_RELEASE);
        sldrFwdPwr->hide();
        o->minimum(0);
        o->maximum(100);
      } // Fl_SigBar* sldrFwdPwr
      { scalePower = new Fl_Box(3, 100, 205, 20);
        scalePower->box(FL_FLAT_BOX);
        scalePower->color((Fl_Color)55);
        scalePower->selection_color((Fl_Color)55);
        scalePower->image(image_P100);
      } // Fl_Box* scalePower
      grpMeters->end();
    } // Fl_Group* grpMeters
    { boxControl = new Fl_Box(3, 311, 130, 17, _("Auxilliary Controls:"));
      boxControl->box(FL_FLAT_BOX);
      boxControl->color((Fl_Color)FL_LIGHT2);
      boxControl->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    } // Fl_Box* boxControl
    { Fl_Light_Button* o = btnAuxRTS = new Fl_Light_Button(218, 310, 60, 18, _("RTS"));
      btnAuxRTS->tooltip(_("RTS control pin"));
      btnAuxRTS->down_box(FL_THIN_DOWN_BOX);
      btnAuxRTS->color((Fl_Color)FL_LIGHT1);
      btnAuxRTS->selection_color((Fl_Color)113);
      btnAuxRTS->labelsize(12);
      btnAuxRTS->callback((Fl_Callback*)cb_btnAuxRTS);
      o->value(progStatus.aux_rts);
    } // Fl_Light_Button* btnAuxRTS
    { Fl_Light_Button* o = btnAuxDTR = new Fl_Light_Button(146, 310, 60, 18, _("DTR"));
      btnAuxDTR->tooltip(_("DTR control pin"));
      btnAuxDTR->down_box(FL_THIN_DOWN_BOX);
      btnAuxDTR->color((Fl_Color)FL_LIGHT1);
      btnAuxDTR->selection_color((Fl_Color)113);
      btnAuxDTR->labelsize(12);
      btnAuxDTR->callback((Fl_Callback*)cb_btnAuxDTR);
      o->value(progStatus.aux_dtr);
    } // Fl_Light_Button* btnAuxDTR
    { btnMicLine = new Fl_Light_Button(3, 283, 55, 18, _("Mic"));
      btnMicLine->tooltip(_("Select Mic / Line audio inp."));
      btnMicLine->down_box(FL_THIN_DOWN_BOX);
      btnMicLine->color((Fl_Color)FL_LIGHT1);
      btnMicLine->selection_color((Fl_Color)113);
      btnMicLine->labelsize(12);
      btnMicLine->callback((Fl_Callback*)cb_btnMicLine);
      btnMicLine->hide();
    } // Fl_Light_Button* btnMicLine
    { cntRIT = new Fl_Counter(215, 104, 54, 18, _("R"));
      cntRIT->tooltip(_("RIT"));
      cntRIT->type(1);
      cntRIT->labelsize(12);
      cntRIT->minimum(-1000);
      cntRIT->maximum(1000);
      cntRIT->step(10);
      cntRIT->callback((Fl_Callback*)cb_cntRIT);
      cntRIT->align(FL_ALIGN_RIGHT);
    } // Fl_Counter* cntRIT
    { cntXIT = new Fl_Counter(285, 104, 54, 18, _("X"));
      cntXIT->tooltip(_("XIT"));
      cntXIT->type(1);
      cntXIT->labelsize(12);
      cntXIT->minimum(-1000);
      cntXIT->maximum(1000);
      cntXIT->step(10);
      cntXIT->callback((Fl_Callback*)cb_cntXIT);
      cntXIT->align(FL_ALIGN_RIGHT);
    } // Fl_Counter* cntXIT
    { cntBFO = new Fl_Counter(357, 104, 54, 18, _("B"));
      cntBFO->tooltip(_("BFO"));
      cntBFO->type(1);
      cntBFO->labelsize(12);
      cntBFO->minimum(0);
      cntBFO->maximum(1000);
      cntBFO->step(10);
      cntBFO->value(600);
      cntBFO->callback((Fl_Callback*)cb_cntBFO);
      cntBFO->align(FL_ALIGN_RIGHT);
    } // Fl_Counter* cntBFO
    { btnInitializing = new Fl_Button(0, 23, 424, 100, _("Initializing\n\nPlease wait"));
      btnInitializing->color((Fl_Color)206);
      btnInitializing->labelfont(1);
      btnInitializing->labelsize(24);
      btnInitializing->hide();
    } // Fl_Button* btnInitializing
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Group *grpMeterColor=(Fl_Group *)0;

Fl_Box *scaleSmeterColor=(Fl_Box *)0;

Fl_SigBar *sldrRcvSignalColor=(Fl_SigBar *)0;

Fl_SigBar *sldrSWRcolor=(Fl_SigBar *)0;

Fl_Box *scaleSWRcolor=(Fl_Box *)0;

Fl_SigBar *sldrPWRcolor=(Fl_SigBar *)0;

Fl_Box *scalePWRcolor=(Fl_Box *)0;

Fl_Button *btnBacklight=(Fl_Button *)0;

static void cb_btnBacklight(Fl_Button*, void*) {
  cbBacklightColor();
}

Fl_Button *btMeterColor=(Fl_Button *)0;

static void cb_btMeterColor(Fl_Button*, void*) {
  cbSMeterColor();
}

Fl_Button *btnSWRColor=(Fl_Button *)0;

static void cb_btnSWRColor(Fl_Button*, void*) {
  cbSWRMeterColor();
}

Fl_Button *btnPwrColor=(Fl_Button *)0;

static void cb_btnPwrColor(Fl_Button*, void*) {
  cbPwrMeterColor();
}

Fl_Button *btnPeakColor=(Fl_Button *)0;

static void cb_btnPeakColor(Fl_Button*, void*) {
  cbPeakMeterColor();
}

Fl_Button *btnCancel=(Fl_Button *)0;

static void cb_btnCancel(Fl_Button*, void*) {
  cbCancelDisplayDialog();
}

Fl_Return_Button *btnOkDisplayDialog=(Fl_Return_Button *)0;

static void cb_btnOkDisplayDialog(Fl_Return_Button*, void*) {
  cbOkDisplayDialog();
}

Fl_Box *lblTest=(Fl_Box *)0;

Fl_Button *prefFont=(Fl_Button *)0;

static void cb_prefFont(Fl_Button*, void*) {
  cbPrefFont();
}

Fl_Button *prefForeground=(Fl_Button *)0;

static void cb_prefForeground(Fl_Button*, void*) {
  cbPrefForeground();
}

Fl_Double_Window* DisplayDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(290, 183, _("Flrig Colors"));
    w = o;
    { grpMeterColor = new Fl_Group(7, 8, 210, 100);
      grpMeterColor->box(FL_DOWN_BOX);
      grpMeterColor->color((Fl_Color)215);
      grpMeterColor->selection_color((Fl_Color)215);
      grpMeterColor->labelcolor((Fl_Color)FL_LIGHT1);
      { Fl_Box* o = scaleSmeterColor = new Fl_Box(10, 10, 205, 20);
        scaleSmeterColor->box(FL_FLAT_BOX);
        scaleSmeterColor->color((Fl_Color)215);
        scaleSmeterColor->selection_color((Fl_Color)215);
        scaleSmeterColor->image(image_S60);
        o->color(scaleSmeter->color());
      } // Fl_Box* scaleSmeterColor
      { sldrRcvSignalColor = new Fl_SigBar(12, 30, 200, 6);
        sldrRcvSignalColor->box(FL_FLAT_BOX);
        sldrRcvSignalColor->color((Fl_Color)198);
        sldrRcvSignalColor->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        sldrRcvSignalColor->labeltype(FL_NORMAL_LABEL);
        sldrRcvSignalColor->labelfont(0);
        sldrRcvSignalColor->labelsize(14);
        sldrRcvSignalColor->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrRcvSignalColor->align(FL_ALIGN_CENTER);
        sldrRcvSignalColor->when(FL_WHEN_RELEASE);
      } // Fl_SigBar* sldrRcvSignalColor
      { Fl_SigBar* o = sldrSWRcolor = new Fl_SigBar(12, 61, 200, 6);
        sldrSWRcolor->box(FL_FLAT_BOX);
        sldrSWRcolor->color((Fl_Color)198);
        sldrSWRcolor->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        sldrSWRcolor->labeltype(FL_NORMAL_LABEL);
        sldrSWRcolor->labelfont(0);
        sldrSWRcolor->labelsize(14);
        sldrSWRcolor->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrSWRcolor->align(FL_ALIGN_CENTER);
        sldrSWRcolor->when(FL_WHEN_RELEASE);
        o->minimum(0);
        o->maximum(100);
      } // Fl_SigBar* sldrSWRcolor
      { scaleSWRcolor = new Fl_Box(10, 41, 205, 20);
        scaleSWRcolor->box(FL_FLAT_BOX);
        scaleSWRcolor->color((Fl_Color)215);
        scaleSWRcolor->selection_color((Fl_Color)215);
        scaleSWRcolor->image(image_SWR);
      } // Fl_Box* scaleSWRcolor
      { Fl_SigBar* o = sldrPWRcolor = new Fl_SigBar(10, 78, 200, 6);
        sldrPWRcolor->box(FL_FLAT_BOX);
        sldrPWRcolor->color((Fl_Color)91);
        sldrPWRcolor->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        sldrPWRcolor->labeltype(FL_NORMAL_LABEL);
        sldrPWRcolor->labelfont(0);
        sldrPWRcolor->labelsize(14);
        sldrPWRcolor->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrPWRcolor->align(FL_ALIGN_CENTER);
        sldrPWRcolor->when(FL_WHEN_RELEASE);
        o->minimum(0);
        o->maximum(100);
      } // Fl_SigBar* sldrPWRcolor
      { scalePWRcolor = new Fl_Box(10, 84, 205, 20);
        scalePWRcolor->box(FL_FLAT_BOX);
        scalePWRcolor->color((Fl_Color)215);
        scalePWRcolor->selection_color((Fl_Color)215);
        scalePWRcolor->image(image_P100);
      } // Fl_Box* scalePWRcolor
      grpMeterColor->end();
    } // Fl_Group* grpMeterColor
    { btnBacklight = new Fl_Button(221, 116, 60, 24, _("Back"));
      btnBacklight->callback((Fl_Callback*)cb_btnBacklight);
    } // Fl_Button* btnBacklight
    { btMeterColor = new Fl_Button(221, 8, 60, 22, _("Smeter"));
      btMeterColor->callback((Fl_Callback*)cb_btMeterColor);
    } // Fl_Button* btMeterColor
    { btnSWRColor = new Fl_Button(221, 33, 60, 22, _("SWR"));
      btnSWRColor->callback((Fl_Callback*)cb_btnSWRColor);
    } // Fl_Button* btnSWRColor
    { btnPwrColor = new Fl_Button(221, 58, 60, 22, _("Pwr"));
      btnPwrColor->callback((Fl_Callback*)cb_btnPwrColor);
    } // Fl_Button* btnPwrColor
    { btnPeakColor = new Fl_Button(221, 84, 60, 22, _("Peak"));
      btnPeakColor->callback((Fl_Callback*)cb_btnPeakColor);
    } // Fl_Button* btnPeakColor
    { btnCancel = new Fl_Button(154, 149, 60, 24, _("Cancel"));
      btnCancel->callback((Fl_Callback*)cb_btnCancel);
    } // Fl_Button* btnCancel
    { btnOkDisplayDialog = new Fl_Return_Button(221, 149, 60, 24, _("OK"));
      btnOkDisplayDialog->callback((Fl_Callback*)cb_btnOkDisplayDialog);
    } // Fl_Return_Button* btnOkDisplayDialog
    { lblTest = new Fl_Box(29, 114, 170, 30, _("14070.000"));
      lblTest->box(FL_DOWN_BOX);
      lblTest->color((Fl_Color)35);
      lblTest->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      lblTest->labelfont(4);
      lblTest->labelsize(28);
      lblTest->labelcolor((Fl_Color)230);
    } // Fl_Box* lblTest
    { prefFont = new Fl_Button(8, 149, 60, 24, _("Font"));
      prefFont->callback((Fl_Callback*)cb_prefFont);
    } // Fl_Button* prefFont
    { prefForeground = new Fl_Button(77, 149, 60, 24, _("Color"));
      prefForeground->callback((Fl_Callback*)cb_prefForeground);
    } // Fl_Button* prefForeground
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Button *btnAddFreq=(Fl_Button *)0;

static void cb_btnAddFreq(Fl_Button*, void*) {
  addFreq();
}

Fl_Button *btnDelFreq=(Fl_Button *)0;

static void cb_btnDelFreq(Fl_Button*, void*) {
  delFreq();
}

Fl_Button *btnClearList=(Fl_Button *)0;

static void cb_btnClearList(Fl_Button*, void*) {
  clearList();
}

static void cb_Close(Fl_Button*, void*) {
  cbCloseMemory();
}

Fl_Browser *FreqSelect=(Fl_Browser *)0;

static void cb_FreqSelect(Fl_Browser*, void*) {
  if (FreqSelect->value())
selectFreq();
}

Fl_Double_Window* Memory_Dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(222, 128, _("Flrig Memory"));
    w = o;
    { btnAddFreq = new Fl_Button(9, 8, 51, 20, _("Add @-1>"));
      btnAddFreq->tooltip(_("Add to list"));
      btnAddFreq->down_box(FL_DOWN_BOX);
      btnAddFreq->color((Fl_Color)FL_LIGHT1);
      btnAddFreq->selection_color((Fl_Color)FL_LIGHT1);
      btnAddFreq->labelsize(12);
      btnAddFreq->callback((Fl_Callback*)cb_btnAddFreq);
      btnAddFreq->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Button* btnAddFreq
    { btnDelFreq = new Fl_Button(10, 38, 50, 20, _("Del @-11+"));
      btnDelFreq->tooltip(_("Delete from list"));
      btnDelFreq->down_box(FL_DOWN_BOX);
      btnDelFreq->color((Fl_Color)FL_LIGHT1);
      btnDelFreq->selection_color((Fl_Color)FL_LIGHT1);
      btnDelFreq->labelsize(12);
      btnDelFreq->callback((Fl_Callback*)cb_btnDelFreq);
      btnDelFreq->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Button* btnDelFreq
    { btnClearList = new Fl_Button(10, 68, 52, 20, _("Clr @-2square"));
      btnClearList->tooltip(_("Clear list"));
      btnClearList->down_box(FL_DOWN_BOX);
      btnClearList->color((Fl_Color)FL_LIGHT1);
      btnClearList->selection_color((Fl_Color)FL_LIGHT1);
      btnClearList->labelsize(12);
      btnClearList->callback((Fl_Callback*)cb_btnClearList);
      btnClearList->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Button* btnClearList
    { Fl_Button* o = new Fl_Button(7, 99, 54, 20, _("Close"));
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Close);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Button* o
    { FreqSelect = new Fl_Browser(66, 7, 150, 113);
      FreqSelect->tooltip(_("Select operating frequency/mode"));
      FreqSelect->type(2);
      FreqSelect->labelfont(4);
      FreqSelect->labelsize(12);
      FreqSelect->textfont(4);
      FreqSelect->textsize(12);
      FreqSelect->callback((Fl_Callback*)cb_FreqSelect);
    } // Fl_Browser* FreqSelect
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_ComboBox *selectRig=(Fl_ComboBox *)0;

static void cb_selectRig(Fl_ComboBox*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
initConfigDialog();
}

Fl_Counter *cntRigCatRetries=(Fl_Counter *)0;

static void cb_cntRigCatRetries(Fl_Counter* o, void*) {
  progStatus.comm_retries = (int)o->value();
}

Fl_Counter *cntRigCatTimeout=(Fl_Counter *)0;

static void cb_cntRigCatTimeout(Fl_Counter* o, void*) {
  progStatus.comm_timeout = (int)o->value();
}

Fl_Counter *cntRigCatWait=(Fl_Counter *)0;

static void cb_cntRigCatWait(Fl_Counter* o, void*) {
  progStatus.comm_wait = (int)o->value();
}

Fl_Counter *query_interval=(Fl_Counter *)0;

static void cb_query_interval(Fl_Counter* o, void*) {
  progStatus.serloop_timing = (int)o->value();
}

Fl_ComboBox *selectCommPort=(Fl_ComboBox *)0;

static void cb_selectCommPort(Fl_ComboBox*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_ComboBox *mnuBaudrate=(Fl_ComboBox *)0;

static void cb_mnuBaudrate(Fl_ComboBox*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnTwoStopBit=(Fl_Check_Button *)0;

static void cb_btnTwoStopBit(Fl_Check_Button* o, void*) {
  if (o->value() == true) {
btnOneStopBit->value(false);
progStatus.stopbits = 2;
} else
o->value(true);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnOneStopBit=(Fl_Check_Button *)0;

static void cb_btnOneStopBit(Fl_Check_Button* o, void*) {
  if (o->value() == true) {
btnTwoStopBit->value(false);
progStatus.stopbits = 1;
} else
o->value(true);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnRigCatEcho=(Fl_Check_Button *)0;

static void cb_btnRigCatEcho(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Input *server_port=(Fl_Input *)0;

static void cb_server_port(Fl_Input* o, void*) {
  progStatus.server_port = o->value();
}

Fl_Round_Button *btncatptt=(Fl_Round_Button *)0;

static void cb_btncatptt(Fl_Round_Button* o, void*) {
  if (o->value()== 1) {
  btnrtsptt->value(0);
  btndtrptt->value(0);
  }
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Round_Button *btnrtsptt=(Fl_Round_Button *)0;

static void cb_btnrtsptt(Fl_Round_Button* o, void*) {
  if (o->value() == 1) {
//  btndtrptt->value(0);
  btncatptt->value(0);
}
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Round_Button *btndtrptt=(Fl_Round_Button *)0;

static void cb_btndtrptt(Fl_Round_Button* o, void*) {
  if (o->value() == 1) {
//  btnrtsptt->value(0);
  btncatptt->value(0);
}
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *chkrtscts=(Fl_Check_Button *)0;

static void cb_chkrtscts(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnrtsplus=(Fl_Check_Button *)0;

static void cb_btnrtsplus(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btndtrplus=(Fl_Check_Button *)0;

static void cb_btndtrplus(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Input *txtCIV=(Fl_Input *)0;

static void cb_txtCIV(Fl_Input* o, void*) {
  progStatus.CIV = atol(o->value());
cbCIV();
}

Fl_Check_Button *btnUSBaudio=(Fl_Check_Button *)0;

static void cb_btnUSBaudio(Fl_Check_Button*, void*) {
  cbUSBaudio();
}

Fl_Button *btnCIVdefault=(Fl_Button *)0;

static void cb_btnCIVdefault(Fl_Button*, void*) {
  cbCIVdefault();
}

Fl_ComboBox *selectSepPTTPort=(Fl_ComboBox *)0;

static void cb_selectSepPTTPort(Fl_ComboBox*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Round_Button *btnSepRTSptt=(Fl_Round_Button *)0;

static void cb_btnSepRTSptt(Fl_Round_Button* o, void*) {
  if (o->value() == 1)
  btnSepDTRptt->value(0);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnSepRTSplus=(Fl_Check_Button *)0;

static void cb_btnSepRTSplus(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Round_Button *btnSepDTRptt=(Fl_Round_Button *)0;

static void cb_btnSepDTRptt(Fl_Round_Button* o, void*) {
  if (o->value() == 1)
  btnSepRTSptt->value(0);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Check_Button *btnSepDTRplus=(Fl_Check_Button *)0;

static void cb_btnSepDTRplus(Fl_Check_Button*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_ComboBox *selectAuxPort=(Fl_ComboBox *)0;

static void cb_selectAuxPort(Fl_ComboBox*, void*) {
  btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
}

Fl_Button *btnCancelCommConfig=(Fl_Button *)0;

static void cb_btnCancelCommConfig(Fl_Button*, void*) {
  cbCancelXcvrDialog();
}

Fl_Return_Button *btnOkXcvrDialog=(Fl_Return_Button *)0;

static void cb_btnOkXcvrDialog(Fl_Return_Button*, void*) {
  cbOkXcvrDialog();
}

Fl_Double_Window* XcvrDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(482, 257, _("I/O Ports"));
    w = o;
    { Fl_Tabs* o = new Fl_Tabs(0, 8, 477, 245);
      { Fl_Group* o = new Fl_Group(2, 30, 475, 222, _("Primary"));
        { Fl_Group* o = new Fl_Group(5, 34, 195, 140);
          o->box(FL_ENGRAVED_FRAME);
          { selectRig = new Fl_ComboBox(41, 38, 155, 22, _("Rig:"));
            selectRig->tooltip(_("Select Transceiver"));
            selectRig->box(FL_DOWN_BOX);
            selectRig->color((Fl_Color)53);
            selectRig->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
            selectRig->labeltype(FL_NORMAL_LABEL);
            selectRig->labelfont(0);
            selectRig->labelsize(14);
            selectRig->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            selectRig->callback((Fl_Callback*)cb_selectRig);
            selectRig->align(FL_ALIGN_LEFT);
            selectRig->when(FL_WHEN_RELEASE);
            selectRig->end();
          } // Fl_ComboBox* selectRig
          { Fl_Counter* o = cntRigCatRetries = new Fl_Counter(123, 63, 75, 22, _("Retries"));
            cntRigCatRetries->tooltip(_("Number of  times to resend\ncommand before giving up"));
            cntRigCatRetries->type(1);
            cntRigCatRetries->minimum(1);
            cntRigCatRetries->maximum(10);
            cntRigCatRetries->step(1);
            cntRigCatRetries->value(5);
            cntRigCatRetries->callback((Fl_Callback*)cb_cntRigCatRetries);
            cntRigCatRetries->align(FL_ALIGN_LEFT);
            o->value(progStatus.comm_retries);
          } // Fl_Counter* cntRigCatRetries
          { Fl_Counter* o = cntRigCatTimeout = new Fl_Counter(123, 89, 75, 22, _("Retry intvl (ms)"));
            cntRigCatTimeout->tooltip(_("Time between retries is msec"));
            cntRigCatTimeout->type(1);
            cntRigCatTimeout->minimum(2);
            cntRigCatTimeout->maximum(200);
            cntRigCatTimeout->step(1);
            cntRigCatTimeout->value(10);
            cntRigCatTimeout->callback((Fl_Callback*)cb_cntRigCatTimeout);
            cntRigCatTimeout->align(FL_ALIGN_LEFT);
            o->value(progStatus.comm_timeout);
          } // Fl_Counter* cntRigCatTimeout
          { Fl_Counter* o = cntRigCatWait = new Fl_Counter(123, 115, 75, 22, _("Cmd Intvl (ms)"));
            cntRigCatWait->tooltip(_("Millseconds between sequential commands"));
            cntRigCatWait->type(1);
            cntRigCatWait->minimum(0);
            cntRigCatWait->maximum(100);
            cntRigCatWait->step(1);
            cntRigCatWait->value(5);
            cntRigCatWait->callback((Fl_Callback*)cb_cntRigCatWait);
            cntRigCatWait->align(FL_ALIGN_LEFT);
            o->value(progStatus.comm_wait);
          } // Fl_Counter* cntRigCatWait
          { Fl_Counter* o = query_interval = new Fl_Counter(123, 141, 75, 22, _("qry intvl (ms):"));
            query_interval->tooltip(_("Interval between Xvr queries"));
            query_interval->type(1);
            query_interval->minimum(50);
            query_interval->maximum(5000);
            query_interval->step(50);
            query_interval->value(100);
            query_interval->callback((Fl_Callback*)cb_query_interval);
            query_interval->align(FL_ALIGN_LEFT);
            o->value(progStatus.serloop_timing);
          } // Fl_Counter* query_interval
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(202, 74, 270, 99);
          o->tooltip(_("Two stop bits"));
          o->box(FL_ENGRAVED_FRAME);
          { selectCommPort = new Fl_ComboBox(278, 82, 190, 22, _("Ser. Port"));
            selectCommPort->tooltip(_("Xcvr serial port"));
            selectCommPort->box(FL_DOWN_BOX);
            selectCommPort->color((Fl_Color)53);
            selectCommPort->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
            selectCommPort->labeltype(FL_NORMAL_LABEL);
            selectCommPort->labelfont(0);
            selectCommPort->labelsize(14);
            selectCommPort->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            selectCommPort->callback((Fl_Callback*)cb_selectCommPort);
            selectCommPort->align(FL_ALIGN_LEFT);
            selectCommPort->when(FL_WHEN_RELEASE);
            selectCommPort->end();
          } // Fl_ComboBox* selectCommPort
          { mnuBaudrate = new Fl_ComboBox(278, 111, 190, 22, _("Baud:"));
            mnuBaudrate->tooltip(_("Xcvr baudrate"));
            mnuBaudrate->box(FL_DOWN_BOX);
            mnuBaudrate->color((Fl_Color)53);
            mnuBaudrate->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
            mnuBaudrate->labeltype(FL_NORMAL_LABEL);
            mnuBaudrate->labelfont(0);
            mnuBaudrate->labelsize(14);
            mnuBaudrate->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            mnuBaudrate->callback((Fl_Callback*)cb_mnuBaudrate);
            mnuBaudrate->align(FL_ALIGN_LEFT);
            mnuBaudrate->when(FL_WHEN_RELEASE);
            mnuBaudrate->end();
          } // Fl_ComboBox* mnuBaudrate
          { Fl_Check_Button* o = btnTwoStopBit = new Fl_Check_Button(250, 144, 22, 15, _("2 -StopBits"));
            btnTwoStopBit->down_box(FL_DOWN_BOX);
            btnTwoStopBit->callback((Fl_Callback*)cb_btnTwoStopBit);
            btnTwoStopBit->align(FL_ALIGN_RIGHT);
            o->value(progStatus.stopbits == 2);
          } // Fl_Check_Button* btnTwoStopBit
          { Fl_Check_Button* o = btnOneStopBit = new Fl_Check_Button(210, 144, 22, 15, _("1"));
            btnOneStopBit->tooltip(_("One Stop Bit"));
            btnOneStopBit->down_box(FL_DOWN_BOX);
            btnOneStopBit->callback((Fl_Callback*)cb_btnOneStopBit);
            btnOneStopBit->align(FL_ALIGN_RIGHT);
            o->value(progStatus.stopbits == 1);
          } // Fl_Check_Button* btnOneStopBit
          { Fl_Check_Button* o = btnRigCatEcho = new Fl_Check_Button(397, 144, 22, 15, _("Echo "));
            btnRigCatEcho->down_box(FL_DOWN_BOX);
            btnRigCatEcho->callback((Fl_Callback*)cb_btnRigCatEcho);
            btnRigCatEcho->align(FL_ALIGN_RIGHT);
            o->value(progStatus.comm_echo);
          } // Fl_Check_Button* btnRigCatEcho
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(202, 34, 270, 38);
          o->box(FL_ENGRAVED_FRAME);
          { Fl_Input* o = server_port = new Fl_Input(307, 41, 100, 22, _("Fldigi port:"));
            server_port->tooltip(_("xmlrpc server address (7362)\nchange requires restart"));
            server_port->type(2);
            server_port->callback((Fl_Callback*)cb_server_port);
            o->value(progStatus.server_port.c_str());
          } // Fl_Input* server_port
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(4, 175, 243, 73);
          o->box(FL_ENGRAVED_FRAME);
          { Fl_Round_Button* o = btncatptt = new Fl_Round_Button(15, 180, 149, 22, _("PTT via CAT"));
            btncatptt->tooltip(_("PTT is a CAT command (not hardware)"));
            btncatptt->down_box(FL_ROUND_DOWN_BOX);
            btncatptt->selection_color((Fl_Color)FL_SELECTION_COLOR);
            btncatptt->callback((Fl_Callback*)cb_btncatptt);
            o->value(progStatus.comm_catptt);
          } // Fl_Round_Button* btncatptt
          { Fl_Round_Button* o = btnrtsptt = new Fl_Round_Button(15, 203, 149, 22, _("PTT via RTS"));
            btnrtsptt->tooltip(_("RTS is ptt line"));
            btnrtsptt->down_box(FL_ROUND_DOWN_BOX);
            btnrtsptt->callback((Fl_Callback*)cb_btnrtsptt);
            o->value(progStatus.comm_rtsptt);
          } // Fl_Round_Button* btnrtsptt
          { Fl_Round_Button* o = btndtrptt = new Fl_Round_Button(15, 226, 149, 22, _("PTT via DTR"));
            btndtrptt->tooltip(_("DTR is ptt line"));
            btndtrptt->down_box(FL_ROUND_DOWN_BOX);
            btndtrptt->callback((Fl_Callback*)cb_btndtrptt);
            o->value(progStatus.comm_dtrptt);
          } // Fl_Round_Button* btndtrptt
          { Fl_Check_Button* o = chkrtscts = new Fl_Check_Button(129, 178, 98, 21, _("RTS/CTS"));
            chkrtscts->tooltip(_("Xcvr uses RTS/CTS handshake"));
            chkrtscts->down_box(FL_DOWN_BOX);
            chkrtscts->callback((Fl_Callback*)cb_chkrtscts);
            o->value(progStatus.comm_rtscts);
          } // Fl_Check_Button* chkrtscts
          { Fl_Check_Button* o = btnrtsplus = new Fl_Check_Button(129, 201, 102, 21, _("RTS +12 v"));
            btnrtsplus->tooltip(_("Initial state of RTS"));
            btnrtsplus->down_box(FL_DOWN_BOX);
            btnrtsplus->callback((Fl_Callback*)cb_btnrtsplus);
            o->value(progStatus.comm_rtsplus);
          } // Fl_Check_Button* btnrtsplus
          { Fl_Check_Button* o = btndtrplus = new Fl_Check_Button(129, 224, 100, 21, _("DTR +12 v"));
            btndtrplus->tooltip(_("Initial state of DTR"));
            btndtrplus->down_box(FL_DOWN_BOX);
            btndtrplus->callback((Fl_Callback*)cb_btndtrplus);
            o->value(progStatus.comm_dtrplus);
          } // Fl_Check_Button* btndtrplus
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(247, 175, 225, 73);
          o->box(FL_ENGRAVED_FRAME);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          { txtCIV = new Fl_Input(261, 183, 58, 22, _("CI-V adr"));
            txtCIV->tooltip(_("Enter hex value, ie: 0x5F"));
            txtCIV->type(2);
            txtCIV->callback((Fl_Callback*)cb_txtCIV);
            txtCIV->align(FL_ALIGN_RIGHT);
          } // Fl_Input* txtCIV
          { btnUSBaudio = new Fl_Check_Button(261, 215, 104, 15, _("USB audio"));
            btnUSBaudio->down_box(FL_DOWN_BOX);
            btnUSBaudio->callback((Fl_Callback*)cb_btnUSBaudio);
          } // Fl_Check_Button* btnUSBaudio
          { btnCIVdefault = new Fl_Button(387, 183, 69, 22, _("Default"));
            btnCIVdefault->callback((Fl_Callback*)cb_btnCIVdefault);
          } // Fl_Button* btnCIVdefault
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(2, 30, 470, 218, _("PTT"));
        o->hide();
        { new Fl_Box(52, 72, 395, 37, _("Use only if your setup requires a separate\nSerial Port for a PTT control lin\
e"));
        } // Fl_Box* o
        { selectSepPTTPort = new Fl_ComboBox(127, 119, 190, 22, _("PTT Port"));
          selectSepPTTPort->tooltip(_("Aux control port"));
          selectSepPTTPort->box(FL_DOWN_BOX);
          selectSepPTTPort->color((Fl_Color)53);
          selectSepPTTPort->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          selectSepPTTPort->labeltype(FL_NORMAL_LABEL);
          selectSepPTTPort->labelfont(0);
          selectSepPTTPort->labelsize(14);
          selectSepPTTPort->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          selectSepPTTPort->callback((Fl_Callback*)cb_selectSepPTTPort);
          selectSepPTTPort->align(FL_ALIGN_LEFT);
          selectSepPTTPort->when(FL_WHEN_RELEASE);
          selectSepPTTPort->end();
        } // Fl_ComboBox* selectSepPTTPort
        { Fl_Round_Button* o = btnSepRTSptt = new Fl_Round_Button(110, 157, 127, 22, _("PTT via RTS"));
          btnSepRTSptt->tooltip(_("RTS is ptt line"));
          btnSepRTSptt->down_box(FL_ROUND_DOWN_BOX);
          btnSepRTSptt->callback((Fl_Callback*)cb_btnSepRTSptt);
          o->value(progStatus.sep_rtsptt);
        } // Fl_Round_Button* btnSepRTSptt
        { Fl_Check_Button* o = btnSepRTSplus = new Fl_Check_Button(271, 157, 127, 22, _("RTS +12 v"));
          btnSepRTSplus->tooltip(_("Initial state of RTS"));
          btnSepRTSplus->down_box(FL_DOWN_BOX);
          btnSepRTSplus->callback((Fl_Callback*)cb_btnSepRTSplus);
          o->value(progStatus.sep_rtsplus);
        } // Fl_Check_Button* btnSepRTSplus
        { Fl_Round_Button* o = btnSepDTRptt = new Fl_Round_Button(110, 183, 127, 22, _("PTT via DTR"));
          btnSepDTRptt->tooltip(_("DTR is ptt line"));
          btnSepDTRptt->down_box(FL_ROUND_DOWN_BOX);
          btnSepDTRptt->callback((Fl_Callback*)cb_btnSepDTRptt);
          o->value(progStatus.sep_dtrptt);
        } // Fl_Round_Button* btnSepDTRptt
        { Fl_Check_Button* o = btnSepDTRplus = new Fl_Check_Button(271, 183, 127, 22, _("DTR +12 v"));
          btnSepDTRplus->tooltip(_("Initial state of DTR"));
          btnSepDTRplus->down_box(FL_DOWN_BOX);
          btnSepDTRplus->callback((Fl_Callback*)cb_btnSepDTRplus);
          o->value(progStatus.sep_dtrplus);
        } // Fl_Check_Button* btnSepDTRplus
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(2, 30, 470, 220, _("Aux"));
        o->hide();
        { selectAuxPort = new Fl_ComboBox(130, 131, 190, 22, _("Aux Port"));
          selectAuxPort->tooltip(_("Aux control port"));
          selectAuxPort->box(FL_DOWN_BOX);
          selectAuxPort->color((Fl_Color)53);
          selectAuxPort->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          selectAuxPort->labeltype(FL_NORMAL_LABEL);
          selectAuxPort->labelfont(0);
          selectAuxPort->labelsize(14);
          selectAuxPort->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          selectAuxPort->callback((Fl_Callback*)cb_selectAuxPort);
          selectAuxPort->align(FL_ALIGN_LEFT);
          selectAuxPort->when(FL_WHEN_RELEASE);
          selectAuxPort->end();
        } // Fl_ComboBox* selectAuxPort
        { new Fl_Box(55, 84, 395, 37, _("Use only if your setup requires a separate\nSerial Port for a special Control\
 Signals"));
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { btnCancelCommConfig = new Fl_Button(346, 2, 60, 25, _("Close"));
      btnCancelCommConfig->callback((Fl_Callback*)cb_btnCancelCommConfig);
    } // Fl_Button* btnCancelCommConfig
    { btnOkXcvrDialog = new Fl_Return_Button(416, 2, 60, 25, _("Init"));
      btnOkXcvrDialog->callback((Fl_Callback*)cb_btnOkXcvrDialog);
    } // Fl_Return_Button* btnOkXcvrDialog
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Counter *cnt_cw_wpm=(Fl_Counter *)0;

static void cb_cnt_cw_wpm(Fl_Counter* o, void*) {
  progStatus.cw_wpm = o->value();
cb_cw_wpm();
}

Fl_Counter *cnt_cw_vol=(Fl_Counter *)0;

static void cb_cnt_cw_vol(Fl_Counter* o, void*) {
  progStatus.cw_vol=o->value();
cb_cw_vol();
}

Fl_Counter *cnt_cw_spot=(Fl_Counter *)0;

static void cb_cnt_cw_spot(Fl_Counter* o, void*) {
  progStatus.cw_spot=o->value();
cb_cw_spot();
}

Fl_Light_Button *btnSpot=(Fl_Light_Button *)0;

Fl_Counter *cnt_vox_gain=(Fl_Counter *)0;

static void cb_cnt_vox_gain(Fl_Counter* o, void*) {
  progStatus.vox_gain=o->value();
cb_vox_gain();
}

Fl_Counter *cnt_anti_vox=(Fl_Counter *)0;

static void cb_cnt_anti_vox(Fl_Counter* o, void*) {
  progStatus.vox_anti=o->value();
cb_vox_anti();
}

Fl_Counter *cnt_vox_hang=(Fl_Counter *)0;

static void cb_cnt_vox_hang(Fl_Counter* o, void*) {
  progStatus.vox_hang = o->value();
cb_vox_hang();
}

Fl_Light_Button *btn_vox=(Fl_Light_Button *)0;

static void cb_btn_vox(Fl_Light_Button* o, void*) {
  progStatus.vox_onoff=o->value();
cb_vox_onoff();
}

Fl_Light_Button *btnCompON=(Fl_Light_Button *)0;

static void cb_btnCompON(Fl_Light_Button* o, void*) {
  progStatus.compON=o->value();
cb_compression();
}

Fl_Counter *cnt_compression=(Fl_Counter *)0;

static void cb_cnt_compression(Fl_Counter* o, void*) {
  progStatus.compression=o->value();
cb_compression();
}

Fl_ComboBox *cbo_agc_level=(Fl_ComboBox *)0;

static void cb_cbo_agc_level(Fl_ComboBox* o, void*) {
  progStatus.agc_level = o->index();
cb_agc_level();
}

Fl_Counter *cnt_line_out=(Fl_Counter *)0;

static void cb_cnt_line_out(Fl_Counter* o, void*) {
  progStatus.line_out = o->value();
cb_line_out();
}

Fl_Counter *cnt_vfo_adj=(Fl_Counter *)0;

static void cb_cnt_vfo_adj(Fl_Counter* o, void*) {
  progStatus.vfo_adj=o->value();
cb_vfo_adj();
}

Fl_Counter *cnt_bpf_center=(Fl_Counter *)0;

static void cb_cnt_bpf_center(Fl_Counter* o, void*) {
  progStatus.bpf_center=o->value();
cb_bpf_center();
}

Fl_Check_Button *btn_use_bpf_center=(Fl_Check_Button *)0;

static void cb_btn_use_bpf_center(Fl_Check_Button* o, void*) {
  progStatus.use_bpf_center = o->value();
cb_bpf_center();
}

Fl_Light_Button *btnSpecial=(Fl_Light_Button *)0;

static void cb_btnSpecial(Fl_Light_Button*, void*) {
  cb_special();
}

Fl_Double_Window* make_XcvrXtra() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(340, 239, _("Controls"));
    w = o;
    o->align(FL_ALIGN_CENTER);
    { Fl_Group* o = new Fl_Group(2, 3, 335, 46, _("CW"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Counter* o = cnt_cw_wpm = new Fl_Counter(37, 23, 70, 22, _("wpm"));
        cnt_cw_wpm->type(1);
        cnt_cw_wpm->minimum(5);
        cnt_cw_wpm->maximum(80);
        cnt_cw_wpm->step(1);
        cnt_cw_wpm->value(24);
        cnt_cw_wpm->callback((Fl_Callback*)cb_cnt_cw_wpm);
        cnt_cw_wpm->align(FL_ALIGN_TOP);
        o->value(progStatus.cw_wpm);
      } // Fl_Counter* cnt_cw_wpm
      { Fl_Counter* o = cnt_cw_vol = new Fl_Counter(113, 23, 70, 22, _("Mon"));
        cnt_cw_vol->type(1);
        cnt_cw_vol->minimum(5);
        cnt_cw_vol->maximum(80);
        cnt_cw_vol->step(1);
        cnt_cw_vol->value(24);
        cnt_cw_vol->callback((Fl_Callback*)cb_cnt_cw_vol);
        cnt_cw_vol->align(FL_ALIGN_TOP);
        o->value(progStatus.cw_vol);
      } // Fl_Counter* cnt_cw_vol
      { Fl_Counter* o = cnt_cw_spot = new Fl_Counter(189, 23, 70, 22, _("spot"));
        cnt_cw_spot->type(1);
        cnt_cw_spot->minimum(0);
        cnt_cw_spot->maximum(100);
        cnt_cw_spot->step(1);
        cnt_cw_spot->callback((Fl_Callback*)cb_cnt_cw_spot);
        cnt_cw_spot->align(FL_ALIGN_TOP);
        o->value(progStatus.cw_spot);
      } // Fl_Counter* cnt_cw_spot
      { btnSpot = new Fl_Light_Button(266, 23, 64, 22, _("Spot"));
      } // Fl_Light_Button* btnSpot
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(2, 49, 335, 46, _("Vox"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Counter* o = cnt_vox_gain = new Fl_Counter(37, 68, 70, 22, _("gain"));
        cnt_vox_gain->type(1);
        cnt_vox_gain->minimum(0);
        cnt_vox_gain->maximum(100);
        cnt_vox_gain->step(1);
        cnt_vox_gain->callback((Fl_Callback*)cb_cnt_vox_gain);
        cnt_vox_gain->align(FL_ALIGN_TOP);
        o->value(progStatus.vox_gain);
      } // Fl_Counter* cnt_vox_gain
      { Fl_Counter* o = cnt_anti_vox = new Fl_Counter(113, 68, 70, 22, _("anti"));
        cnt_anti_vox->type(1);
        cnt_anti_vox->minimum(0);
        cnt_anti_vox->maximum(100);
        cnt_anti_vox->step(1);
        cnt_anti_vox->callback((Fl_Callback*)cb_cnt_anti_vox);
        cnt_anti_vox->align(FL_ALIGN_TOP);
        o->value(progStatus.vox_anti);
      } // Fl_Counter* cnt_anti_vox
      { Fl_Counter* o = cnt_vox_hang = new Fl_Counter(189, 68, 70, 22, _("hang"));
        cnt_vox_hang->type(1);
        cnt_vox_hang->minimum(0);
        cnt_vox_hang->maximum(100);
        cnt_vox_hang->step(1);
        cnt_vox_hang->callback((Fl_Callback*)cb_cnt_vox_hang);
        cnt_vox_hang->align(FL_ALIGN_TOP);
        o->value(progStatus.vox_hang);
      } // Fl_Counter* cnt_vox_hang
      { Fl_Light_Button* o = btn_vox = new Fl_Light_Button(266, 68, 64, 22, _("VOX"));
        btn_vox->callback((Fl_Callback*)cb_btn_vox);
        o->value(progStatus.vox_onoff);
      } // Fl_Light_Button* btn_vox
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(2, 96, 335, 36, _("Speech Comp."));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Light_Button* o = btnCompON = new Fl_Light_Button(266, 103, 64, 22, _("On"));
        btnCompON->callback((Fl_Callback*)cb_btnCompON);
        o->value(progStatus.compON);
      } // Fl_Light_Button* btnCompON
      { Fl_Counter* o = cnt_compression = new Fl_Counter(189, 103, 70, 22, _("level"));
        cnt_compression->type(1);
        cnt_compression->minimum(0);
        cnt_compression->maximum(100);
        cnt_compression->step(1);
        cnt_compression->callback((Fl_Callback*)cb_cnt_compression);
        cnt_compression->align(FL_ALIGN_LEFT);
        o->value(progStatus.compression);
      } // Fl_Counter* cnt_compression
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(2, 133, 335, 103, _("Misc."));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { cbo_agc_level = new Fl_ComboBox(250, 158, 80, 22, _("AGC"));
        cbo_agc_level->tooltip(_("Select Transceiver"));
        cbo_agc_level->box(FL_DOWN_BOX);
        cbo_agc_level->color((Fl_Color)53);
        cbo_agc_level->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        cbo_agc_level->labeltype(FL_NORMAL_LABEL);
        cbo_agc_level->labelfont(0);
        cbo_agc_level->labelsize(14);
        cbo_agc_level->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        cbo_agc_level->callback((Fl_Callback*)cb_cbo_agc_level);
        cbo_agc_level->align(FL_ALIGN_TOP);
        cbo_agc_level->when(FL_WHEN_RELEASE);
        cbo_agc_level->end();
      } // Fl_ComboBox* cbo_agc_level
      { Fl_Counter* o = cnt_line_out = new Fl_Counter(260, 204, 70, 22, _("line out"));
        cnt_line_out->type(1);
        cnt_line_out->minimum(0);
        cnt_line_out->maximum(100);
        cnt_line_out->step(1);
        cnt_line_out->value(20);
        cnt_line_out->callback((Fl_Callback*)cb_cnt_line_out);
        cnt_line_out->align(FL_ALIGN_TOP);
        o->value(progStatus.line_out);
      } // Fl_Counter* cnt_line_out
      { Fl_Counter* o = cnt_vfo_adj = new Fl_Counter(20, 204, 96, 22, _("Vfo Adj(ppm)"));
        cnt_vfo_adj->type(1);
        cnt_vfo_adj->step(0.1);
        cnt_vfo_adj->callback((Fl_Callback*)cb_cnt_vfo_adj);
        cnt_vfo_adj->align(33);
        o->value(progStatus.vfo_adj);
      } // Fl_Counter* cnt_vfo_adj
      { Fl_Counter* o = cnt_bpf_center = new Fl_Counter(20, 158, 96, 22, _("BPF Center Freq"));
        cnt_bpf_center->tooltip(_("Bandpass Filter Center Freq"));
        cnt_bpf_center->type(1);
        cnt_bpf_center->minimum(600);
        cnt_bpf_center->maximum(2500);
        cnt_bpf_center->step(10);
        cnt_bpf_center->value(1500);
        cnt_bpf_center->callback((Fl_Callback*)cb_cnt_bpf_center);
        cnt_bpf_center->align(33);
        o->value(progStatus.bpf_center);
      } // Fl_Counter* cnt_bpf_center
      { Fl_Check_Button* o = btn_use_bpf_center = new Fl_Check_Button(120, 161, 50, 15, _("On"));
        btn_use_bpf_center->tooltip(_("Use Filter Center Freq Adj"));
        btn_use_bpf_center->down_box(FL_DOWN_BOX);
        btn_use_bpf_center->value(1);
        btn_use_bpf_center->callback((Fl_Callback*)cb_btn_use_bpf_center);
        o->value(progStatus.use_bpf_center);
      } // Fl_Check_Button* btn_use_bpf_center
      { btnSpecial = new Fl_Light_Button(148, 205, 74, 20, _("Special"));
        btnSpecial->callback((Fl_Callback*)cb_btnSpecial);
      } // Fl_Light_Button* btnSpecial
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Counter *cnt_tt550_cw_wpm=(Fl_Counter *)0;

static void cb_cnt_tt550_cw_wpm(Fl_Counter* o, void*) {
  progStatus.tt550_cw_wpm = (int)o->value();
cb_tt550_cw_wpm();
}

Fl_Counter *cnt_tt550_cw_vol=(Fl_Counter *)0;

static void cb_cnt_tt550_cw_vol(Fl_Counter* o, void*) {
  progStatus.tt550_cw_vol=(int)o->value();
cb_tt550_cw_vol();
}

Fl_Counter *cnt_tt550_cw_spot=(Fl_Counter *)0;

static void cb_cnt_tt550_cw_spot(Fl_Counter* o, void*) {
  progStatus.tt550_cw_spot=(int)o->value();
cb_tt550_cw_spot();
}

Fl_Light_Button *btn_tt550_spot_onoff=(Fl_Light_Button *)0;

static void cb_btn_tt550_spot_onoff(Fl_Light_Button* o, void*) {
  progStatus.tt550_spot_onoff=o->value();
cb_tt550_spot_onoff();
}

Fl_Counter *cnt_tt550_cw_weight=(Fl_Counter *)0;

static void cb_cnt_tt550_cw_weight(Fl_Counter* o, void*) {
  progStatus.tt550_cw_weight = o->value();
cb_tt550_cw_weight();
}

Fl_Check_Button *btn_tt550_enable_keyer=(Fl_Check_Button *)0;

static void cb_btn_tt550_enable_keyer(Fl_Check_Button* o, void*) {
  progStatus.tt550_enable_keyer=o->value();
cb_tt550_enable_keyer();
}

Fl_Counter *cnt_tt550_vox_gain=(Fl_Counter *)0;

static void cb_cnt_tt550_vox_gain(Fl_Counter* o, void*) {
  progStatus.tt550_vox_gain=(int)o->value();
cb_tt550_vox_gain();
}

Fl_Counter *cnt_tt550_anti_vox=(Fl_Counter *)0;

static void cb_cnt_tt550_anti_vox(Fl_Counter* o, void*) {
  progStatus.tt550_vox_anti=(int)o->value();
cb_tt550_vox_anti();
}

Fl_Counter *cnt_tt550_vox_hang=(Fl_Counter *)0;

static void cb_cnt_tt550_vox_hang(Fl_Counter* o, void*) {
  progStatus.tt550_vox_hang = (int)o->value();
cb_tt550_vox_hang();
}

Fl_Light_Button *btn_tt550_vox=(Fl_Light_Button *)0;

static void cb_btn_tt550_vox(Fl_Light_Button* o, void*) {
  progStatus.tt550_vox_onoff=o->value();
cb_tt550_vox_onoff();
}

Fl_Light_Button *btn_tt550_CompON=(Fl_Light_Button *)0;

static void cb_btn_tt550_CompON(Fl_Light_Button* o, void*) {
  progStatus.tt550_compON=o->value();
cb_tt550_compression();
}

Fl_Counter *cnt_tt550_compression=(Fl_Counter *)0;

static void cb_cnt_tt550_compression(Fl_Counter* o, void*) {
  progStatus.tt550_compression=(int)o->value();
cb_tt550_compression();
}

Fl_Counter *cnt_tt550_mon_vol=(Fl_Counter *)0;

static void cb_cnt_tt550_mon_vol(Fl_Counter* o, void*) {
  progStatus.tt550_mon_vol=(int)o->value();
cb_tt550_mon_vol();
}

Fl_Counter *cnt_tt550_line_out=(Fl_Counter *)0;

static void cb_cnt_tt550_line_out(Fl_Counter* o, void*) {
  progStatus.tt550_line_out = (int)o->value();
cb_tt550_line_out();
}

Fl_ComboBox *cbo_tt550_nb_level=(Fl_ComboBox *)0;

static void cb_cbo_tt550_nb_level(Fl_ComboBox* o, void*) {
  progStatus.tt550_nb_level = o->index();
cb_tt550_nb_level();
}

Fl_ComboBox *cbo_tt550_agc_level=(Fl_ComboBox *)0;

static void cb_cbo_tt550_agc_level(Fl_ComboBox* o, void*) {
  progStatus.tt550_agc_level = o->index();
cb_tt550_agc_level();
}

Fl_Check_Button *btn_tt550_enable_xmtr=(Fl_Check_Button *)0;

static void cb_btn_tt550_enable_xmtr(Fl_Check_Button* o, void*) {
  progStatus.tt550_enable_xmtr=o->value();
cb_tt550_enable_xmtr();
}

Fl_Check_Button *btn_tt550_enable_tloop=(Fl_Check_Button *)0;

static void cb_btn_tt550_enable_tloop(Fl_Check_Button* o, void*) {
  progStatus.tt550_enable_tloop=o->value();
cb_tt550_enable_tloop();
}

Fl_Check_Button *btn_tt550_tuner_bypass=(Fl_Check_Button *)0;

static void cb_btn_tt550_tuner_bypass(Fl_Check_Button* o, void*) {
  progStatus.tt550_tuner_bypass=o->value();
cb_tt550_tuner_bypass();
}

Fl_Counter *cnt_tt550_vfo_adj=(Fl_Counter *)0;

static void cb_cnt_tt550_vfo_adj(Fl_Counter* o, void*) {
  progStatus.vfo_adj=o->value();
cb_vfo_adj();
}

Fl_ComboBox *op_tt550_XmtBW=(Fl_ComboBox *)0;

static void cb_op_tt550_XmtBW(Fl_ComboBox* o, void*) {
  progStatus.tt550_xmt_bw = o->index();
cb_tt550_setXmtBW();
}

Fl_Check_Button *btn_tt550_use_xmt_bw=(Fl_Check_Button *)0;

static void cb_btn_tt550_use_xmt_bw(Fl_Check_Button* o, void*) {
  progStatus.tt550_use_xmt_bw = o->value();
cb_tt550_setXmtBW();
}

Fl_Check_Button *btnAccInp=(Fl_Check_Button *)0;

static void cb_btnAccInp(Fl_Check_Button* o, void*) {
  progStatus.use_line_in=o->value();
cb_tt550_use_line_in();
}

Fl_Counter *cnt_tt550_encoder_sensitivity=(Fl_Counter *)0;

static void cb_cnt_tt550_encoder_sensitivity(Fl_Counter* o, void*) {
  progStatus.tt550_encoder_sensitivity = o->value();
}

Fl_Choice *sel_550_step_size=(Fl_Choice *)0;

static void cb_sel_550_step_size(Fl_Choice* o, void*) {
  progStatus.tt550_encoder_step = o->value();
}

Fl_Double_Window* make_TT550() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(340, 402, _("TT550 Setup"));
    w = o;
    o->align(FL_ALIGN_CENTER);
    { Fl_Group* o = new Fl_Group(2, 2, 336, 90, _("CW"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Counter* o = cnt_tt550_cw_wpm = new Fl_Counter(9, 35, 70, 22, _("wpm"));
        cnt_tt550_cw_wpm->type(1);
        cnt_tt550_cw_wpm->minimum(5);
        cnt_tt550_cw_wpm->maximum(80);
        cnt_tt550_cw_wpm->step(1);
        cnt_tt550_cw_wpm->value(24);
        cnt_tt550_cw_wpm->callback((Fl_Callback*)cb_cnt_tt550_cw_wpm);
        cnt_tt550_cw_wpm->align(FL_ALIGN_TOP);
        o->value(progStatus.tt550_cw_wpm);
      } // Fl_Counter* cnt_tt550_cw_wpm
      { Fl_Counter* o = cnt_tt550_cw_vol = new Fl_Counter(90, 35, 70, 22, _("S-T vol"));
        cnt_tt550_cw_vol->tooltip(_("Side tone volume"));
        cnt_tt550_cw_vol->type(1);
        cnt_tt550_cw_vol->minimum(5);
        cnt_tt550_cw_vol->maximum(80);
        cnt_tt550_cw_vol->step(1);
        cnt_tt550_cw_vol->value(24);
        cnt_tt550_cw_vol->callback((Fl_Callback*)cb_cnt_tt550_cw_vol);
        cnt_tt550_cw_vol->align(FL_ALIGN_TOP);
        o->value(progStatus.tt550_cw_vol);
      } // Fl_Counter* cnt_tt550_cw_vol
      { Fl_Counter* o = cnt_tt550_cw_spot = new Fl_Counter(254, 35, 70, 22, _("Spot Vol"));
        cnt_tt550_cw_spot->tooltip(_("Spot volume"));
        cnt_tt550_cw_spot->type(1);
        cnt_tt550_cw_spot->minimum(0);
        cnt_tt550_cw_spot->maximum(100);
        cnt_tt550_cw_spot->step(1);
        cnt_tt550_cw_spot->value(20);
        cnt_tt550_cw_spot->callback((Fl_Callback*)cb_cnt_tt550_cw_spot);
        cnt_tt550_cw_spot->align(FL_ALIGN_TOP);
        o->value(progStatus.tt550_cw_spot);
      } // Fl_Counter* cnt_tt550_cw_spot
      { Fl_Light_Button* o = btn_tt550_spot_onoff = new Fl_Light_Button(258, 64, 64, 22, _("Spot"));
        btn_tt550_spot_onoff->callback((Fl_Callback*)cb_btn_tt550_spot_onoff);
        o->value(progStatus.tt550_spot_onoff);
      } // Fl_Light_Button* btn_tt550_spot_onoff
      { Fl_Counter* o = cnt_tt550_cw_weight = new Fl_Counter(173, 35, 70, 22, _("Weight"));
        cnt_tt550_cw_weight->type(1);
        cnt_tt550_cw_weight->minimum(0.75);
        cnt_tt550_cw_weight->maximum(1.5);
        cnt_tt550_cw_weight->step(0.05);
        cnt_tt550_cw_weight->value(1);
        cnt_tt550_cw_weight->callback((Fl_Callback*)cb_cnt_tt550_cw_weight);
        cnt_tt550_cw_weight->align(FL_ALIGN_TOP);
        o->value(progStatus.tt550_cw_weight);
      } // Fl_Counter* cnt_tt550_cw_weight
      { Fl_Check_Button* o = btn_tt550_enable_keyer = new Fl_Check_Button(98, 67, 70, 15, _("Keyer ON/OFF"));
        btn_tt550_enable_keyer->tooltip(_("Enable keyer"));
        btn_tt550_enable_keyer->down_box(FL_DOWN_BOX);
        btn_tt550_enable_keyer->value(1);
        btn_tt550_enable_keyer->callback((Fl_Callback*)cb_btn_tt550_enable_keyer);
        o->value(progStatus.tt550_enable_keyer);
      } // Fl_Check_Button* btn_tt550_enable_keyer
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(2, 93, 336, 50, _("Vox"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Counter* o = cnt_tt550_vox_gain = new Fl_Counter(37, 112, 69, 22, _("gain"));
        cnt_tt550_vox_gain->type(1);
        cnt_tt550_vox_gain->minimum(0);
        cnt_tt550_vox_gain->maximum(100);
        cnt_tt550_vox_gain->step(1);
        cnt_tt550_vox_gain->callback((Fl_Callback*)cb_cnt_tt550_vox_gain);
        cnt_tt550_vox_gain->align(FL_ALIGN_TOP);
        o->value(progStatus.tt550_vox_gain);
      } // Fl_Counter* cnt_tt550_vox_gain
      { Fl_Counter* o = cnt_tt550_anti_vox = new Fl_Counter(112, 112, 70, 22, _("anti"));
        cnt_tt550_anti_vox->type(1);
        cnt_tt550_anti_vox->minimum(0);
        cnt_tt550_anti_vox->maximum(100);
        cnt_tt550_anti_vox->step(1);
        cnt_tt550_anti_vox->callback((Fl_Callback*)cb_cnt_tt550_anti_vox);
        cnt_tt550_anti_vox->align(FL_ALIGN_TOP);
        o->value(progStatus.tt550_vox_anti);
      } // Fl_Counter* cnt_tt550_anti_vox
      { Fl_Counter* o = cnt_tt550_vox_hang = new Fl_Counter(187, 112, 69, 22, _("hang"));
        cnt_tt550_vox_hang->type(1);
        cnt_tt550_vox_hang->minimum(0);
        cnt_tt550_vox_hang->maximum(100);
        cnt_tt550_vox_hang->step(1);
        cnt_tt550_vox_hang->callback((Fl_Callback*)cb_cnt_tt550_vox_hang);
        cnt_tt550_vox_hang->align(FL_ALIGN_TOP);
        o->value(progStatus.tt550_vox_hang);
      } // Fl_Counter* cnt_tt550_vox_hang
      { Fl_Light_Button* o = btn_tt550_vox = new Fl_Light_Button(264, 112, 64, 22, _("VOX"));
        btn_tt550_vox->callback((Fl_Callback*)cb_btn_tt550_vox);
        o->value(progStatus.tt550_vox_onoff);
      } // Fl_Light_Button* btn_tt550_vox
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(2, 144, 336, 50, _("Speech"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Light_Button* o = btn_tt550_CompON = new Fl_Light_Button(264, 162, 64, 22, _("On"));
        btn_tt550_CompON->callback((Fl_Callback*)cb_btn_tt550_CompON);
        o->value(progStatus.tt550_compON);
      } // Fl_Light_Button* btn_tt550_CompON
      { Fl_Counter* o = cnt_tt550_compression = new Fl_Counter(187, 162, 69, 22, _("Comp"));
        cnt_tt550_compression->type(1);
        cnt_tt550_compression->minimum(0);
        cnt_tt550_compression->maximum(100);
        cnt_tt550_compression->step(1);
        cnt_tt550_compression->callback((Fl_Callback*)cb_cnt_tt550_compression);
        cnt_tt550_compression->align(FL_ALIGN_TOP);
        o->value(progStatus.tt550_compression);
      } // Fl_Counter* cnt_tt550_compression
      { Fl_Counter* o = cnt_tt550_mon_vol = new Fl_Counter(112, 162, 70, 22, _("Mon vol"));
        cnt_tt550_mon_vol->tooltip(_("Side tone volume"));
        cnt_tt550_mon_vol->type(1);
        cnt_tt550_mon_vol->minimum(0);
        cnt_tt550_mon_vol->maximum(100);
        cnt_tt550_mon_vol->step(1);
        cnt_tt550_mon_vol->value(25);
        cnt_tt550_mon_vol->callback((Fl_Callback*)cb_cnt_tt550_mon_vol);
        cnt_tt550_mon_vol->align(FL_ALIGN_TOP);
        o->value(progStatus.tt550_mon_vol);
      } // Fl_Counter* cnt_tt550_mon_vol
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(2, 195, 336, 68);
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Counter* o = cnt_tt550_line_out = new Fl_Counter(37, 212, 69, 22, _("line out"));
        cnt_tt550_line_out->type(1);
        cnt_tt550_line_out->minimum(0);
        cnt_tt550_line_out->maximum(100);
        cnt_tt550_line_out->step(1);
        cnt_tt550_line_out->value(20);
        cnt_tt550_line_out->callback((Fl_Callback*)cb_cnt_tt550_line_out);
        cnt_tt550_line_out->align(FL_ALIGN_TOP_LEFT);
        o->value(progStatus.tt550_line_out);
      } // Fl_Counter* cnt_tt550_line_out
      { Fl_ComboBox* o = cbo_tt550_nb_level = new Fl_ComboBox(126, 212, 80, 22, _("NB level"));
        cbo_tt550_nb_level->tooltip(_("Select Transceiver"));
        cbo_tt550_nb_level->box(FL_DOWN_BOX);
        cbo_tt550_nb_level->color((Fl_Color)53);
        cbo_tt550_nb_level->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        cbo_tt550_nb_level->labeltype(FL_NORMAL_LABEL);
        cbo_tt550_nb_level->labelfont(0);
        cbo_tt550_nb_level->labelsize(14);
        cbo_tt550_nb_level->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        cbo_tt550_nb_level->callback((Fl_Callback*)cb_cbo_tt550_nb_level);
        cbo_tt550_nb_level->align(FL_ALIGN_TOP_LEFT);
        cbo_tt550_nb_level->when(FL_WHEN_RELEASE);
        o->index(progStatus.tt550_nb_level);
        cbo_tt550_nb_level->end();
      } // Fl_ComboBox* cbo_tt550_nb_level
      { Fl_ComboBox* o = cbo_tt550_agc_level = new Fl_ComboBox(226, 212, 80, 22, _("AGC"));
        cbo_tt550_agc_level->tooltip(_("Select Transceiver"));
        cbo_tt550_agc_level->box(FL_DOWN_BOX);
        cbo_tt550_agc_level->color((Fl_Color)53);
        cbo_tt550_agc_level->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        cbo_tt550_agc_level->labeltype(FL_NORMAL_LABEL);
        cbo_tt550_agc_level->labelfont(0);
        cbo_tt550_agc_level->labelsize(14);
        cbo_tt550_agc_level->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        cbo_tt550_agc_level->callback((Fl_Callback*)cb_cbo_tt550_agc_level);
        cbo_tt550_agc_level->align(FL_ALIGN_TOP_LEFT);
        cbo_tt550_agc_level->when(FL_WHEN_RELEASE);
        o->index(progStatus.tt550_agc_level);
        cbo_tt550_agc_level->end();
      } // Fl_ComboBox* cbo_tt550_agc_level
      { Fl_Check_Button* o = btn_tt550_enable_xmtr = new Fl_Check_Button(14, 239, 70, 15, _("Xmtr ON"));
        btn_tt550_enable_xmtr->down_box(FL_DOWN_BOX);
        btn_tt550_enable_xmtr->callback((Fl_Callback*)cb_btn_tt550_enable_xmtr);
        o->value(progStatus.tt550_enable_xmtr);
      } // Fl_Check_Button* btn_tt550_enable_xmtr
      { Fl_Check_Button* o = btn_tt550_enable_tloop = new Fl_Check_Button(114, 239, 70, 15, _("Tloop ON"));
        btn_tt550_enable_tloop->down_box(FL_DOWN_BOX);
        btn_tt550_enable_tloop->callback((Fl_Callback*)cb_btn_tt550_enable_tloop);
        o->value(progStatus.tt550_enable_tloop);
      } // Fl_Check_Button* btn_tt550_enable_tloop
      { btn_tt550_tuner_bypass = new Fl_Check_Button(215, 239, 70, 15, _("Tuner bypass"));
        btn_tt550_tuner_bypass->down_box(FL_DOWN_BOX);
        btn_tt550_tuner_bypass->callback((Fl_Callback*)cb_btn_tt550_tuner_bypass);
      } // Fl_Check_Button* btn_tt550_tuner_bypass
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(2, 264, 336, 50);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Counter* o = cnt_tt550_vfo_adj = new Fl_Counter(13, 282, 100, 22, _("Vfo Adj(ppm)"));
        cnt_tt550_vfo_adj->step(0.1);
        cnt_tt550_vfo_adj->callback((Fl_Callback*)cb_cnt_tt550_vfo_adj);
        cnt_tt550_vfo_adj->align(33);
        o->value(progStatus.vfo_adj);
        o->lstep(1.0);
      } // Fl_Counter* cnt_tt550_vfo_adj
      { Fl_ComboBox* o = op_tt550_XmtBW = new Fl_ComboBox(126, 282, 80, 22, _("Xmt BW"));
        op_tt550_XmtBW->tooltip(_("Select Transceiver Bandwidth"));
        op_tt550_XmtBW->box(FL_DOWN_BOX);
        op_tt550_XmtBW->color((Fl_Color)55);
        op_tt550_XmtBW->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        op_tt550_XmtBW->labeltype(FL_NORMAL_LABEL);
        op_tt550_XmtBW->labelfont(0);
        op_tt550_XmtBW->labelsize(12);
        op_tt550_XmtBW->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        op_tt550_XmtBW->callback((Fl_Callback*)cb_op_tt550_XmtBW);
        op_tt550_XmtBW->align(FL_ALIGN_TOP_LEFT);
        op_tt550_XmtBW->when(FL_WHEN_RELEASE);
        o->index(progStatus.tt550_xmt_bw);
        op_tt550_XmtBW->end();
      } // Fl_ComboBox* op_tt550_XmtBW
      { Fl_Check_Button* o = btn_tt550_use_xmt_bw = new Fl_Check_Button(215, 284, 26, 15, _("Enable"));
        btn_tt550_use_xmt_bw->down_box(FL_DOWN_BOX);
        btn_tt550_use_xmt_bw->callback((Fl_Callback*)cb_btn_tt550_use_xmt_bw);
        o->value(progStatus.tt550_use_xmt_bw);
      } // Fl_Check_Button* btn_tt550_use_xmt_bw
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(2, 315, 336, 33);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Check_Button* o = btnAccInp = new Fl_Check_Button(48, 325, 272, 10, _("Acc Inp."));
        btnAccInp->tooltip(_("enable to use accessory audio input"));
        btnAccInp->down_box(FL_DOWN_BOX);
        btnAccInp->callback((Fl_Callback*)cb_btnAccInp);
        o->value(progStatus.use_line_in);
      } // Fl_Check_Button* btnAccInp
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(2, 349, 336, 52, _("Encoder"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Counter* o = cnt_tt550_encoder_sensitivity = new Fl_Counter(96, 372, 80, 21, _("Sensitivity"));
        cnt_tt550_encoder_sensitivity->tooltip(_("1 - most sensitive"));
        cnt_tt550_encoder_sensitivity->type(1);
        cnt_tt550_encoder_sensitivity->minimum(1);
        cnt_tt550_encoder_sensitivity->maximum(25);
        cnt_tt550_encoder_sensitivity->step(1);
        cnt_tt550_encoder_sensitivity->value(10);
        cnt_tt550_encoder_sensitivity->callback((Fl_Callback*)cb_cnt_tt550_encoder_sensitivity);
        cnt_tt550_encoder_sensitivity->align(FL_ALIGN_TOP);
        o->value(progStatus.tt550_encoder_sensitivity);
      } // Fl_Counter* cnt_tt550_encoder_sensitivity
      { Fl_Choice* o = sel_550_step_size = new Fl_Choice(211, 372, 72, 22, _("Step size"));
        sel_550_step_size->down_box(FL_BORDER_BOX);
        sel_550_step_size->callback((Fl_Callback*)cb_sel_550_step_size);
        sel_550_step_size->align(FL_ALIGN_TOP);
        o->add("1|10|100|1 K|10 K");
        o->value(progStatus.tt550_encoder_step);
      } // Fl_Choice* sel_550_step_size
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}
