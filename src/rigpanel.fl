# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
i18n_type 1 
i18n_include "gettext.h" 
i18n_function _ 
header_name {.h} 
code_name {.cxx}
decl {\#include "images.h"} {} 

decl {\#include "rig.h"} {} 

decl {\#include "status.h"} {} 

decl {\#include "support.h"} {} 

decl {\#include "K3_ui.h"} {} 

decl {const int freq_sel_widths[]={110, 70, 70, 0};} {} 

Function {Rig_window()} {open
} {
  Fl_Window {} {
    label Flrig open
    xywh {577 57 424 324} type Double align 80
    code0 {\#include <stdlib.h>} visible
  } {
    Fl_Menu_Bar {} {open
      xywh {0 0 424 22} textsize 12
    } {
      Submenu {} {
        label {&Files} open
        xywh {10 10 100 20}
      } {
        MenuItem mnuExit {
          label {E&xit}
          callback {cbExit();}
          xywh {10 10 100 20}
        }
      }
      Submenu mnuConfig {
        label {&Config} open
        xywh {10 10 100 20}
      } {
        MenuItem mnuRestoreData {
          label {Restore Freq/Mode}
          callback {progStatus.restore_rig_data = !progStatus.restore_rig_data;}
          tooltip {Restore on exit} xywh {10 10 36 21} type Toggle value 1
        }
        MenuItem mnuKeepData {
          label {Keep Freq/Mode}
          callback {progStatus.use_rig_data= !progStatus.use_rig_data;}
          tooltip {Use xcvr freq/mode on startup} xywh {0 0 36 21} type Toggle value 1 divider
        }
        MenuItem mnuColorConfig {
          label Colors
          callback {setDisplayColors();}
          xywh {0 0 34 21}
        }
        MenuItem mnuTooltips {
          label Tooltips
          callback {progStatus.tooltips=mnuTooltips->value();
Fl_Tooltip::enable(progStatus.tooltips);}
          xywh {0 0 36 21} type Toggle divider
          code0 {\#include <FL/Fl_Tooltip.H>}
          code1 {progStatus.tooltips ? o->set() :o->clear();}
        }
        MenuItem mnuConfigXcvr {
          label {Xcvr select}
          callback {configXcvr();}
          xywh {0 0 34 21}
        }
      }
      MenuItem {} {
        label {&Memory}
        callback {openMemoryDialog();}
        tooltip {Open vfo memory list} xywh {0 0 36 21}
      }
      MenuItem save_me {
        label {@>>}
        callback {addFreq();}
        tooltip {Add freq/mode/bw to saved list} xywh {0 0 36 21}
      }
      Submenu {} {
        label {&Debug} open
        xywh {0 0 70 21} divider
      } {
        MenuItem {} {
          label {&Events}
          callback {cbEventLog();}
          xywh {0 0 34 21} divider
        }
        MenuItem {} {
          label {&Polling}
          callback {open_poll_tab();}
          xywh {0 0 36 21}
        }
        MenuItem {} {
          label {&Send command}
          callback {open_send_command_tab();}
          xywh {0 0 36 21}
        }
      }
      Submenu mnuHelp {
        label {&Help} open
        xywh {10 10 100 20}
      } {
        MenuItem mnuOnLineHelp {
          label {On Line Help}
          callback {visit_URL((void *)("http://www.w1hkj.com/flrig-help/index.html"));}
          xywh {0 0 36 21}
        }
        MenuItem mnuAbout {
          label {&About}
          callback {about();}
          xywh {10 10 100 20}
        }
      }
    }
    Fl_Output txt_encA {
      xywh {333 1 90 20} box THIN_DOWN_BOX align 20 hide
    }
    Fl_Box FreqDispA {
      label 10
      xywh {1 24 210 35} box DOWN_BOX when 1
      code0 {\#include "FreqControl.h"}
      code2 {FreqDispA->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);}
      code3 {o->setCallBack(movFreqA);}
      class cFreqControl
    }
    Fl_Box FreqDispB {
      label 10
      xywh {213 24 210 35} box DOWN_BOX when 1
      code0 {\#include "FreqControl.h"}
      code2 {FreqDispB->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);}
      code3 {o->setCallBack(movFreqB);}
      class cFreqControl
    }
    Fl_Light_Button btnVol {
      label Vol
      callback {cbMute();}
      tooltip {Speaker on/off} xywh {2 125 50 18} down_box THIN_DOWN_BOX value 1 labelsize 12
    }
    Fl_Value_Slider sldrVOLUME {
      callback {setVolume();}
      tooltip {Adjust Audio Volume} xywh {54 125 156 18} type {Horz Knob} box THIN_DOWN_BOX labelsize 12 align 16 maximum 100 step 1 textsize 12
      code0 {\#include "ValueSlider.h"}
      code1 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Value_Slider sldrRFGAIN {
      label RF
      callback {setRFGAIN();}
      tooltip {Adjust RF gain} xywh {54 145 156 18} type {Horz Knob} box THIN_DOWN_BOX align 4 maximum 100 step 1 value 15 textsize 12
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Value_Slider sldrSQUELCH {
      label SQL
      callback {setSQUELCH();}
      tooltip {Adjust Squelch} xywh {54 165 156 18} type {Horz Knob} box THIN_DOWN_BOX align 4 maximum 100 step 1 value 15 textsize 12
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Light_Button btnIFsh {
      label IFsh
      callback {cbIFsh();}
      tooltip {IF Shift On/Off} xywh {214 125 50 18} down_box THIN_DOWN_BOX labelsize 12
    }
    Fl_Value_Slider sldrIFSHIFT {
      callback {setIFshift();}
      tooltip {Adjust IF Shift} xywh {266 125 156 18} type {Horz Knob} box THIN_DOWN_BOX labelsize 12 align 16 minimum -1000 maximum 1000 step 10 textsize 12
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Light_Button btnNotch {
      label Nch
      callback {cbbtnNotch();}
      tooltip {Notch - Manual (off) Auto (on)} xywh {214 145 50 18} down_box THIN_DOWN_BOX labelsize 12
    }
    Fl_Value_Slider sldrNOTCH {
      callback {setNotch();}
      tooltip {Adjust Notch Frequency} xywh {266 145 156 18} type {Horz Knob} box THIN_DOWN_BOX align 16 minimum -1000 maximum 1000 step 10 textsize 12
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Light_Button btnNR {
      label NR
      callback {cbNR();}
      tooltip {Noise Reduction On/Off} xywh {214 165 50 18} down_box THIN_DOWN_BOX labelsize 12
    }
    Fl_Value_Slider sldrNR {
      callback {setNR();}
      tooltip {Adjust noise reduction} xywh {266 165 156 18} type {Horz Knob} box THIN_DOWN_BOX labelsize 12 align 16 maximum 100 step 2 textsize 12
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Light_Button btnDataPort {
      label Data
      callback {progStatus.data_port = o->value();}
      tooltip {Input on Data Port} xywh {2 246 60 18} down_box THIN_DOWN_BOX labelsize 12 hide
      code0 {o->value(progStatus.data_port);}
    }
    Fl_Value_Slider sldrMICGAIN {
      label MIC
      callback {setMicGain();}
      tooltip {Adjust Mic Gain} xywh {54 185 156 18} type {Horz Knob} box THIN_DOWN_BOX align 4 maximum 100 step 1 textsize 12
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Value_Slider sldrPOWER {
      label PWR
      callback {setPower();}
      tooltip {Adjust power level} xywh {266 185 156 18} type {Horz Knob} box THIN_DOWN_BOX align 4 maximum 100 step 1 value 15 textsize 12
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Box txtInactive {
      label {1296000.000}
      tooltip {Vfo \#2} xywh {211 76 128 19} box DOWN_BOX labelfont 4 labelsize 16 align 24 hide
    }
    Fl_Light_Button btnA {
      label vfoA
      callback {if (btnA->value()==1)
	cb_selectA();
btnA->value(1);
btnB->value(0);}
      tooltip {Rx-A / Tx-B} xywh {212 62 52 20} down_box THIN_DOWN_BOX labelsize 12
      code0 {o->value(!useB);}
    }
    Fl_Light_Button btnB {
      label vfoB
      callback {if (btnB->value()==1)
	cb_selectB();
btnB->value(1);
btnA->value(0);}
      tooltip {Rx-A / Tx-B} xywh {265 62 52 20} down_box THIN_DOWN_BOX labelsize 12
      code0 {o->value(useB);}
    }
    Fl_Button btn_K3_swapAB {
      label {A/B}
      callback {cb_K3_swapAB();}
      tooltip {Swap A/B} xywh {265 62 52 20} down_box DOWN_BOX labelsize 12 hide
    }
    Fl_Button btnA2B {
      label {A -> B}
      callback {cbA2B();}
      tooltip {Copy A to B} xywh {318 62 52 20} down_box DOWN_BOX labelsize 12
    }
    Fl_Light_Button btnSplit {
      label Split
      callback {cb_set_split(o->value());}
      tooltip {Rx-A / Tx-B} xywh {371 62 52 20} down_box THIN_DOWN_BOX labelsize 12
      code0 {o->value(progStatus.split);}
    }
    Fl_Group opBW {
      label Bandwidth
      callback {setBW();} open
      tooltip {Select Transceiver Bandwidth} xywh {212 84 105 18} box FLAT_BOX labelsize 12 align 16
      code0 {\#include "combo.h"}
      class Fl_ComboBox
    } {}
    Fl_Button btnDSP {
      label L
      callback {selectDSP();}
      xywh {212 84 18 18} hide
    }
    Fl_Group opDSP_lo {
      label {Lo Cut}
      callback {setDSP();} open
      tooltip {Lo Cut Freq} xywh {231 84 86 18} box DOWN_BOX color 7 labelsize 12 align 16 hide
      class Fl_ComboBox
    } {}
    Fl_Group opDSP_hi {
      label {Hi Cut}
      callback {setDSP();} open
      tooltip {Hi Cut Freq} xywh {231 84 86 18} box DOWN_BOX color 7 labelsize 12 align 16 hide
      class Fl_ComboBox
    } {}
    Fl_Group opMODE {
      label Mode
      callback {setMode();} open
      tooltip {Select transceiver operating mode} xywh {318 84 105 18} box FLAT_BOX labelsize 12 align 16
      code0 {\#include "combo.h"}
      class Fl_ComboBox
    } {}
    Fl_Button btn_show_controls {
      label {@-22->}
      callback {show_controls();}
      tooltip {Show/Hide controls} xywh {3 206 18 18}
    }
    Fl_Light_Button btnAttenuator {
      label Att
      callback {cbAttenuator();}
      tooltip {Attenuator On/Off} xywh {26 206 60 18} down_box THIN_DOWN_BOX labelsize 12
    }
    Fl_Light_Button btnPreamp {
      label Pre
      callback {cbPreamp();}
      tooltip {Preamp On/Off} xywh {93 206 60 18} down_box THIN_DOWN_BOX labelsize 12
    }
    Fl_Light_Button btnNOISE {
      label NB
      callback {cbNoise();}
      tooltip {Noise Blanker On/Off} xywh {160 206 60 18} down_box THIN_DOWN_BOX labelsize 12
    }
    Fl_Light_Button btnAutoNotch {
      label AN
      callback {cbAN();}
      tooltip {Auto Notch On/Off} xywh {227 206 60 18} down_box THIN_DOWN_BOX labelsize 12
    }
    Fl_Button btnTune {
      label Tune
      callback {cbTune();}
      tooltip {Momentary Tune} xywh {294 206 60 18}
    }
    Fl_Light_Button btnPTT {
      label PTT
      callback {cbPTT();}
      tooltip {Xmt On/Off} xywh {362 206 60 18} down_box THIN_DOWN_BOX labelsize 12
    }
    Fl_Group {} {
      xywh {1 62 210 60} box DOWN_BOX
    } {
      Fl_Group grpMeters {open
        xywh {3 63 206 57} box FLAT_BOX
      } {
        Fl_Box scaleSmeter {
          image {images/S60.xbm} xywh {3 63 206 20} box FLAT_BOX
        }
        Fl_Button btnALC_SWR {
          callback {cbALC_SWR();}
          tooltip {Press SWR / ALC} image {images/SWR.xbm} xywh {3 63 206 20} box FLAT_BOX down_box FLAT_BOX hide
        }
        Fl_Box sldrRcvSignal {
          xywh {5 85 181 6} box FLAT_BOX hide
          code0 {\#include "Fl_SigBar.h"}
          code1 {o->minimum(0);}
          code2 {o->maximum(100);}
          class Fl_SigBar
        }
        Fl_Box sldrALC_SWR {
          xywh {5 85 201 6} box FLAT_BOX hide
          code0 {o->minimum(0);}
          code1 {o->maximum(100);}
          class Fl_SigBar
        }
        Fl_Box sldrFwdPwr {
          xywh {5 92 201 6} box FLAT_BOX hide
          code0 {o->minimum(0);}
          code1 {o->maximum(100);}
          class Fl_SigBar
        }
        Fl_Box scalePower {
          image {images/P100.xbm} xywh {3 99 206 20} box FLAT_BOX
        }
      }
    }
    Fl_Box boxControl {
      label {Auxilliary Controls:}
      xywh {3 231 130 17} box FLAT_BOX align 16
    }
    Fl_Light_Button btnAuxRTS {
      label RTS
      callback {progStatus.aux_rts = o->value();
cbAuxPort();}
      tooltip {RTS control pin} xywh {218 230 60 18} down_box THIN_DOWN_BOX labelsize 12
      code0 {o->value(progStatus.aux_rts);}
    }
    Fl_Light_Button btnAuxDTR {
      label DTR
      callback {progStatus.aux_dtr = o->value();
cbAuxPort();}
      tooltip {DTR control pin} xywh {146 230 60 18} down_box THIN_DOWN_BOX labelsize 12
      code0 {o->value(progStatus.aux_dtr);}
    }
    Fl_Light_Button btnMicLine {
      label Mic
      callback {cbbtnMicLine();}
      tooltip {Select Mic / Line audio inp.} xywh {3 283 55 18} down_box THIN_DOWN_BOX labelsize 12 hide
    }
    Fl_Counter cntRIT {
      label R
      callback {cbRIT();}
      tooltip RIT xywh {213 104 54 18} type Simple labelsize 12 align 8 minimum -1000 maximum 1000 step 10
    }
    Fl_Counter cntXIT {
      label X
      callback {cbXIT();}
      tooltip XIT xywh {283 104 54 18} type Simple labelsize 12 align 8 minimum -1000 maximum 1000 step 10
    }
    Fl_Counter cntBFO {
      label B
      callback {cbBFO();}
      tooltip BFO xywh {355 104 54 18} type Simple labelsize 12 align 8 minimum 0 maximum 1000 step 10 value 600
    }
    Fl_Button btnInitializing {
      label {Initializing

Please wait}
      xywh {0 23 424 100} color 206 labelfont 1 labelsize 24 hide
    }
    Fl_Tabs tabs550 {open
      xywh {1 252 422 70} selection_color 50 hide
    } {
      Fl_Group tt550_CW {
        label CW open
        xywh {2 272 420 50} color 50 selection_color 50
      } {
        Fl_Counter cnt_tt550_cw_wpm {
          label wpm
          callback {progStatus.tt550_cw_wpm = (int)o->value();
cb_tt550_cw_wpm();}
          xywh {7 277 60 22} type Simple minimum 5 maximum 80 step 1 value 24
          code0 {o->value(progStatus.tt550_cw_wpm);}
        }
        Fl_Counter cnt_tt550_cw_weight {
          label Weight
          callback {progStatus.tt550_cw_weight = o->value();
cb_tt550_cw_weight();}
          xywh {74 277 60 22} type Simple minimum 0.75 maximum 1.5 step 0.05 value 1
          code0 {o->value(progStatus.tt550_cw_weight);}
        }
        Fl_Counter cnt_tt550_cw_qsk {
          label Delay
          callback {progStatus.tt550_cw_qsk = (int)o->value();
cb_tt550_cw_qsk();}
          tooltip {QSK delay (msec)} xywh {142 277 60 22} type Simple minimum 0 maximum 100 step 1 value 20
          code0 {o->value(progStatus.tt550_cw_qsk);}
        }
        Fl_Counter cnt_tt550_cw_vol {
          label {S-T vol}
          callback {progStatus.tt550_cw_vol=(int)o->value();
cb_tt550_cw_vol();}
          tooltip {Side tone volume} xywh {209 277 60 22} type Simple minimum 5 maximum 80 step 1 value 24
          code0 {o->value(progStatus.tt550_cw_vol);}
        }
        Fl_Counter cnt_tt550_cw_spot {
          label {Spot Vol}
          callback {progStatus.tt550_cw_spot=(int)o->value();
cb_tt550_cw_spot();}
          tooltip {Spot volume} xywh {277 277 60 22} type Simple minimum 0 maximum 100 step 1 value 20
          code0 {o->value(progStatus.tt550_cw_spot);}
        }
        Fl_Check_Button btn_tt550_enable_keyer {
          label Keyer
          callback {progStatus.tt550_enable_keyer=o->value();
cb_tt550_enable_keyer();}
          tooltip {Enable keyer} xywh {346 280 70 15} down_box DOWN_BOX
          code0 {o->value(progStatus.tt550_enable_keyer);}
        }
      }
      Fl_Group tt550_VOX {
        label Vox open
        xywh {2 272 420 50} hide
      } {
        Fl_Counter cnt_tt550_vox_gain {
          label gain
          callback {progStatus.tt550_vox_gain=(int)o->value();
cb_tt550_vox_gain();}
          xywh {60 277 70 22} type Simple minimum 0 maximum 100 step 1
          code0 {o->value(progStatus.tt550_vox_gain);}
        }
        Fl_Counter cnt_tt550_anti_vox {
          label anti
          callback {progStatus.tt550_vox_anti=(int)o->value();
cb_tt550_vox_anti();}
          xywh {136 277 70 22} type Simple minimum 0 maximum 100 step 1
          code0 {o->value(progStatus.tt550_vox_anti);}
        }
        Fl_Counter cnt_tt550_vox_hang {
          label hang
          callback {progStatus.tt550_vox_hang = (int)o->value();
cb_tt550_vox_hang();}
          xywh {212 277 70 22} type Simple minimum 0 maximum 100 step 1
          code0 {o->value(progStatus.tt550_vox_hang);}
        }
        Fl_Light_Button btn_tt550_vox {
          label VOX
          callback {progStatus.tt550_vox_onoff=o->value();
cb_tt550_vox_onoff();}
          xywh {289 277 70 22}
          code0 {o->value(progStatus.tt550_vox_onoff);}
        }
      }
      Fl_Group tt550_Speech {
        label Spch open
        xywh {2 272 420 50} hide
      } {
        Fl_Light_Button btn_tt550_CompON {
          label On
          callback {progStatus.tt550_compON=o->value();
cb_tt550_compression();}
          xywh {244 277 70 22}
          code0 {o->value(progStatus.tt550_compON);}
        }
        Fl_Counter cnt_tt550_compression {
          label Comp
          callback {progStatus.tt550_compression=(int)o->value();
cb_tt550_compression();}
          xywh {167 277 70 22} type Simple minimum 0 maximum 100 step 1
          code0 {o->value(progStatus.tt550_compression);}
        }
        Fl_Counter cnt_tt550_mon_vol {
          label {Mon vol}
          callback {progStatus.tt550_mon_vol=(int)o->value();
cb_tt550_mon_vol();}
          tooltip {Side tone volume} xywh {91 277 70 22} type Simple minimum 0 maximum 100 step 1 value 25
          code0 {o->value(progStatus.tt550_mon_vol);}
        }
      }
      Fl_Group tt550_Audio {
        label Audio open
        xywh {2 272 420 50} hide
      } {
        Fl_Counter cnt_tt550_line_out {
          label {line out}
          callback {progStatus.tt550_line_out = (int)o->value();
cb_tt550_line_out();}
          xywh {114 282 69 22} type Simple align 4 minimum 0 maximum 100 step 1 value 20
          code0 {o->value(progStatus.tt550_line_out);}
        }
        Fl_Check_Button btnAccInp {
          label {Acc Inp.}
          callback {progStatus.tt550_use_line_in=o->value();
cb_tt550_use_line_in();}
          tooltip {Enable to use accessory audio input} xywh {197 285 82 15} down_box DOWN_BOX
          code0 {o->value(progStatus.tt550_use_line_in);}
        }
      }
      Fl_Group tt550_Rx {
        label RX open
        xywh {2 272 420 50} hide
      } {
        Fl_Group cbo_tt550_nb_level {
          label {NB level}
          callback {progStatus.tt550_nb_level = o->index();
cb_tt550_nb_level();} open
          tooltip {Select Transceiver} xywh {50 277 80 22} box DOWN_BOX align 2
          code0 {\#include "combo.h"}
          code1 {o->index(progStatus.tt550_nb_level);}
          class Fl_ComboBox
        } {}
        Fl_Group cbo_tt550_agc_level {
          label AGC
          callback {progStatus.tt550_agc_level = o->index();
cb_tt550_agc_level();} open
          tooltip {Select Transceiver} xywh {150 277 80 22} box DOWN_BOX align 2
          code0 {\#include "combo.h"}
          code1 {o->index(progStatus.tt550_agc_level);}
          class Fl_ComboBox
        } {}
        Fl_Counter cnt_tt550_vfo_adj {
          label {Vfo Adj(ppm)}
          callback {progStatus.vfo_adj=o->value();
cb_vfo_adj();}
          xywh {245 277 120 22} align 34
          code0 {o->value(progStatus.vfo_adj);}
          code1 {o->lstep(1.0);}
        }
      }
      Fl_Group tt550_Tx {
        label TX open
        xywh {2 272 420 50} hide
      } {
        Fl_Check_Button btn_tt550_enable_xmtr {
          label {Tx ON}
          callback {progStatus.tt550_enable_xmtr=o->value();
cb_tt550_enable_xmtr();}
          xywh {10 281 70 15} down_box DOWN_BOX value 1
          code0 {o->value(progStatus.tt550_enable_xmtr);}
        }
        Fl_Check_Button btn_tt550_enable_tloop {
          label Tloop
          callback {progStatus.tt550_enable_tloop=o->value();
cb_tt550_enable_tloop();}
          xywh {87 281 70 15} down_box DOWN_BOX
          code0 {o->value(progStatus.tt550_enable_tloop);}
        }
        Fl_Check_Button btn_tt550_tuner_bypass {
          label Tuner
          callback {progStatus.tt550_tuner_bypass=o->value();
cb_tt550_tuner_bypass();}
          tooltip {Check to bypass tuner} xywh {164 281 70 15} down_box DOWN_BOX
        }
        Fl_Group op_tt550_XmtBW {
          label {Xmt BW}
          callback {progStatus.tt550_xmt_bw = o->index();
cb_tt550_setXmtBW();} open
          tooltip {Select Transceiver Bandwidth} xywh {241 277 100 22} box DOWN_BOX labelsize 12 align 2
          code0 {o->index(progStatus.tt550_xmt_bw);}
          class Fl_ComboBox
        } {}
        Fl_Check_Button btn_tt550_use_xmt_bw {
          label Enable
          callback {progStatus.tt550_use_xmt_bw = o->value();
cb_tt550_setXmtBW();}
          tooltip {Use Xmt BW setting} xywh {345 281 21 15} down_box DOWN_BOX align 8
          code0 {o->value(progStatus.tt550_use_xmt_bw);}
        }
      }
      Fl_Group tt550_302A {
        label {302-A} open
        xywh {2 272 420 50} hide
      } {
        Fl_Counter cnt_tt550_keypad_time_out {
          label {Time out}
          callback {progStatus.tt550_keypad_timeout=(int)(o->value()*1000.0);}
          tooltip {Clear M302 keypad after \#\# secs} xywh {31 277 120 21} align 34 minimum 0.5 maximum 10 value 2
          code0 {o->value(progStatus.tt550_keypad_timeout/1000.0);}
          code1 {o->step(0.1); o->lstep(1.0);}
        }
        Fl_Counter cnt_tt550_encoder_sensitivity {
          label Sensitivity
          callback {progStatus.tt550_encoder_sensitivity = o->value();}
          tooltip {1 - most sensitive} xywh {191 277 80 21} type Simple minimum 1 maximum 25 step 1 value 10
          code0 {o->value(progStatus.tt550_encoder_sensitivity);}
        }
        Fl_Choice sel_tt550_encoder_step {
          label {Step size}
          callback {progStatus.tt550_encoder_step = o->value();} open
          xywh {312 277 72 21} down_box BORDER_BOX align 2
          code0 {o->add("1|10|100|1 K|10 K");}
          code1 {o->value(progStatus.tt550_encoder_step);}
        } {}
      }
      Fl_Group tt550_302B {
        label {302-B} open
        xywh {2 272 420 50} hide
      } {
        Fl_Choice sel_tt550_F1_func {
          label F1
          callback {progStatus.tt550_F1_func = o->value();} open
          tooltip {Assign Func Key} xywh {34 277 99 22} down_box BORDER_BOX
          code0 {o->add("None|Clear|CW++|CW--|Band++|Band--|Step++|Step--");}
          code1 {o->value(progStatus.tt550_F1_func);}
        } {}
        Fl_Choice sel_tt550_F2_func {
          label F2
          callback {progStatus.tt550_F2_func = o->value();} open
          tooltip {Assign Func Key} xywh {169 277 99 22} down_box BORDER_BOX
          code0 {o->add("None|Clear|CW++|CW--|Band++|Band--|Step++|Step--");}
          code1 {o->value(progStatus.tt550_F2_func);}
        } {}
        Fl_Choice sel_tt550_F3_func {
          label F3
          callback {progStatus.tt550_F3_func = o->value();} open
          tooltip {Assign Func Key} xywh {300 277 99 22} down_box BORDER_BOX
          code0 {o->add("None|Clear|CW++|CW--|Band++|Band--|Step++|Step--");}
          code1 {o->value(progStatus.tt550_F3_func);}
        } {}
      }
    }
    Fl_Tabs tabsGeneric {open
      xywh {1 252 422 70} selection_color 50
    } {
      Fl_Group genericBands {
        label Bands open selected
        xywh {2 271 420 49}
      } {
        Fl_Button btnBandSelect_1 {
          label {1.8}
          callback {cbBandSelect(1);}
          tooltip {160m Band} xywh {4 276 60 18} color 246
        }
        Fl_Button btnBandSelect_2 {
          label {3.5}
          callback {cbBandSelect(2);}
          tooltip {80m band} xywh {74 276 60 18} color 246
        }
        Fl_Button btnBandSelect_3 {
          label 7
          callback {cbBandSelect(3);}
          tooltip {40m band} xywh {145 276 60 18} color 246 align 64
        }
        Fl_Button btnBandSelect_4 {
          label 10
          callback {cbBandSelect(4);}
          tooltip {30m band} xywh {216 276 60 18} color 246
        }
        Fl_Button btnBandSelect_5 {
          label 14
          callback {cbBandSelect(5);}
          tooltip {20m band} xywh {287 276 60 18} color 246
        }
        Fl_Button btnBandSelect_6 {
          label 18
          callback {cbBandSelect(6);}
          tooltip {17m band} xywh {358 276 60 18} color 246
        }
        Fl_Button btnBandSelect_7 {
          label 21
          callback {cbBandSelect(7);}
          tooltip {15m band} xywh {4 299 60 18} color 246
        }
        Fl_Button btnBandSelect_8 {
          label 24
          callback {cbBandSelect(8);}
          tooltip {12m band} xywh {74 299 60 18} color 246
        }
        Fl_Button btnBandSelect_9 {
          label 28
          callback {cbBandSelect(9);}
          tooltip {10m band} xywh {145 299 60 18} color 246
        }
        Fl_Button btnBandSelect_10 {
          label 50
          callback {cbBandSelect(10);}
          tooltip {6m band} xywh {216 299 60 18} color 246
        }
        Fl_Button btnBandSelect_11 {
          label GEN
          callback {cbBandSelect(11);}
          tooltip {General RX} xywh {287 299 60 18} color 246
        }
        Fl_Button btnBandSelect_12 {
          label 5
          callback {cbBandSelect(12);}
          tooltip {60m band} xywh {358 299 60 18} color 246
        }
      }
      Fl_Group genericCW {
        label CW open
        xywh {2 271 420 49} color 50 selection_color 50 hide
      } {
        Fl_Light_Button btnSpot {
          label Spot
          callback {progStatus.spot_onoff=o->value();
cb_cw_spot();}
          tooltip {Spot tone on/off} xywh {5 280 54 22}
          code0 {o->value(progStatus.cw_spot);}
        }
        Fl_Counter cnt_cw_spot_tone {
          label {Spot tone}
          callback {progStatus.cw_spot_tone=(int)o->value();
cb_cw_spot_tone();}
          tooltip {Spot volume} xywh {62 280 70 22} type Simple minimum 300 maximum 1050 step 50 value 1050
          code0 {o->value(progStatus.cw_spot);}
        }
        Fl_Counter cnt_cw_qsk {
          label {QSK dly}
          callback {progStatus.cw_qsk = (int)o->value();
cb_cw_qsk();}
          tooltip {QSK delay (msec)} xywh {136 280 70 22} type Simple minimum 0 maximum 100 step 1 value 20
          code0 {o->value(progStatus.tt550_cw_qsk);}
        }
        Fl_Counter cnt_cw_weight {
          label Weight
          callback {progStatus.cw_weight = o->value();
cb_cw_weight();}
          xywh {209 280 70 22} type Simple minimum 2.5 maximum 4.5 value 3
          code0 {o->value(progStatus.cw_weight);}
        }
        Fl_Counter cnt_cw_wpm {
          label wpm
          callback {progStatus.cw_wpm = o->value();
cb_cw_wpm();}
          xywh {283 280 70 22} type Simple minimum 5 maximum 80 step 1 value 24
          code0 {o->value(progStatus.cw_wpm);}
        }
        Fl_Check_Button btn_enable_keyer {
          label Keyer
          callback {progStatus.enable_keyer=o->value();
cb_enable_keyer();}
          tooltip {Enable internal keyer} xywh {357 283 60 15} down_box DOWN_BOX
          code0 {o->value(progStatus.enable_keyer);}
        }
      }
      Fl_Group genericVOX {
        label Vox open
        xywh {2 271 420 49} hide
      } {
        Fl_Counter cnt_vox_gain {
          label gain
          callback {progStatus.vox_gain=(int)o->value();
cb_vox_gain();}
          xywh {9 279 70 22} type Simple minimum 0 maximum 100 step 1
          code0 {o->value(progStatus.vox_gain);}
        }
        Fl_Counter cnt_anti_vox {
          label anti
          callback {progStatus.vox_anti=(int)o->value();
cb_vox_anti();}
          xywh {85 279 70 22} type Simple minimum 0 maximum 100 step 1
          code0 {o->value(progStatus.vox_anti);}
        }
        Fl_Counter cnt_vox_hang {
          label hang
          callback {progStatus.vox_hang = (int)o->value();
cb_vox_hang();}
          xywh {161 279 70 22} type Simple minimum 0 maximum 100 step 1
          code0 {o->value(progStatus.vox_hang);}
        }
        Fl_Light_Button btn_vox {
          label VOX
          callback {progStatus.vox_onoff=o->value();
cb_vox_onoff();}
          xywh {238 279 70 22}
          code0 {o->value(progStatus.vox_onoff);}
        }
        Fl_Check_Button btn_vox_on_dataport {
          label {Data port}
          callback {progStatus.vox_on_dataport=o->value();
cb_vox_on_dataport();}
          tooltip {Data port signal triggers VOX} xywh {322 282 70 15} down_box DOWN_BOX
          code0 {o->value(progStatus.vox_on_dataport);}
        }
      }
      Fl_Group genericSpeech {
        label Spch open
        xywh {2 271 420 49} hide
      } {
        Fl_Light_Button btnCompON {
          label On
          callback {progStatus.compON=o->value();
cb_compression();}
          xywh {215 281 70 22}
          code0 {o->value(progStatus.compON);}
        }
        Fl_Counter cnt_compression {
          label Comp
          callback {progStatus.compression=(int)o->value();
cb_compression();}
          xywh {138 281 70 22} type Simple minimum 0 maximum 100 step 1
          code0 {o->value(progStatus.compression);}
        }
      }
      Fl_Group genericRx {
        label RX open
        xywh {2 271 420 49} hide
      } {
        Fl_Group cbo_nb_level {
          label {NB level}
          callback {progStatus.nb_level = o->index();
cb_nb_level();} open
          tooltip {Select Transceiver} xywh {12 281 80 22} box DOWN_BOX align 2
          code0 {\#include "combo.h"}
          code1 {o->index(progStatus.nb_level);}
          class Fl_ComboBox
        } {}
        Fl_Group cbo_agc_level {
          label AGC
          callback {progStatus.agc_level = o->index();
cb_agc_level();} open
          tooltip {Select Transceiver} xywh {123 281 80 22} box DOWN_BOX align 2
          code0 {\#include "combo.h"}
          class Fl_ComboBox
        } {}
        Fl_Counter cnt_bpf_center {
          label {BPF Center Freq}
          callback {progStatus.bpf_center=o->value();
cb_bpf_center();}
          tooltip {Bandpass Filter Center Freq} xywh {234 281 96 22} type Simple align 34 minimum 600 maximum 2500 step 10 value 1500
          code0 {o->value(progStatus.bpf_center);}
        }
        Fl_Check_Button btn_use_bpf_center {
          label On
          callback {progStatus.use_bpf_center = o->value();
cb_bpf_center();}
          tooltip {Use Filter Center Freq Adj} xywh {361 284 50 15} down_box DOWN_BOX value 1
          code0 {o->value(progStatus.use_bpf_center);}
        }
      }
      Fl_Group genericMisc {
        label Misc open
        xywh {2 271 420 49} hide
      } {
        Fl_Counter cnt_vfo_adj {
          label {Vfo Adj(ppm)}
          callback {progStatus.vfo_adj=o->value();
cb_vfo_adj();}
          xywh {24 279 96 22} type Simple align 34
          code0 {o->value(progStatus.vfo_adj);}
        }
        Fl_Counter cnt_line_out {
          label {line out}
          callback {progStatus.line_out = o->value();
cb_line_out();}
          xywh {146 279 70 22} type Simple minimum 0 maximum 100 step 1 value 20
          code0 {o->value(progStatus.line_out);}
        }
        Fl_Light_Button btnSpecial {
          label Special
          callback {cb_special();}
          xywh {242 279 74 20}
        }
      }
    }
  }
} 

Function {DisplayDialog()} {} {
  Fl_Window {} {
    label {Flrig Colors} open
    xywh {577 415 424 213} type Double hide
  } {
    Fl_Group {} {open
      xywh {2 2 218 70} box ENGRAVED_FRAME
    } {
      Fl_Group {} {open
        xywh {5 6 210 35} box DOWN_BOX
      } {
        Fl_Box lblTest {
          label {14070.000}
          xywh {7 8 206 31} box FLAT_BOX labelfont 4 labelsize 32
        }
      }
      Fl_Button prefFont {
        label Font
        callback {cbPrefFont();}
        xywh {10 46 60 22}
      }
      Fl_Button prefForeground {
        label Color
        callback {cbPrefForeground();}
        xywh {78 46 60 22}
      }
      Fl_Button btnBacklight {
        label Back
        callback {cbBacklightColor();}
        xywh {146 46 60 22}
      }
    }
    Fl_Group {} {open
      xywh {2 74 284 107}
    } {
      Fl_Group {} {open
        xywh {5 77 210 100} box DOWN_BOX
      } {
        Fl_Group grpMeterColor {
          xywh {7 79 206 96} box FLAT_BOX
        } {
          Fl_Box scaleSmeterColor {
            image {images/S60.xbm} xywh {8 79 205 20} box FLAT_BOX
            code0 {o->color(scaleSmeter->color());}
          }
          Fl_Box sldrRcvSignalColor {
            xywh {10 99 200 6} box FLAT_BOX
            class Fl_SigBar
          }
          Fl_Box sldrSWRcolor {
            xywh {10 130 200 6} box FLAT_BOX
            code0 {o->minimum(0);}
            code1 {o->maximum(100);}
            class Fl_SigBar
          }
          Fl_Box scaleSWRcolor {
            image {images/SWR.xbm} xywh {8 110 205 20} box FLAT_BOX
          }
          Fl_Box sldrPWRcolor {
            xywh {8 147 200 6} box FLAT_BOX
            code0 {o->minimum(0);}
            code1 {o->maximum(100);}
            class Fl_SigBar
          }
          Fl_Box scalePWRcolor {
            image {images/P100.xbm} xywh {8 153 205 20} box FLAT_BOX
          }
        }
      }
      Fl_Button btMeterColor {
        label Smeter
        callback {cbSMeterColor();}
        xywh {221 78 60 22}
      }
      Fl_Button btnSWRColor {
        label SWR
        callback {cbSWRMeterColor();}
        xywh {221 103 60 22}
      }
      Fl_Button btnPwrColor {
        label Pwr
        callback {cbPwrMeterColor();}
        xywh {221 128 60 22}
      }
      Fl_Button btnPeakColor {
        label Peak
        callback {cbPeakMeterColor();}
        xywh {221 154 60 22}
      }
    }
    Fl_Group {} {
      label System
      xywh {220 2 202 70} box ENGRAVED_FRAME align 21
    } {
      Fl_Choice mnuScheme {
        label UI
        callback {progStatus.ui_scheme = o->text();
Fl::scheme(progStatus.ui_scheme.c_str());} open
        tooltip {Change application look and feel} xywh {227 22 80 22} down_box BORDER_BOX align 8
        code0 {mnuScheme->add("base");}
        code1 {mnuScheme->add("gtk+");}
        code2 {mnuScheme->add("plastic");}
        code3 {mnuScheme->value(mnuScheme->find_item(progStatus.ui_scheme.c_str()));}
      } {}
      Fl_Button pref_sys_foreground {
        label Fgnd
        callback {cb_sys_foreground();}
        tooltip {Label color} xywh {227 46 60 22}
      }
      Fl_Button pref_sys_background {
        label Bngd
        callback {cb_sys_background();}
        tooltip {Background - normal} xywh {291 46 60 22}
      }
      Fl_Button prefsys_background2 {
        label Bgnd2
        callback {cb_sys_background2();}
        tooltip {Background - selected} xywh {356 46 60 22}
      }
      Fl_Button prefsys_defaults {
        label Default
        callback {cb_sys_defaults();}
        tooltip {Background - selected} xywh {356 21 60 22}
      }
    }
    Fl_Group {} {
      xywh {287 122 134 88} box ENGRAVED_FRAME
    } {
      Fl_Value_Slider sldrColors {
        tooltip {Adjust power level} xywh {291 128 125 20} type {Horz Knob} box THIN_DOWN_BOX align 0 maximum 100 step 1 value 15 textsize 12
        code0 {o->reverse(true);}
        class Fl_Wheel_Value_Slider
      }
      Fl_Button pref_slider_background {
        label Bngd
        callback {cb_slider_background();}
        tooltip {Background - normal} xywh {291 154 60 22}
      }
      Fl_Button pref_slider_select {
        label Button
        callback {cb_slider_select();}
        tooltip {Background - normal} xywh {356 154 60 22}
      }
      Fl_Button prefslider_defaults {
        label Default
        callback {cb_slider_defaults();}
        tooltip {Background - selected} xywh {324 183 60 22}
      }
    }
    Fl_Button btnReset {
      label Reset
      callback {cb_reset_display_dialog();}
      tooltip {Restore all flrig defaults} xywh {25 184 60 22}
    }
    Fl_Button btnCancel {
      label Cancel
      callback {cbCancelDisplayDialog();}
      tooltip {Discard current changes} xywh {113 184 60 22}
    }
    Fl_Return_Button btnOkDisplayDialog {
      label OK
      callback {cbOkDisplayDialog();}
      tooltip {Save Current Changes} xywh {201 184 60 22}
    }
    Fl_Group {} {open
      xywh {287 74 134 45} box ENGRAVED_FRAME
    } {
      Fl_Light_Button btn_lighted {
        label {Lt Btn}
        callback {cb_lighted_button();}
        xywh {291 85 60 22}
      }
      Fl_Button btn_lighted_default {
        label Default
        callback {cb_lighted_default();}
        tooltip {Background - selected} xywh {356 85 60 22}
      }
    }
  }
} 

Function {Memory_Dialog()} {} {
  Fl_Window {} {
    label {Flrig Memory} open
    xywh {576 491 320 138} type Double hide
  } {
    Fl_Group {} {open
      xywh {2 2 60 133} box ENGRAVED_FRAME
    } {
      Fl_Button btnAddFreq {
        label {Add @-1>}
        callback {addFreq();}
        tooltip {Add to list} xywh {6 6 51 22} down_box DOWN_BOX labelsize 12 align 20
      }
      Fl_Button btnPickFreq {
        label {Pick @-1<}
        callback {if (FreqSelect->value())
selectFreq();}
        tooltip {Use selected data} xywh {6 31 51 22} down_box DOWN_BOX labelsize 12 align 20
      }
      Fl_Button btnDelFreq {
        label {Del @-11+}
        callback {delFreq();}
        tooltip {Delete from list} xywh {6 57 51 22} down_box DOWN_BOX labelsize 12 align 20
      }
      Fl_Button btnClearList {
        label {Clr @-2square}
        callback {clearList()}
        tooltip {Clear list} xywh {6 83 51 22} down_box DOWN_BOX labelsize 12 align 20
      }
      Fl_Button {} {
        label Close
        callback {cbCloseMemory();}
        tooltip {Close Memory dialog} xywh {6 109 51 22} labelsize 12 align 20
      }
    }
    Fl_Browser FreqSelect {
      callback {select_and_close();
switch (Fl::event_button()) {
case FL_LEFT_MOUSE:
if (Fl::event_clicks()) { // double click
	if (o->value())
		selectFreq();		
	o->parent()->hide();
}
break;
case FL_RIGHT_MOUSE:
	if (o->value()) selectFreq();
	break;
default:
	break;
}}
      tooltip {Right click => pick freq
Double-click ==> pick and close} xywh {66 2 250 133} type Hold labelfont 4 labelsize 12 textfont 4 textsize 12
      code0 {o->has_scrollbar(Fl_Browser_::VERTICAL_ALWAYS);}
      code1 {o->column_widths(freq_sel_widths);}
    }
  }
} 

Function {XcvrDialog()} {open
} {
  Fl_Window {} {
    label {I/O Ports} open
    xywh {575 496 482 257} type Double hide
  } {
    Fl_Tabs tabsConfig {open
      xywh {0 8 482 246}
    } {
      Fl_Group tabPrimary {
        label Primary
        xywh {2 30 475 222}
      } {
        Fl_Group {} {open
          xywh {5 34 195 140} box ENGRAVED_FRAME
        } {
          Fl_Group selectRig {
            label {Rig:}
            callback {btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();
initConfigDialog();} open
            tooltip {Select Transceiver} xywh {41 38 155 22} box DOWN_BOX align 4
            code0 {\#include "combo.h"}
            class Fl_ComboBox
          } {}
          Fl_Counter cntRigCatRetries {
            label Retries
            callback {progStatus.comm_retries = (int)o->value();}
            tooltip {Number of  times to resend
command before giving up} xywh {123 63 75 22} type Simple align 4 minimum 1 maximum 10 step 1 value 5
            code0 {o->value(progStatus.comm_retries);}
          }
          Fl_Counter cntRigCatTimeout {
            label {Retry intvl (ms)}
            callback {progStatus.comm_timeout = (int)o->value();}
            tooltip {Time between retries is msec} xywh {123 89 75 22} type Simple align 4 minimum 2 maximum 200 step 1 value 10
            code0 {o->value(progStatus.comm_timeout);}
          }
          Fl_Counter cntRigCatWait {
            label {Cmd Intvl (ms)}
            callback {progStatus.comm_wait = (int)o->value();}
            tooltip {Millseconds between sequential commands} xywh {123 115 75 22} type Simple align 4 minimum 0 maximum 100 step 1 value 5
            code0 {o->value(progStatus.comm_wait);}
          }
          Fl_Counter query_interval {
            label {qry intvl (ms):}
            callback {progStatus.serloop_timing = (int)o->value();}
            tooltip {Interval between Xvr queries} xywh {123 141 75 22} type Simple align 4 minimum 10 maximum 5000 step 10 value 50
            code0 {o->value(progStatus.serloop_timing);}
          }
        }
        Fl_Group {} {open
          tooltip {Two stop bits} xywh {202 94 270 80} box ENGRAVED_FRAME
        } {
          Fl_Group selectCommPort {
            label {Ser. Port}
            callback {btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();} open
            tooltip {Xcvr serial port} xywh {278 99 190 22} box DOWN_BOX align 4
            class Fl_ComboBox
          } {}
          Fl_Group mnuBaudrate {
            label {Baud:}
            callback {btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();} open
            tooltip {Xcvr baudrate} xywh {278 125 190 22} box DOWN_BOX align 4
            class Fl_ComboBox
          } {}
          Fl_Check_Button btnTwoStopBit {
            label {2 -StopBits}
            callback {if (o->value() == true) {
btnOneStopBit->value(false);
progStatus.stopbits = 2;
} else
o->value(true);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
            xywh {250 152 22 15} down_box DOWN_BOX align 8
            code0 {o->value(progStatus.stopbits == 2);}
          }
          Fl_Check_Button btnOneStopBit {
            label 1
            callback {if (o->value() == true) {
btnTwoStopBit->value(false);
progStatus.stopbits = 1;
} else
o->value(true);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
            tooltip {One Stop Bit} xywh {210 152 22 15} down_box DOWN_BOX align 8
            code0 {o->value(progStatus.stopbits == 1);}
          }
          Fl_Check_Button btnRigCatEcho {
            label {Echo }
            callback {btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
            xywh {397 152 22 15} down_box DOWN_BOX align 8
            code0 {o->value(progStatus.comm_echo);}
          }
        }
        Fl_Group {} {open
          xywh {202 34 270 64} box ENGRAVED_FRAME
        } {
          Fl_Input server_addr {
            label {Fldigi address:}
            callback {progStatus.server_addr = o->value();}
            tooltip {xmlrpc server address (7362)
change requires restart
Are you sure?} xywh {317 41 140 22}
            code0 {o->value(progStatus.server_addr.c_str());}
          }
          Fl_Input server_port {
            label {Fldigi port:}
            callback {progStatus.server_port = o->value();}
            tooltip {xmlrpc server address (7362)
change requires restart
Are you sure?} xywh {317 67 100 22} type Int
            code0 {o->value(progStatus.server_port.c_str());}
          }
        }
        Fl_Group {} {open
          xywh {4 175 243 73} box ENGRAVED_FRAME
        } {
          Fl_Round_Button btncatptt {
            label {PTT via CAT}
            callback {if (o->value()== 1) {
  btnrtsptt->value(0);
  btndtrptt->value(0);
  }
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
            tooltip {PTT is a CAT command (not hardware)} xywh {15 180 149 22} down_box ROUND_DOWN_BOX
            code0 {o->value(progStatus.comm_catptt);}
          }
          Fl_Round_Button btnrtsptt {
            label {PTT via RTS}
            callback {if (o->value() == 1) {
//  btndtrptt->value(0);
  btncatptt->value(0);
}
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
            tooltip {RTS is ptt line} xywh {15 203 149 22} down_box ROUND_DOWN_BOX
            code0 {o->value(progStatus.comm_rtsptt);}
          }
          Fl_Round_Button btndtrptt {
            label {PTT via DTR}
            callback {if (o->value() == 1) {
//  btnrtsptt->value(0);
  btncatptt->value(0);
}
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
            tooltip {DTR is ptt line} xywh {15 226 149 22} down_box ROUND_DOWN_BOX
            code0 {o->value(progStatus.comm_dtrptt);}
          }
          Fl_Check_Button chkrtscts {
            label {RTS/CTS}
            callback {btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
            tooltip {Xcvr uses RTS/CTS handshake} xywh {129 178 98 21} down_box DOWN_BOX
            code0 {o->value(progStatus.comm_rtscts);}
          }
          Fl_Check_Button btnrtsplus {
            label {RTS +12 v}
            callback {btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
            tooltip {Initial state of RTS} xywh {129 201 102 21} down_box DOWN_BOX
            code0 {o->value(progStatus.comm_rtsplus);}
          }
          Fl_Check_Button btndtrplus {
            label {DTR +12 v}
            callback {btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
            tooltip {Initial state of DTR} xywh {129 224 100 21} down_box DOWN_BOX
            code0 {o->value(progStatus.comm_dtrplus);}
          }
        }
        Fl_Group {} {open
          xywh {247 175 225 36} box ENGRAVED_FRAME align 21
        } {
          Fl_Input txtCIV {
            label {CI-V adr}
            callback {progStatus.CIV = atol(o->value());
cbCIV();}
            tooltip {Enter hex value, ie: 0x5F} xywh {261 183 58 22} type Int align 8
          }
          Fl_Button btnCIVdefault {
            label Default
            callback {cbCIVdefault();}
            xywh {387 183 69 22}
          }
        }
        Fl_Group {} {open
          xywh {247 212 225 36} box ENGRAVED_FRAME
        } {
          Fl_Check_Button btnUSBaudio {
            label {USB audio}
            callback {cbUSBaudio();}
            xywh {261 222 104 15} down_box DOWN_BOX
          }
          Fl_Check_Button btn_key_fldigi {
            label {key fldigi}
            callback {progStatus.key_fldigi = o->value();}
            tooltip {PTT keys fldigi modem} xywh {375 222 85 15} down_box DOWN_BOX
            code0 {o->value(progStatus.key_fldigi);}
          }
        }
      }
      Fl_Group tabPTT {
        label {Sep' PTT}
        xywh {2 30 475 222} hide
      } {
        Fl_Box {} {
          label {Use only if your setup requires a separate
Serial Port for a PTT control line}
          xywh {53 73 399 37}
        }
        Fl_Group selectSepPTTPort {
          label {PTT Port}
          callback {btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();} open
          tooltip {Aux control port} xywh {128 121 192 22} box DOWN_BOX align 4
          class Fl_ComboBox
        } {}
        Fl_Round_Button btnSepRTSptt {
          label {PTT via RTS}
          callback {if (o->value() == 1)
  btnSepDTRptt->value(0);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
          tooltip {RTS is ptt line} xywh {111 159 129 23} down_box ROUND_DOWN_BOX
          code0 {o->value(progStatus.sep_rtsptt);}
        }
        Fl_Check_Button btnSepRTSplus {
          label {RTS +12 v}
          callback {btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
          tooltip {Initial state of RTS} xywh {274 159 128 23} down_box DOWN_BOX
          code0 {o->value(progStatus.sep_rtsplus);}
        }
        Fl_Round_Button btnSepDTRptt {
          label {PTT via DTR}
          callback {if (o->value() == 1)
  btnSepRTSptt->value(0);
btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
          tooltip {DTR is ptt line} xywh {111 186 129 22} down_box ROUND_DOWN_BOX
          code0 {o->value(progStatus.sep_dtrptt);}
        }
        Fl_Check_Button btnSepDTRplus {
          label {DTR +12 v}
          callback {btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();}
          tooltip {Initial state of DTR} xywh {274 186 128 22} down_box DOWN_BOX
          code0 {o->value(progStatus.sep_dtrplus);}
        }
      }
      Fl_Group tabAux {
        label Aux
        xywh {2 30 475 222} hide
      } {
        Fl_Group selectAuxPort {
          label {Aux Port}
          callback {btnOkXcvrDialog->labelcolor(FL_RED);
btnOkXcvrDialog->redraw();} open
          tooltip {Aux control port} xywh {131 132 192 22} box DOWN_BOX align 4
          class Fl_ComboBox
        } {}
        Fl_Box {} {
          label {Use only if your setup requires a separate
Serial Port for a special Control Signals}
          xywh {56 84 399 38}
        }
      }
      Fl_Group tabPolling {
        label Polling open
        xywh {2 30 476 222} hide
      } {
        Fl_Group {} {
          label {Meters - polled every time} open
          xywh {4 34 474 54} box ENGRAVED_BOX align 21
        } {
          Fl_Check_Button btn_poll_smeter {
            label {S meter}
            callback {progStatus.poll_smeter = o->value();}
            xywh {13 58 104 15} down_box DOWN_BOX value 1
            code0 {o->value(progStatus.poll_smeter);}
          }
          Fl_Check_Button btn_poll_pout {
            label {Power out}
            callback {progStatus.poll_pout = o->value();}
            xywh {132 58 104 15} down_box DOWN_BOX value 1
            code0 {o->value(progStatus.poll_pout);}
          }
          Fl_Check_Button btn_poll_swr {
            label SWR
            callback {progStatus.poll_swr = o->value();}
            xywh {252 58 104 15} down_box DOWN_BOX value 1
            code0 {o->value(progStatus.poll_swr);}
          }
          Fl_Check_Button btn_poll_alc {
            label ALC
            callback {progStatus.poll_alc = o->value();}
            xywh {372 58 104 15} down_box DOWN_BOX value 1
            code0 {o->value(progStatus.poll_alc);}
          }
        }
        Fl_Group {} {
          label {Op' Controls - polled every time} open
          xywh {4 88 474 44} box ENGRAVED_BOX align 21
        } {
          Fl_Check_Button btn_poll_frequency {
            label Frequency
            callback {progStatus.poll_frequency = o->value();}
            tooltip {Frequency control} xywh {13 111 101 15} down_box DOWN_BOX value 1
            code0 {o->value(progStatus.poll_frequency);}
          }
          Fl_Check_Button btn_poll_mode {
            label Mode
            callback {progStatus.poll_mode = o->value();}
            tooltip {Mode selector} xywh {132 111 101 15} down_box DOWN_BOX value 1
            code0 {o->value(progStatus.poll_mode);}
          }
          Fl_Check_Button btn_poll_bandwidth {
            label Bandwidth
            callback {progStatus.poll_bandwidth = o->value();}
            tooltip {Bandwidth selector} xywh {252 111 101 15} down_box DOWN_BOX value 1
            code0 {o->value(progStatus.poll_bandwidth);}
          }
        }
        Fl_Group {} {
          label {Additional Controls} open
          xywh {4 132 474 119} box ENGRAVED_FRAME align 21
        } {
          Fl_Check_Button btn_poll_volume {
            label Volume
            callback {progStatus.poll_volume = o->value();}
            tooltip {Audio volume control} xywh {13 153 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_volume);}
          }
          Fl_Check_Button btn_poll_micgain {
            label {Mic gain}
            callback {progStatus.poll_micgain = o->value();}
            tooltip {Mic gain control} xywh {132 153 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_micgain);}
          }
          Fl_Check_Button btn_poll_rfgain {
            label {RF gain}
            callback {progStatus.poll_rfgain = o->value();}
            tooltip {RF gain control} xywh {252 153 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_rfgain);}
          }
          Fl_Check_Button btn_poll_power_control {
            label {Pwr control}
            callback {progStatus.poll_power_control = o->value();}
            tooltip {Power level control} xywh {372 153 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_power_control);}
          }
          Fl_Check_Button btn_poll_ifshift {
            label {IF shift}
            callback {progStatus.poll_ifshift = o->value();}
            tooltip {IF shift control} xywh {13 177 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_ifshift);}
          }
          Fl_Check_Button btn_poll_notch {
            label {Man' Notch}
            callback {progStatus.poll_notch = o->value();}
            tooltip {Manual notch control} xywh {132 177 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_notch);}
          }
          Fl_Check_Button btn_poll_auto_notch {
            label {Auto Notch}
            callback {progStatus.poll_auto_notch = o->value();}
            tooltip {Auto notch ON/OFF} xywh {252 177 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_auto_notch);}
          }
          Fl_Check_Button btn_poll_pre_att {
            label {Pre/Att}
            callback {progStatus.poll_pre_att = o->value();}
            tooltip {Preamp / Attenuator} xywh {13 201 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_pre_att);}
          }
          Fl_Check_Button btn_poll_squelch {
            label Squelch
            callback {progStatus.poll_squelch = o->value();}
            tooltip {Squelch level control} xywh {132 201 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_squelch);}
          }
          Fl_Check_Button btn_poll_split {
            label {Split VFO}
            callback {progStatus.poll_split = o->value();}
            tooltip {Vfo A/B split ops} xywh {252 201 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_split);}
          }
          Fl_Check_Button btn_poll_noise {
            label {Noise Blnk'}
            callback {progStatus.poll_noise = o->value();}
            tooltip {Noise blanker} xywh {13 226 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_noise);}
          }
          Fl_Check_Button btn_poll_nr {
            label {Noise Red'}
            callback {progStatus.poll_nr = o->value();}
            tooltip {Noise reduction} xywh {132 226 101 15} down_box DOWN_BOX
            code0 {o->value(progStatus.poll_nr);}
          }
          Fl_Value_Slider poll_extras_interval {
            label {poll every:}
            callback {progStatus.poll_extras_interval = o->value();}
            tooltip {Poll these controls once every N meter polls} xywh {332 223 140 21} type Horizontal color 20 align 4 minimum 1 maximum 10 step 1 value 4 textsize 14
            code0 {o->value(progStatus.poll_extras_interval);}
          }
        }
      }
      Fl_Group tabSndCmd {
        label {Send Cmd}
        xywh {2 30 475 222} hide
      } {
        Fl_Input txt_command {
          label {Enter text as ASCII string
Or sequence of hex values, x80 etc separated by spaces}
          xywh {29 53 434 23} align 6
          code0 {\#include "flinput2.h"}
          class Fl_Input2
        }
        Fl_Button btn_send_command {
          label SEND
          callback {cb_send_command();}
          xywh {392 156 71 19}
        }
        Fl_Output txt_response {
          label {Response to the SEND button}
          xywh {29 115 434 23} align 6
        }
        Fl_Box box_xcvr_connect {
          label {Connected to transceiver}
          tooltip {Lit when connected} xywh {29 180 18 18} box DIAMOND_DOWN_BOX color 50 align 8
        }
        Fl_Box box_fldigi_connect {
          label {Connected to fldigi}
          tooltip {Lit when connected} xywh {29 204 18 18} box DIAMOND_DOWN_BOX color 50 align 8
        }
      }
    }
    Fl_Button btnCancelCommConfig {
      label Close
      callback {cbCancelXcvrDialog();}
      xywh {346 2 60 25}
    }
    Fl_Return_Button btnOkXcvrDialog {
      label Init
      callback {cbOkXcvrDialog();}
      xywh {416 2 60 25}
    }
  }
} 
